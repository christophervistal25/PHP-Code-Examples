package com.vistalis.php_codes.Repositories;

import android.content.Context;

import com.vistalis.php_codes.DBModules.DB;
import com.vistalis.php_codes.DBModules.Models.Article;

import static com.vistalis.php_codes.Repositories.CategoryRepository.*;

public class ArticleRepository {

    private Context context;

    public ArticleRepository(Context context) {
        this.context = context;
    }

    private void create(int article_id, String title, String content)
    {
        Article article = new Article(article_id,title,content,false);
        DB.getInstance(this.context).articlesDao().insert(article);
    }

    private void basicArticles()
    {
        create(getIdByTitle(this.context,"Basics"),"PHP | Introduction","The term PHP is an acronym for PHP: Hypertext Preprocessor. PHP is a server-side scripting language designed specifically for web development. Websites like www.facebook.com, www.yahoo.com are also built on PHP.One of the main reason behind this is that PHP can be easily embedded in HTML files and HTML codes can also be written in a PHP file.The thing that differentiates PHP with client-side language like HTML is, PHP codes are executed on server whereas HTML codes are directly rendered on the browser. PHP codes are first executed on the server and then the result is returned to the browser.The only information that the client or browser knows is the result returned after executing the PHP script on the server and not the actual PHP codes present in the PHP file. Also, PHP files can support other client-side scripting languages like CSS and JavaScript.Why should we use PHP?PHP can actually do anything related to server-side scripting or more popularly known as the backend of a website. For example, PHP can receive data from forms, generate dynamic page content, can work with databases, create sessions, send and receive cookies, send emails etc. There are also many hash functions available in PHP to encrypt user’s data that makes PHP secure and reliable to be used as a server-side scripting language. So these are some of the abilities of PHP that makes it suitable to be used as server-side scripting language. You will get to know more of these abilities in further tutorials.Even if you are not convinced by the above abilities of PHP, there are some more features of PHP. PHP can run on all major operating systems like Windows, Linux, Unix, Mac OS X etc. Almost all of the major servers available today like Apache supports PHP. PHP allows using wide range of databases. And the most important factor is that it is free to use and download and anyone can download PHP from its official source : www.php.net.");create(getIdByTitle(this.context,"Basics"),"LAMP installation and important PHP configurations on Ubuntu","PHP is the Web development (Server Side Scripting Language) written and developed for web developers.It was developed by Rasmus Lerdorf in 1994, for maintaining his personal homepage. Later he added the feature to communicate with web forms and to connect with databases, named it as Personal Home Page Tools (PHP), Lerdorf wrote those using C binaries.Let us get started with installing PHP in Ubuntu. In order to test our PHP pages, a server is needed. MySQL database is also required to manage or save data.Don’t worry you don’t have to buy a web hosting for testing your Web pages, I’m going to tell you how to install your own local host web server.LAMP is basically a collection of software which you require to create the dynamic website and web applications.These tools are capable enough that you don’t require any other tool for the purpose. The interesting thing about LAMP is that all the tools in it are free and open-source.Software components of LAMPLinux is an operating system which UNIX-like and it’s free and open source for development and distribution. All of the Linux based operating systems provide Lamp packages.Apache is an HTTP Server which is used to process the HTTP request i.e. the webpages. It is one of the most popular web servers used by the developers around the globe. It is developed and maintain by the Apache Software Foundation.MySQL The Role of the RDBMS (Relational Database Management System) in LAMP bundle is played by MySQL. It helps us to save and manage data efficiently.PHP is a server-side scripting language used to interact with web server. It embeds with the HTML code.Installing all components of LAMP togetherOpen up your terminal by either going to dash and typing “terminal” or by pressing Ctrl+Alt+TRun the following Command to upgrade your index first(recommended)$ sudo apt-get updateInstall the LAMP Bundle$ sudo apt-get install lamp-server^By installing LAMP you have successfully installed Apache, MySQL, and PHPInstalling all the LAMP components separately1. Installing Apache 2 ServerTo install Apache Server use the command:-$ sudo service apache2 restartOpen your browser and check whether the service has properly installed or not.Type in the URL: –http://localhostIf you are able to see the  Default page,You have properly installed your Apache Server.Else, if you are getting message “Could not determine server”,Then you need to just copy the below command and run it in terminal.$ echo “ServerName localhost” | sudo tee /etc/apache2/conf-available/fqdn.conf&& sudo a2enconf fqdnTest your server again.2. Installing PHP 5 and MySQLTo install PHP5 and MySQL$ sudo apt-get install mysql-server libapache2-mod-auth-mysql php5-mysqlTo Check if  PHP is WorkingGo to /var/www/ folder and create a file with .php extension (test.php)Type or copy <?phpphpinfo(); ?>and save it.Now open up your browser and go to “” if you see the page same as below then php is successfully installed.3. Setting up MySQL PasswordOpen the terminal and type:-$ mysql -u root                                        // MySQL console will open up$ mysql> SET PASSWORD FOR ‘root’@’localhost’ = PASSWORD(‘yourpassword’)     //Open phpMyAdmin portalOpen your Browser and type in http://localhost/phpmyadmin.Username: root and password (blank or either “password”).Configuring PHP (php.ini file)Editing php.ini file is most efficient and immediate way to affect the PHP’s functionality. As php.ini file is read each time when ever PHP is initialized in other words whenever our server is restarted or whenever httpd is restarted.Location of php.ini: /etc/php5/apache2/php.ini1) short_open_tag = off“<? ?>” these are called short open tags. And if you want to use XML functions then you need to    set the “default value” to off.2) disable_functions=[function1, ……]PHP has the ability to disable selected functions for security reasons.3) max_execution_time =30This will make the script time out in safe mode when the time limit exceeds. In windows, script is aborted based on the memory consumption rather than time.4) error_reporting =E_ALL & ~E_NOTICEBy default the value is to report all the errorit encounters and should be remain as such.5) error_prepend_string = [“<font color = ff0000>”]This flag will print the error message in different colour then normal text in the colour which you have specified in the flag. You should set the flag value to the blink so that your eyes can easily catch thee error message pho has encounter.6) variables_order = EGPCSThis will tell you the order of execution of the variables that are Environment, GET, POST, COOKIE and SERVER. (i.e. left to right).ReferencesOfficial Ubuntu site (https://help.ubuntu.com/)PHP6 and MySQL Bible(Book by Joyce Park and Tim Converse)About the Author: Sahib Singh is currently pursuing B.E. from Chandigarh University. He has a keen interest in programming, developing websites and making android apps. You can reach him at: http://in.linkedin.com/in/sdsahib");create(getIdByTitle(this.context,"Basics"),"PHP | Coding Standards","PHP follows few rules and maintains its style of coding. As there are many coders and developers all over the world, so each of them can follow different coding styles and standards but this would have raised great confusion and difficulty for a developer to understand another developers code. It would have been hard to manage and store the code for future reference. Here is where the coding standards come into play. This not only makes a code easy to read but also makes the code very easy to refer in the future. This makes the code understandable and clearer to decipher, just like a blueprint. This also makes the code more formal and industry or software oriented. Below mentioned are few guidelines that one must follow in order to maintain the standard of PHP coding.PHP tags : One must use the PHP standard tags(), rather than the shorthand tags() to delimit the PHP code.Commenting : Use of standard C and C++ commenting style i.e., (//) – for single line and (/* */) – for multi-line, is highly encouraged and use of Python or Perl style of commenting i.e., (#), is discouraged.Line length and Indentation : It is a standard recommendation to not exceed more than 75-85 characters per line of code. One must not use tabs for indentation instead use 4 spaces as it is the standard indenting method in most of the programming languages.Structuring the control flow statements: The control flow or conditional statements must be written in such a way so that it could be differentiated from function call statements. While writing if, for, while, switch and other control flow statements there must be one space between the keyword and the opening parenthesis.Example:<?php$n = 5;if ($n > 0){    echo \"Positive\";}elseif ($n < 0){    echo \"Negative\";}else{    echo \"Zero\";}?>Output:  PositiveFunction Calls : While writing a function call statement, there must be no space between the function name and the opening paranthesis. Example:<?phpecho testFunc(5, 6);function testFunc($num1, $num2) {   $val = $num1 + $num2;   return $val;}?>Output:  11Naming Variables : Here are few conventions that one must follow in order to name the variables:Use of lower case letters to name the variables.Use of ‘_’ to separate the words in a variable.Static variable names may be started with a letter ‘s’.Global variable names must start a with letter ‘g’.Use of upper-case letters to define global constants with ‘_’ as a separator.Block allignment : Every block of code and curly braces must be alligned.Short Functions : All functions and methods must limit themselves to a single page and must not be lengthy.Note: The above rules are provided just to make the code easily understandable and to manage the code easily. There will not be any specific error in case of violation of the rules mentioned above. But it is highly recommended to follow the above convention to improve the overall quality of code from a developer’s perspective.");create(getIdByTitle(this.context,"Basics"),"PHP | Basic Syntax","PHP or Hypertext Preprocessor is a widely used open-source general purpose scripting language and can be embedded with HTML. PHP files are saved with “.php” extension. PHP scripts can be written anywhere in the document within PHP tags along with normal HTML.PHP Tags or Escaping To PHPThe mechanism of separating a normal HTML from PHP code is called the mechanism of Escaping To PHP. There are various ways in which this can be done. Few methods are already set by default but in order to use few others like Short-open or ASP-style tags we need to change the configuration of php.ini file. These tags are also used for embedding PHP within HTML. There are 4 such tags available for this purpose:-Canonical PHP Tags:The script starts with <?php and ends with ?> . These tags are also called ‘Canonical PHP tags’. Every PHP command ends with a semi-colon (;). Let’s look at the hello world program in PHP:<?php# Here echo command is used to printecho \"Hello, world!\";?>Output:  Hello, world!SGML or Short HTML Tags: These are the shortest option to initialize a PHP code. The script starts with <? and ends with ?>. This will only work by setting the short_open_tag setting in php.ini file to ‘on’.Example:<?# Here echo command will only work if# setting is done as said beforeecho \"Hello, world!\";?>HTML Script Tags: These are implemented using script tags. This syntax is removed in PHP 7.0.0. so its no more used.Example:<script language=\"php\">echo \"hello world!\";</script>ASP Style Tags: To use this we need to set the configuration of php.ini file. These are used by Active Server Pages to describe code blocks. These starts with <% and ends with %>.Example:<%# Can only be written if setting is turned on# to allow %echo \"hello world\";%>Comments in PHPA comment is something which is ignored and not read or executed by PHP engine or the language as part of a program and is written to make the code more readable and understandable. These are used to help other users and developers to describe the code and what it is trying to do. It can also be used in documenting a set of code or part of a program. You must have noticed this in above sample programs.PHP supports two types of comment:Single Line Comment: As the name suggests these are single line or short relevant explanations that one can add in there code. To add this, we need to begin the line with (//) or (#).Example:<?php// This is a single line comment// These cannot be extended to more linesecho \"hello world!!!\";# This is also a single line comment?>Output:  hello world!!!Multi-line or Multiple line Comment: These are used to accomodate multiple lines with a single tag and can be extended to many lines as required by the user. To add this, we need to begin and end the line with (/*…*/)<?php/* This is a multi line comment    In PHP variables are written    by adding a $ sign at the beginning.*/$geek = \"hello world!\";echo $geek;?>Output:  hello world!Case Sensitivity in PHPPHP is insensitive of whitespace. This includes all types of spaces that are invisible on the screen including tabs, spaces, and carriage return. Even one space is equal to any numbers of spaces or carriage return. This means that PHP will ignore all the spaces or tabs in a single row or carriage return in multiple rows. Unless a semi-colon is encountered, PHP treats multiple lines as a single command.Example:<?php// PHP code illustrate the whitespace insensitivity$var1         =     15;$var2 =30;$sum = $var1+$var2;// \"\\n\" for new lineecho $sum, \"\\n\";$sum1 = $var1 + $var2;echo $sum1;?>Output:  45  45Here both of them show same results without any errors.PHP is case-sensitive. All the keywords, functions and class names in PHP (while, if, echo etc) are NOT case-sensitive except variables. Only variables with different cases are treated differently. Let’s look at this example:<?php// Here we can see that all echo// statements are executed in the same manner$variable = 25;echo $variable;ECHO $variable;EcHo $variable;// but this line will show RUNTIME ERROR as// \"Undefined Variable\"echo $VARIABLE?>Output:  25  25  25Blocks in PHPIn PHP, multiple statements can be executed simultaneously (under a single condition or loop) by using curly-braces ({}). This forms a block of statements which gets executed simultaneously.<?php$var = 50;if ($var>0){    echo (\"Positive as \\n\");    echo (\"greater than 0\");}?>Output:  Positive as  greater than 0");create(getIdByTitle(this.context,"Basics"),"PHP | echo and print","We have seen echo statement quite requently in PHP codes of previous article. It is the most basic way for displaying output in PHP.However, there are two basic ways to get output in PHP:-echoprintPHP echo statementIn PHP ‘echo’ statement is a language construct and not a function, so it can be used without paranthesis. But we are allowed to use paranthesis with echo statement when we are using more than one arguments with it. The end of echo statement is identified by the semi-colon (‘;’).We can use ‘echo’ to output strings or variables. Below are some of the usage of echo statement in PHP:Displaying Strings: We can simply use the keyword echo followed by the string to be displayed withing quotes. Below example shows how to display strings with PHP:<?phpecho \"Hello,This is a display string example!\";?>Output:  Hello,This is a display string example!Displaying Strings as multiple arguments: We can pass multiple string arguments to the echo statement instead of single string argument, separating them by comma (‘,’) operator. For example, if we have two strings say “Hello” and “World” then we can pass them as (“Hello”,”World”). Below example shows how to do this:<?phpecho \"Multiple \",\"argument \",\"string!\";?>Output:  Multiple argument string!Displaying Variables: Displaying variables with echo statement is also as easy as displaying normal strings. Below example shows different ways to display variables with the help of PHP echo statement:-<?php//defining the variables$text = \"Hello, World!\";$num1 = 10;$num2 = 20;//echoing the variablesecho $text.\"\\n\";echo $num1.\"+\".$num2.\"=\";echo $num1 + $num2;?>Output:  Hello, World!  10+20=30The (.) operator in the above code can be used to concatenate two strings in PHP and the “\\n” is used for a new line and is also known as line-break. We will learn about these in further articles.PHP print statementThe PHP print statement is similar to the echo statement and can be used alteranative to echo at many times.It is also language construct and so we may not use parenthesis : print or print(). The main difference between the print and echo statement is that print statement can have only one agrument at a time and thus can print a single string. Also, print statement always returns a value 1.Like echo, print statement can also be used to print strings and variables. Below are some examples of using print statement in PHP:Displaying String of Text: We can display strings with print statement in the same way we did with echo statements. The only difference is we can not display multiple strings separated by comma(,) with a single print statement. Below example shows how to display strings with the help of PHP print statement:-<?phpprint \"Hello, world!\";?>Output:  Hello, world!Displaying Variables: Displaying variables with print statement is also same as that of echo statement. The example below shows how to display variables with the help of PHP print statement:-<?php//defining the variables$text = \"Hello, World!\";$num1 = 10;$num2 = 20;//echoing the variablesprint $text.\"\\n\";print $num1.\"+\".$num2.\"=\";print $num1 + $num2;?>Output:  Hello, World!  10+20=30Comparison between Echo and Print in PHP:");create(getIdByTitle(this.context,"Basics"),"PHP | Variables","VariablesVariables in a program are used to store some values or data that can be used later in a program. PHP has its own way of declaring and storing variables.There are few rules, that needs to be followed and facts that need to be kept in mind while dealing with variables in PHP:Any variables declared in PHP must begin with a dollar sign ($), followed by the variable name.A variable can have long descriptive names (like $factorial, $even_nos) or short names (like $n or $f or $x)A variable name can only contain alphanumeric characters and underscores (i.e., ‘a-z’, ‘A-Z’, ‘0-9 and ‘_’) in their name.Assignment of variables are done with assignment operator, “equal to (=)”. The variable names are on the left of equal and the expression or values are to the right of the assignment operator ‘=’.One must keep in mind that variable names in PHP names must start with a letter or underscore and no numbers.PHP is a loosely typed language and we do not require to declare the data types of variables, rather PHP assumes it automatically by analyzing the values. Same happens while conversion.PHP variables are case-sensitive, i.e., $sum and $SUM are treated differently.Example:<?php// These are all valid declarations$val = 5;$val2 = 2;$x_Y = \"gfg\";$_X = \"GeeksforGeeks\";// This is an invalid declaration as it// begins with a number$10_ val = 56;// This is also invalid as it contains// special character other than _$f.d = \"num\";?>Variable ScopesScope of a variable is defined as its extent in program within which it can be accessed, i.e. the scope of a variable is the portion of the program with in which it is visible or can be accessed.Depending on the scopes, PHP has three variable scopes:Local variables: The variables declared within a function are called local variables to that function and has its scope only in that particular function. In simple words it cannot be accessed outside that function. Any declaration of a variable outside the function with same name as that of the one within the function is a complete different variable. We will learn about functions in details in later articles. For now consider a function as a block of statements.Example:<?php$num = 60;function local_var(){    // This $num is local to this function    // the variable $num outside this function    // is a completely different variable    $num = 50;    echo \"local num = $num \\n\";}local_var();// $num outside function local_var() is a// completely different Variable than that of// inside local_var()echo \"Variable num outside local_var() is $num \\n\";?>Output:  local num = 50   Variable num outside local_var() is 60Global variables: The variables declared outside a function are called global variables. These variables can be accessed directly outside a function. To get access within a function we need to use the “global” keyword before the variable to refer to the global variable.Example:<?php$num = 20;// function to demonstrate use of global variablefunction global_var(){    // we have to use global keyword before    // the variable $num to access within    // the function    global $num;    echo \"Variable num inside function : $num \\n\";}global_var();echo \"Variable num outside function : $num \\n\";?>Output:  Variable num inside function : 20   Variable num outside function : 20Static variable: It is the characteristic of PHP to delete the variable, ones it completes its execution and the memory is freed. But sometimes we need to store the variables even after the completion of function execution. To do this we use static keyword and the variables are then called as static variables.Example:<?php// function to demonstrate static variablesfunction static_var(){    // static variable    static $num = 5;    $sum = 2;    $sum++;    $num++;    echo $num, \"\\n\";    echo $sum, \"\\n\";}// first function callstatic_var();// second function callstatic_var();?>Output:  6  3  7  3You must have noticed that $num regularly increments even after the first function call but $sum doesn’t. This is because $sum is not static and it’s memory is freed after execution of first function call.");create(getIdByTitle(this.context,"Basics"),"PHP | Data Types","Data Types defines the type of data a variable can store. PHP allows eight different types of data types. All of them are discussed below. The first five are called simple data types and the last three are compound data types:Integer : Integers hold only whole numbers including positive and negative numbers, i.e., numbers without fractional part or decimal point. They can be decimal (base 10), octal (base 8) or hexadecimal (base 16). The default base is decimal (base 10). The octal integers can be declared with leading 0 and the hexadecimal can be declared with leading 0x. The range of integers must lie between -2^31 to 2^31.Example:<?php// decimal base integers$deci1 = 50;$deci2 = 654;// octal base integers$octal1 = 07;// hexadecimal base integers$octal = 0x45;$sum = $deci1 + $deci2;echo $sum;?>Output:  704Double: Can hold numbers containing fractional or decimal part including positive and negative numbers. By default, the variables add a minimum number of decimal places.Example:<?php$val1 = 50.85;$val2 = 654.26;$sum = $val1 + $val2;echo $sum;?>Output:  705.11String : Hold letters or any alphabets, even numbers are included. These are written within double quotes during declaration. The strings can also be written within single quotes but it will be treated differently while printing variables. To clarify this look at the example below.Example:<?php$name = \"Krishna\";echo \"The name of the Geek is $name \\n\";echo \'The name of the geek is $name\';?>Output:  The name of the Geek is Krishna   The name of the geek is $nameNULL: These are special types of variables that can hold only one value i.e., NULL. We follow the convention of writing it in capital form, but its case sensitive.Example:<?php$nm = NULL;echo $nm;    // This will give no output?>Boolean: Hold only two values, either TRUE or FALSE. Successful events will return true and unsuccessful events return false. NULL type values are also treated as false in Boolean. Apart from NULL, 0 is also consider as false in boolean. If a string is empty then it is also considered as false in boolean data type.Example:<?phpif(TRUE)    echo \"This condition is TRUE\";if(FALSE)    echo \"This condition is not TRUE\";?>Output:  This condition is TRUEArrays: Array is a compound data-type which can store multiple values of same data type. Below is an example of array of integers.<?php$intArray = array( 10, 20 , 30);echo \"First Element: $intArray[0]\\n\";echo \"Second Element: $intArray[1]\\n\";echo \"Third Element: $intArray[2]\\n\";?>Output:  First Element: 10  Second Element: 20  Third Element: 30We will discuss all about arrays in details in further articles.Objects: Objects are defined as instances of user defined classes that can hold both values and functions. This is an advanced topic and will be discussed in details in further articles.Resources: Resources in PHP are not an exact data type. These are basically used to store references to some function call or to external PHP resources. For example, consider a database call. This is an external resource.We will discuss about resources in details in further articles.");create(getIdByTitle(this.context,"Basics"),"PHP | Superglobals","We already have discussed about variables and global variables in PHP in the post PHP | Variables and Data Types. In this artile we will learn about superglobals in PHP.These are specially-defined array variables in PHP that make it easy for you to get information about a request or its context. The superglobals are available throughout your script. These variables can be accessed from any function, class or any file without doing any special task such as declaring any global variable etc. They are mainly used to store and get information from one page to another etc in an application.Below is the list of superglobal variables available in PHP:$GLOBALS$_SERVER$_REQUEST$_GET$_POST$_SESSION$_COOKIE$_FILES$_ENVLet us now learn about some of these superglobals in details:$GLOBALS : It is a superglobal variable which is used to access global variables from anywhere in the PHP script. PHP stores all the global variables in array $GLOBALS[] where index holds the global variable name, which can be accessed.Below program illustrates the use of $GLOBALS in PHP:<?php$x = 300;$y = 200;function multiplication(){    $GLOBALS[\'z\'] = $GLOBALS[\'x\'] * $GLOBALS[\'y\'];}multiplication();echo $z;?>Output :  60000In the above code two global variables are declared $x and $y which are assigned some value to them. Then a function multiplication() is defined to multiply the values of $x and $y and store in another variable $z defined in the GLOBAL array.$_SERVER : It is a PHP super global variable that stores the information about headers, paths and script locations. Some of these elements are used to get the information from the superglobal variable $_SERVER.Below program illustrates the use of $_SERVER in PHP:<?phpecho $_SERVER[\'PHP_SELF\'];echo \"<br>\";echo $_SERVER[\'SERVER_NAME\'];echo \"<br>\";echo $_SERVER[\'HTTP_HOST\'];echo \"<br>\";echo $_SERVER[\'HTTP_USER_AGENT\'];echo \"<br>\";echo $_SERVER[\'SCRIPT_NAME\'];echo \"<br>\"?>Output :In the above code we used the $_SERVER elements to get some information. We get the current file name which is worked on using ‘PHP_SELF’ element. Then we get server name used currently using ‘SERVER_NAME’ element. And then we get the host name through ‘HTTP_HOST’.$_REQUEST : It is a superglobal variable which is used to collect the data after submitting a HTML form. $_REQUEST is not used mostly, because $_POST and $_GET perform the same task and are widely used.Below is the HTML and PHP code to explain how $_REQUEST works:<!DOCTYPE html><html><body><form method=\"post\" action=\"<?php echo $_SERVER[\'PHP_SELF\'];?>\"> NAME: <input type=\"text\" name=\"fname\"> <button type=\"submit\">SUBMIT</button></form><?phpif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {    $name = htmlspecialchars($_REQUEST[\'fname\']);    if(empty($name)){        echo \"Name is empty\";    } else {        echo $name;    }}?></body></html>Output :In the above code we have created a form that takes the name as input from the user and prints it’s name on clicking of submit button. We transport the data accepted in the form to the same page using $_SERVER[‘PHP_SELF’] element as specified in the action attribute, because we manipulate the data in the same page using the PHP code. The data is retrieved using the $_REQUEST superglobal array variable$_POST : It is a super global variable used to collect data from the HTML form after submitting it. When form uses method post to transfer data, the data is not visible in the query string, because of which security levels are maintained in this method.Below is the HTML and PHP code to explain how $_POST works:<!DOCTYPE html><html><body><form method=\"post\" action=\"<?php echo $_SERVER[\'PHP_SELF\'];?>\"> <label for=\"name\">Please enter your name: </label> <input name=\"name\" type=\"text\"><br> <label for=\"age\">Please enter your age: </label> <input name=\"age\" type=\"text\"><br> <input type=\"submit\" value=\"Submit\"> <button type=\"submit\">SUBMIT</button></form><?php$nm=$_POST[\'name\'];$age=$_POST[\'age\'];echo \"<strong>\".$nm.\" is $age years old.</strong>\";?></body></html>Output :In the above code we have created a form that takes name and age of the user and accesses the data using $_POST super global variable when they submit the data. Since each superglobal variable is an array it can store more than one values. Hence we retrieved name and age from the $_POST variable and stored them in $nm and $age variables.$_GET : $_GET is a super global variable used to collect data from the HTML form after submitting it. When form uses method get to transfer data, the data is visible in the query string, therefore the values are not hidden. $_GET super global array variable stores the values that come in the URL.Below is the HTML and PHP code to explain how $_GET works:<!DOCTYPE html><html><head><title></title></head><body bgcolor=\"cyan\">    <?php        $name = $_GET[\'name\'];        $city = $_GET[\'city\'];        echo \"<h1>This is \".$name.\" of \".$city.\"</h1><br>\";    ?>    <img src = \"2.jpg\" alt = \"nanilake\" height = \"400\" width=\"500\" /></body></html>We are actually seeing half of the logic just now. In the above code we have created a hyperlink image of Nainital Lake which will take us to picture.php page and with it will also take the paramerters name=”Nainilake” and city=”Nainital”.That is when we click on the small image of Nainital Lake we will be taken to the next page picture.php along with the parameters. As the default method is get, these parameters will be passed to the next page using get method and they will be visible in the address bar. When we want to pass values to an address they are attached to the address using a question mark (?).Here the parameter name=Nainilake is attached to the address. If we want to add more values, we can add them using ampersand (&) after every key-value pair similarly as city=Nainital is added using ampersand after the name parameter. Now after clicking on the image of Nainital Lake we want the picture.php page to be displayed with the value of parameter displayed along with it.");create(getIdByTitle(this.context,"Basics"),"PHP | Constants","Constants are either identifiers or simple names that can be assigned any fixed values. They are similar to a variable except that they can never be changed. They remain constant throughout the program and cannot be altered during execution. Once a constant is defined, it cannot be undefined or redefined. Constant identifiers should be written in upper case following the convention. By default, a constant is always case-sensitive, unless mentioned. A constant name must never start with a number. It always starts with a letter or underscores, followed by letter, numbers or underscore. It should not contain any special characters except underscore, as mentioned.Creating a PHP ConstantThe define() function in PHP is used to create a constant as shown below:Syntax:define(name, value, case_insensitive)The parameters are as follows:name: The name of the constant.value: The value to be stored in the constant.case_insensitive: Defines whether a constant is case insensitive. By default this value is False, i.e., case sensitive.Example:<?php// This creates a case-sensitive constantdefine(\"WELCOME\", \"GeeksforGeeks\");echo WELCOME, \"\\n\";// This creates a case-insensitive constantdefine(\"HELLO\", \"GeeksforGeeks\", true);echo hello;?>Output:  GeeksforGeeks  GeeksforGeeksconstant() functionInstead of using the echo statement ,there is an another way to print constants using the constant() function.Syntaxconstant(name)Example:<?php   define(\"WELCOME\", \"GeeksforGeeks!!!\");   echo WELCOME, \"\\n\";   echo constant(\"WELCOME\");   // same as previous?>Output:  GeeksforGeeks!!!  GeeksforGeeks!!!Constants are Global: By default, constants are automatically global, and can be used throughout the script, accessible inside and outside of any function.Example:<?phpdefine(\"WELCOME\", \"GeeksforGeeks\");function testGlobal() {    echo WELCOME;}testGlobal();?>  GeeksforGeeksConstants vs VariablesA constant, once defined can never be undefined but a variable can be easily undefined.There is no need to use dollar sign($) before constants during assignment but while declaring variables we use a dollar sign.A constant can only be defined using a define() function and not by any simple assignment.Constants dont need to follow any variable scoping rules and can be defined anywhere.");create(getIdByTitle(this.context,"Basics"),"PHP | Defining Constants","In a production level code it is very important to keep information as either variables or constants rather than using them explicitly. A PHP constant is nothing but an identifier for a simple value that tends not to change over time(such as the domain name of a website eg. www.geeksforgeeks.org). It is ideal to keep all the constants in a single PHP script so the maintenance is made easier. A valid constant name must start with an alphabet or underscore and requires no ‘$’. It is to be noted, constants are irrespective of their scope i.e constants are automatically of global scope.In order to create a constant in PHP, we must use the define() method.Syntax:  bool define(identifier, value, case-insensitivity)Parameters: The function has two required parameters and one optional parameter.identifier: Specifies the name to be assigned to the constant.value: Specifies the value to be assigned to the constant.case-insensitivity(Optional): Specifies whether the constant identifier should be case-insensitive. By default it is set to false i.e. case-sensitive.Return Type: This method returns TRUE on success and FALSE on Failure.Below are some examples to illustrate working of define() function:Below program illustrates defining case-insensitive constants:<?php  // case-insensitive costants  define(\"Constant\",\"Hello Geeks!\",TRUE);  echo constant;  echo Constant;?>Output :  Hello Geeks!  // Case Insensitive thus value is echoed  Hello Geeks!Below program illustrates defining case-sensitive constants:<?php  // case-sensitive constant  define(\"Constant\",\"Hello Geeks!\");  echo constant;  echo Constant;?>Output :  constant   // Case Sensitive thus value not echoed  Hello Geeks!The PHP compiler will also throw a warning for above program along with the output as: “PHP Notice: Use of undefined constant constant- assumed ‘constant’ in line 5”.Summary:Constants are identifiers that can be assigned values(string, boolean, array, integer, float or NULL) which generally don’t change overtime.Constants are irrespective of scope and always populate the global scope.define() method is used to define constants.defined() method is used to check if a constant is defined.constant() method is used to return the value of a constant and NULL if not the constant is not defined.");create(getIdByTitle(this.context,"Basics"),"PHP | Decision Making","PHP allows us to perform actions based on some type of conditions that may be logical or comparative. Based on the result of these conditions i.e., either TRUE or FALSE, an action would be performed as asked by the user. It’s just like a two- way path. If you want something then go this way or else turn that way. To use this feature, PHP provides us with four conditional statements:if statementif…else statementif…elseif…else statementswitch statementLet us now look at each one of these in details:if Statement: This statement allows us to set a condition. On being TRUE, the following block of code enclosed within the if clause will be executed.Syntax :  if (condition){      // if TRUE then execute this code  }Example:<?php$x = 12;if ($x > 0) {    echo \"The number is positive\";}?>Output:  The number is positive:if…else Statement: We understood that if a condition will hold i.e., TRUE, then the block of code within if will be executed. But what if the condition is not TRUE and we want to perform an action? This is where else comes into play. If a condition is TRUE then if block gets executed, otherwise else block gets executed.Syntax:  if (condition) {      // if TRUE then execute this code  }  else{      // if FALSE then execute this code  }Example:<?php$x = -12;if ($x > 0) {    echo \"The number is positive\";}else{    echo \"The number is negative\";}?>Output:  The number is negative:if…elseif…else Statement: This allows us to use multiple if…else statments. We use this when there are multiple conditions of TRUE cases.Syntax:  if (condition) {      // if TRUE then execute this code  }  elseif {      // if TRUE then execute this code  }  elseif {      // if TRUE then execute this code  }  else {      // if FALSE then execute this code  }Example:<?php$x = \"August\";if ($x == \"January\") {    echo \"Happy Republic Day\";}elseif ($x == \"August\") {    echo \"Happy Independence Day!!!\";}else{    echo \"Nothing to show\";}?>Output:  Happy Independence Day!!!:switch Statement: The “switch” performs in various cases i.e., it has various cases to which it matches the condition and appropriately executes a particular case block. It first evaluates an expression and then compares with the values of each case. If a case matches then the same case is executed. To use switch, we need to get familiar with two different keywords namely, break and default.The break statement is used to stop the automatic control flow into the next cases and exit from the switch case.The default statement contains the code that would execute if none of the cases match.Syntax:  switch(n) {      case statement1:          code to be executed if n==statement1;          break;      case statement2:          code to be executed if n==statement2;          break;      case statement3:          code to be executed if n==statement3;          break;      case statement4:          code to be executed if n==statement4;          break;      ......      default:          code to be executed if n != any case;Example:<?php$n = \"February\";switch($n) {    case \"January\":        echo \"Its January\";        break;    case \"February\":        echo \"Its February\";        break;    case \"March\":        echo \"Its March\";        break;    case \"April\":        echo \"Its April\";        break;    case \"May\":        echo \"Its May\";        break;    case \"June\":        echo \"Its June\";        break;    case \"July\":        echo \"Its July\";        break;    case \"August\":        echo \"Its August\";        break;    case \"September\":        echo \"Its September\";        break;    case \"October\":        echo \"Its October\";        break;    case \"November\":        echo \"Its November\";        break;    case \"December\":        echo \"Its December\";        break;    default:        echo \"Doesn\'t exist\";}?>Output:  Its February:Ternary OperatorsIn addition to all this conditional statements, PHP provides a shorthand way of writing if…else, called Ternary Operators. The statement uses a question mark (?) and a colon (:) and takes three operands: a condition to check, a result for TRUE and a result for FALSE.Syntax:(condition) ? if TRUE execute this : otherwise execute this;Example:<?php$x = -12;if ($x > 0) {    echo \"The number is positive \\n\";}else {    echo \"The number is negative \\n\";}// This whole lot can be written in a// single line using ternary operatorecho ($x > 0) ? \'The number is positive\' :                \'The number is negative\';?>Output:  The number is negative  The number is negative");create(getIdByTitle(this.context,"Basics"),"PHP | Loops","Like any other language, loop in PHP is used to execute a statement or a block of statements, multiple times until and unless a specific condition is met. This helps the user to save both time and effort of writing the same code multiple times.PHP supports four types of looping techniques;for loopwhile loopdo-while loopforeach loopLet us now learn about each of the above mentioned loops in details:for loop: This type of loops is used when the user knows in advance, how many times the block needs to execute. That is, the number of iterations is known beforehand. These type of loops are also known as entry-controlled loops. There are three main parameters to the code, namely the initialization, the test condition and the counter.Syntax:  for (initialization expression; test condition; update expression) {      // code to be executed  }In for loop, a loop variable is used to control the loop. First initialize this loop variable to some value, then check whether this variable is less than or greater than counter value. If statement is true, then loop body is executed and loop variable gets updated . Steps are repeated till exit condition comes.Initialization Expression: In this expression we have to initialize the loop counter to some value. for example: $num = 1;Test Expression: In this expression we have to test the condition. If the condition evaluates to true then we will execute the body of loop and go to update expression otherwise we will exit from the for loop. For example: $num <= 10;Update Expression: After executing loop body this expression increments/decrements the loop variable by some value. for example: $num += 2;Example:<?php// code to illustrate for loopfor ($num = 1; $num <= 10; $num += 2) {    echo \"$num \\n\";}?>Output:  1  3  5  7  9Flow Diagram:while loop: The while loop is also an entry control loop like for loops i.e., it first checks the condition at the start of the loop and if its true then it enters the loop and executes the block of statements, and goes on executing it as long as the condition holds true.Syntax:  while (if the condition is true) {      // code is executed  }Example:<?php// PHP code to illustrate while loops$num = 2;while ($num < 12) {    $num += 2;    echo $num, \"\\n\";}?>Output:  4  6  8  10  12:do-while loop: This is an exit control loop which means that it first enters the loop, executes the statements, and then checks the condition. Therefore, a statement is executed at least once on using the do…while loop. After executing once, the program is executed as long as the condition holds true.Syntax:  do {        //code is executed    } while (if condition is true);Example:<?php// PHP code to illustrate do...while loops$num = 2;do {    $num += 2;    echo $num, \"\\n\";} while ($num < 12);?>Output:  4  6  8  10  12This code would show the difference between while and do…while loop.<?php// PHP code to illustrate the difference of two loops$num = 2;// In case of whilewhile ($num != 2) {    echo \"In case of while the code is skipped\";    echo $num, \"\\n\";}// In case of do...whiledo {    $num++;    echo \"The do...while code is executed atleast once \";} while($num == 2);?>Output:  The code is executed at least once:foreach loop: This loop is used to iterate over arrays. For every counter of loop, an array element is assigned and the next counter is shifted to the next element.Syntax:  foreach (array_element as value) {     //code to be executed  }Example:<?php    $arr = array (10, 20, 30, 40, 50, 60);    foreach ($arr as $val) {        echo \"$val \\n\";    }    $arr = array (\"Ram\", \"Laxman\", \"Sita\");    foreach ($arr as $val) {        echo \"$val \\n\";    }?>Output:  10   20   30   40   50   60   Ram   Laxman   Sita");create(getIdByTitle(this.context,"Basics"),"PHP | Functions","A function is a block of code written in a program to perform some specific task. We can relate functions in programs to employees in a office in real life for a better understanding of how functions work. Suppose the boss wants his employee to calculate the annual budget. So how will this process complete? The employee will take information about the statics from the boss, performs calculations and calculate the budget and shows the result to his boss. Functions works in a similar manner. They take informations as parameter, executes a block of statements or perform operations on this parameters and returns the result.PHP provides us with two major types of functions:Built-in functions : PHP provides us with huge collection of built-in library functions. These functions are already coded and stored in form of functions. To use those we just need to call them as per our requirement like, var_dump, fopen(), print_r(), gettype() and so on.User Defined Functions : Apart from the built-in functions, PHP allows us to create our own customised functions called the user-defined functions.Using this we can create our own packages of code and use it wherever necessary by simply calling it.Why should we use functions?Reusability: If we have a common code that we would like to use at various parts of a program, we can simply contain it within a function and call it whenever required. This reduces the time and effort of repetition of a single code. This can be done both within a program and also by importing the PHP file, containing the function, in some other programEasier error detection: Since, our code is divided into functions, we can easily detect in which function, the error could lie and fix them fast and easily.Easily maintained: As we have used functions in our program, so if anything or any line of code needs to be changed, we can easily change it inside the function and the change will be reflected everywhere, where the function is called. Hence, easy to maintain.Creating a FunctionWhile creating a user defined function we need to keep few things in mind:Any name ending with an open and closed parenthesis is a function.A function name always begins with the keyword function.To call a function we just need to write its name followed by the parenthesisA function name cannot start with a number. It can start with an alphabet or underscore.A function name is not case-sensitive.Syntax:  function function_name(){      executable code;  }Example:<?phpfunction funcGeek(){    echo \"This is Geeks for Geeks\";}// Calling the functionfuncGeek();?>Output:  This is Geeks for GeeksFunction Parameters or ArgumentsThe information or variable, within the function’s parenthesis, are called parameters. These are used to hold the values executable during runtime. A user is free to take in as many parameters as he wants, separated with a comma(,) operator. These parameters are used to accept inputs during runtime. While passing the values like during a function call, they are called arguments. An argument is a value passed to a function and a parameter is used to hold those arguments. In common term, both parameter and argument mean the same. We need to keep in mind that for every parameter, we need to pass its corresponding argument.Syntax:  function function_name($first_parameter, $second_parameter) {      executable code;  }Example:<?php// function along with three parametersfunction proGeek($num1, $num2, $num3){    $product = $num1 * $num2 * $num3;    echo \"The product is $product\";}// Caling the function// Passing three argumentsproGeek(2, 3, 5);?>Output:  The product is 30Setting Default Values for Function parameterPHP allows us to set default argument values for function parameters. If we do not pass any argument for a parameter with default value then PHP will use the default set value for this parameter in the function call.Example:<?php// function with default parameterfunction defGeek($str, $num=12){    echo \"$str is $num years old \\n\";}// Caling the functiondefGeek(\"Ram\", 15);// In this call, the default value 12// will be considereddefGeek(\"Adam\");?>Output:  Ram is 15 years old   Adam is 12 years oldIn the above example, the parameter $num has a default value 12, if we do not pass any value for this parameter in a function call then this default value 12 will be considered. Also the parameter $str has no default value , so it is compulsory.Returning Values from FunctionsFunctions can also return values to the part of program from where it is called. The return keyword is used to return value back to the part of program, from where it was called. The returning value may be of any type including the arrays and objects. The return statement also marks the end of the function and stops the execution after that and returns the value.Example:<?php// function along with three parametersfunction proGeek($num1, $num2, $num3){    $product = $num1 * $num2 * $num3;    return $product; //returning the product}// storing the returned value$retValue = proGeek(2, 3, 5);echo \"The product is $retValue\";?>Output:  The product is 30Parameter passing to FunctionsPHP allows us two ways in which an argument can be passed into a function:Pass by Value: On passing arguments using pass by value, the value of the argument gets changed within a function, but the original value outside the function remains unchanged. That means a duplicate of the original value is passed as an argument.Pass by Reference: On passing arguments as pass by reference, the original value is passed. Therefore, the original value gets altered. In pass by reference we actually pass the address of the value, where it is stored using ampersand sign(&).Example:<?php// pass by valuefunction valGeek($num) {    $num += 2;    return $num;}// pass by referencefunction refGeek(&$num) {    $num += 10;    return $num;}$n = 10;valGeek($n);echo \"The original value is still $n \\n\";refGeek($n);echo \"The original value changes to $n\";?>Output:  The original value is still 10   The original value changes to 20");create(getIdByTitle(this.context,"Basics"),"PHP | Arrays","Arrays in PHP is a type of data structure that allows us to store multiple elements of similar data type under a single variable thereby saving us the effort of creating a different variable for every data. The arrays are helpful to create a list of elements of similar types, which can be accessed using their index or key. Suppose we want to store five names and print them accordingly. This can be easily done by the use of five different string variables. But if instead of five, the number rises to hundred, then it would be really difficult for the user or developer to create so much different variables. Here array comes into play and helps us to store every element within a single variable and also allows easy access using an index or a key. An array is created using an array() function in PHP.There are basically three types of arrays in PHP:Indexed or Numeric Arrays: An array with a numeric index where values are stored linearly.Associative Arrays: An array with a string index where instead of linear storage, each value can be assigned a specific key.Multidimensional Arrays: An array which contains single or multiple array within it and can be accessed via multiple indices.Indexed or Numeric ArraysThese type of arrays can be used to store any type of elements, but an index is always a number. By default, the index starts at zero. These arrays can be created in two different ways as shown in the following example:<?php// One way to create an indexed array$name_one = array(\"Zack\", \"Anthony\", \"Ram\", \"Salim\", \"Raghav\");// Accessing the elements directlyecho \"Accessing the 1st array elements directly:\\n\";echo $name_one[2], \"\\n\";echo $name_one[0], \"\\n\";echo $name_one[4], \"\\n\";// Second way to create an indexed array$name_two[0] = \"ZACK\";$name_two[1] = \"ANTHONY\";$name_two[2] = \"RAM\";$name_two[3] = \"SALIM\";$name_two[4] = \"RAGHAV\";// Accessing the elements directlyecho \"Accessing the 2nd array elements directly:\\n\";echo $name_two[2], \"\\n\";echo $name_two[0], \"\\n\";echo $name_two[4], \"\\n\";?>Output:  Accessing the 1st array elements directly:  Ram  Zack  Raghav  Accessing the 2nd array elements directly:  RAM  ZACK  RAGHAVTraversing: We can traverse an indexed array using loops in PHP. We can loop through the indexed array in two ways. First by using for loop and secondly by using foreach. You can refer to PHP | Loops for the syntax and basic use.Example:<?php// Creating an indexed array$name_one = array(\"Zack\", \"Anthony\", \"Ram\", \"Salim\", \"Raghav\");// One way of Looping through an array usign foreachecho \"Looping using foreach: \\n\";foreach ($name_one as $val){    echo $val. \"\\n\";}// count() function is used to count// the number of elements in an array$round = count($name_one);echo \"\\nThe number of elements are $round \\n\";// Another way to loop through the array using forecho \"Looping using for: \\n\";for($n = 0; $n < $round; $n++){    echo $name_one[$n], \"\\n\";}?>Output:  Looping using foreach:   Zack  Anthony  Ram  Salim  Raghav    The number of elements are 5   Looping using for:   ZACK  ANTHONY  RAM  SALIM  RAGHAVAssociative ArraysThese type of arrays are similar to the indexed arrays but instead of linear storage, every value can be assigned with a user-defined key of string type.Example:<?php// One way to create an associative array$name_one = array(\"Zack\"=>\"Zara\", \"Anthony\"=>\"Any\",                  \"Ram\"=>\"Rani\", \"Salim\"=>\"Sara\",                  \"Raghav\"=>\"Ravina\");// Second way to create an associative array$name_two[\"zack\"] = \"zara\";$name_two[\"anthony\"] = \"any\";$name_two[\"ram\"] = \"rani\";$name_two[\"salim\"] = \"sara\";$name_two[\"raghav\"] = \"ravina\";// Accessing the elements directlyecho \"Accessing the elements directly:\\n\";echo $name_two[\"zack\"], \"\\n\";echo $name_two[\"salim\"], \"\\n\";echo $name_two[\"anthony\"], \"\\n\";echo $name_one[\"Ram\"], \"\\n\";echo $name_one[\"Raghav\"], \"\\n\";?>Output:  Accessing the elements directly:  zara  sara  any  Rani  RavinaTraversing Associative Arrays: We can traverse associative arrays in a similar way did in numeric arrays using loops. We can loop through the associative array in two ways. First by using for loop and secondly by using foreach. You can refer to PHP | Loops for the syntax and basic use.Example:<?php// Creating an associative array$name_one = array(\"Zack\"=>\"Zara\", \"Anthony\"=>\"Any\",                    \"Ram\"=>\"Rani\", \"Salim\"=>\"Sara\",                    \"Raghav\"=>\"Ravina\");// Looping through an array using foreachecho \"Looping using foreach: \\n\";foreach ($name_one as $val => $val_value){    echo \"Husband is \".$val.\" and Wife is \".$val_value.\"\\n\";}// Looping through an array using forecho \"\\nLooping using for: \\n\";$keys = array_keys($name_two);$round = count($name_two);for($i=0; $i < $round; ++$i) {    echo $keys[$i] . \' \' . $name_two[$keys[$i]] . \"\\n\";}?>Output:  Looping using foreach:   Husband is Zack and Wife is Zara  Husband is Anthony and Wife is Any  Husband is Ram and Wife is Rani  Husband is Salim and Wife is Sara  Husband is Raghav and Wife is Ravina    Looping using for:   zack zara  anthony any  ram rani  salim sara  raghav ravinaMultidimensional ArraysMulti-dimensional arrays are such arrays which stores an another array at each index instead of single element. In other words, we can define multi-dimensional arrays as array of arrays. As the name suggests, every element in this array can be an array and they can also hold other sub-arrays within. Arrays or sub-arrays in multidimensional arrays can be accessed using multiple dimensions.Example:<?php// Defining a multidimensional array$favorites = array(    array(        \"name\" => \"Dave Punk\",        \"mob\" => \"5689741523\",        \"email\" => \"davepunk@gmail.com\",    ),    array(        \"name\" => \"Monty Smith\",        \"mob\" => \"2584369721\",        \"email\" => \"montysmith@gmail.com\",    ),    array(        \"name\" => \"John Flinch\",        \"mob\" => \"9875147536\",        \"email\" => \"johnflinch@gmail.com\",    ));// Accessing elementsecho \"Dave Punk email-id is: \" . $favorites[0][\"email\"], \"\\n\";echo \"John Flinch mobile number is: \" . $favorites[1][\"mob\"];?>Traversing Multidimensional Arrays: We can traverse through the multidimensional array using for and foreach loop in a nested way. That is, one for loop for the outer array and one for loop for the inner array.Example:<?php// Defining a multidimensional array$favorites = array(    \"Dave Punk\" => array(        \"mob\" => \"5689741523\",        \"email\" => \"davepunk@gmail.com\",    ),    \"Dave Punk\" => array(        \"mob\" => \"2584369721\",        \"email\" => \"montysmith@gmail.com\",    ),    \"John Flinch\" => array(        \"mob\" => \"9875147536\",        \"email\" => \"johnflinch@gmail.com\",    ));// Using for and foreach in nested form$keys = array_keys($favorites);for($i = 0; $i < count($favorites); $i++) {    echo $keys[$i] . \"\\n\";    foreach($favorites[$keys[$i]] as $key => $value) {        echo $key . \" : \" . $value . \"\\n\";    }    echo \"\\n\";}?>Output:  Dave Punk  mob : 2584369721  email : montysmith@gmail.com    John Flinch  mob : 9875147536  email : johnflinch@gmail.com");create(getIdByTitle(this.context,"Basics"),"PHP | Types of Errors","Error is the fault or mistake in a program. It can be several types. Error can occur due to wrong syntax or wrong logic. It is a type of mistakes or condition of having incorrect knowledge of the code.There are various types of errors in PHP but it contains basically four main type of errors.Parse error or Syntax Error: It is the type of error done by the programmer in the source code of the program. The syntax error is caught by the compiler. After fixing the syntax error the compiler compile the code and execute it. Parse errors can be caused dues to unclosed quotes, missing or Extra parentheses, Unclosed braces, Missing semicolon etcExample:<?php$x = \"geeks\";y = \"Computer science\";echo $x;echo $y;?>Error:  PHP Parse error:  syntax error, unexpected \'=\'   in /home/18cb2875ac563160a6120819bab084c8.php on line 3Explanation: In above program, $ sign is missing in line 3 so it gives an error message.Fatal Error: It is the type of error where PHP compiler understand the PHP code but it recognizes an undeclared function. This means that function is called without the definition of function.Example:<?phpfunction add($x, $y){    $sum = $x + $y;    echo \"sum = \" . $sum;}$x = 0;$y = 20;add($x, $y);diff($x, $y);?>Error:  PHP Fatal error:  Uncaught Error:   Call to undefined function diff()   in /home/36db1ad4634ff7deb7f7347a4ac14d3a.php:12    Stack trace:  #0 {main}    thrown in /home/36db1ad4634ff7deb7f7347a4ac14d3a.php on line 12Explanation : In line 12, function is called but the definition of function is not available. So it gives error.Warning Errors : The main reason of warning errors are including a missing file. This means that the PHP function call the missing file.Example:<?php$x = \"GeeksforGeeks\";include (\"gfg.php\");echo $x . \"Computer science portal\";?>Error:  PHP Warning:  include(gfg.php): failed to   open stream: No such file or directory in   /home/aed0ed3b35fece41022f332aba5c9b45.php on line 5  PHP Warning:  include(): Failed opening \'gfg.php\'   for inclusion (include_path=\'.:/usr/share/php\') in   /home/aed0ed3b35fece41022f332aba5c9b45.php on line 5Explanation: This program call an undefined file gfg.php which are not available. So it produces error.Notice Error: It is similar to warning error. It means that the program contains something wrong but it allows the execution of script.Example:<?php$x = \"GeeksforGeeks\";echo $x;echo $geeks;?>Error:  PHP Notice:  Undefined variable: geeks in   /home/84c47fe936e1068b69fb834508d59689.php on line 5Output:  GeeksforGeeksExplanation: This program use undeclared variable $geeks so it gives error message.PHP error constants and their description :E_ERROR : A fatal error that causes script terminationE_WARNING : Run-time warning that does not cause script terminationE_PARSE : Compile time parse error.E_NOTICE : Run time notice caused due to error in codeE_CORE_ERROR : Fatal errors that occur during PHP’s initial startup (installation)E_CORE_WARNING : Warnings that occur during PHP’s initial startupE_COMPILE_ERROR : Fatal compile-time errors indication problem with script.E_USER_ERROR : User-generated error message.E_USER_WARNING : User-generated warning message.E_USER_NOTICE : User-generated notice message.E_STRICT : Run-time notices.E_RECOVERABLE_ERROR : Catchable fatal error indicating a dangerous errorE_DEPRECATED : Run-time notices.");create(getIdByTitle(this.context,"Basics"),"PHP | Namespace","Like C++, PHP Namespaces are the way of encapsulating items so that same names can be reused without name conflicts.It can be seen as an abstract concept in many places. It allows redeclaring the same functions/classes/interfaces/constant functions in the separate namespace without getting the fatal error.A namespace is a hierarchically labeled code block holding a regular PHP code.A namespace can contain valid PHP code.Namespace affects following types of code: classes (including abstracts and traits), interfaces, functions, and constants.Namespaces are declared using the namespace keyword.A namespace must be declared the namespace at the top of the file before any other code – with one exception: the declare keyword.<?phpnamespace MyNamspaceName {    // Regular PHP code    function hello()    {        echo \'Hello I am Running from a namespace!\';    }}?>If namespace is declared globally, then declare it without any name.<?phpnamespace {    // Global space!}?>Multiple namespaces can be declared within a single PHP code.<?phpnamespace MyNamespace1 {}namespace MyNamespace2 {}namespace {}?>A namespace is used to avoid conflicting definitions and introduce more flexibility and organization in the code base. Just like directories, namespace can contain a hierarchy know as subnamespaces. PHP uses the backslash as its namespace separator.Example:<?phpnamespace MyNamespaceName;function hello()    {        echo \'Hello I am Running from a namespace!\';    }// Resolves to MyNamespaceName\\hellohello();// Explicitly resolves to MyNamespaceName\\hellonamespace\\hello();?>Aliasing in NamespacesImporting is achieved by using the ‘use’ keyword. Optionally, It can specify a custom alias with the ‘as’ keyword.Example:<?phpnamespace MyNamespaceName;require \'project/database/connection.php\';use Project\\Database\\Connection as Connection;$connection = new Connection();use Project\\Database as Database;$connection = new Database\\Connection();?>It is possible to dynamically call namespaced code, dynamic importing is not supported.<?phpnamespace OtherProject;$title = \'geeks\';// This is valid PHPrequire \'project/blog/title/\' . $title . \'.php\';// This is notuse Project\\Blog\\title\\$title;?>");create(getIdByTitle(this.context,"Basics"),"PHP | Strings","Strings can be seen as a stream of characters. For example, ‘G’ is a character and ‘GeeksforGeeks’ is a string. We have learned about basics of string data type in PHP in PHP | Data types and Variables. In this article we will discuss about strings in details. Every thing inside quotes , single (‘ ‘) and double (” “) in PHP is treated as a string.Creating StringsThere are two ways of creating strings in PHP:Single-quote strings: This type of strings does not processes special characters inside quotes.<?php// single-quote strings$site  = \'Welcome to GeeksforGeeks\';echo $site;?>Output:  Welcome to GeeksforGeeksThe above program compiles correctly. We have created a string ‘Welcome to GeeksforGeeks’ and stored it in variable and printing it using echo statement.Let us now look at the below program:<?php// single-quote strings$site  = \'GeeksforGeeks\';echo \'Welcome to $site\';?>Output:  Welcome to $siteIn the above program the echo statement prints the variable name rather than printing the contents of the variables. This is because, single-quotes strings in PHP does not processes special characters. Hence, the string is unable to identify the ‘$’ sign as start of a variable name.Double-quote strings : Unlike single-quote strings, double-quote strings in PHP is capable of processing special characters.<?php// double-quote stringsecho \"Welcome to GeeksforGeeks \\n\";$site  = \"GeeksforGeeks\";echo \"Welcome to $site\";?>Output:  Welcome to GeeksforGeeks  Welcome to GeeksforGeeksIn the above program we can see that the double-quote strings is processing the special characters according the their properties. The ‘\\n’ character is not printed and is considered as a new-line. Also instead of the variable name $site, “GeeksforGeeks” is printed.PHP treats everything inside double quotes(” “) as Strings. In this article, we will learn about the working of the various string functions and how to implement them along with some special properties of strings. Unlike other data types like integers, doubles etc. Strings do not have any fix limits or ranges. It can extend to any length as long as it is within the quotes.It has been discussed earlier that string with single and double quotes are treated differently. Strings within single quote ignores the special characters but double-quoted strings recognize the special characters and treat them differently.Example:<?php$name = \"Krishna\";echo \"The name of the geek is $name \\n\";echo \'The name of the geek is $name\';?>Output:  The name of the geek is Krishna   The name of the geek is $nameSome of the important and frequently used special characters that are used with double-quoted strings are explained below:The character beginning with a backslash(“\\”) are treated as escape sequences and are replaced with special characters. Here are few important escape sequences.“\\n” is replaced by a new line“\\t” is replaced by a tab space“\\$” is replaced by a dollar sign“\\r” is replaced by a carriage return“\\\\” is replaced by a backslash“\\”” is replaced by a double quote“\\\'” is replaced by a single quoteThe string starting with a dollar sign(“$”) are treated as variables and are replaced with the content of the variables.Built-in String functionsBuilt-in functions in PHP are some existing library functions which can be used directly in our programs making an appropriate call to them. Below are some important built-in string functions that we use in our daily and regular programs:strlen() function: This function is used to find the length of a string. This function accepts the string as argument and return the length or number of characters in the string.Example:<?phpecho strlen(\"Hello GeeksforGeeks!\");?>Output:  20strrev() function: This function is used to reverse a string. This function accepts a string as argument and returns its reversed string.Example:<?phpecho strrev(\"Hello GeeksforGeeks!\");?>Output:  !skeeGrofskeeG olleHstr_replace() function: This function takes three strings as arguments. The third argument is the original string and the first argument is replaced by the second one. In other words we can say that it replaces all occurrences of the first argument in the original string by second argument.Example:<?phpecho str_replace(\"Geeks\", \"World\", \"Hello GeeksforGeeks!\"), \"\\n\";echo str_replace(\"for\", \"World\", \"Hello GeeksforGeeks!\"), \"\\n\";?>Output:  Hello WorldforWorld!  Hello GeeksWorldGeeks!In the first example, we can see that all occurrences of the word “Geeks” is replaced by “World” in “Hello GeeksforGeeks!”.strpos() function: This function takes two string arguments and if the second string is present in the first one, it will return the starting position of the string otherwise returns FALSE. Example:<?phpecho strpos(\"Hello GeeksforGeeks!\", \"Geeks\"), \"\\n\";echo strpos(\"Hello GeeksforGeeks!\", \"for\"), \"\\n\";var_dump(strpos(\"Hello GeeksforGeeks!\", \"Peek\"));?>Output:  6  11  bool(false)We can see in the above program, in the third example the string “Peek” is not present in the first string, hence this function returns a boolean value false indicating that string is not present.trim() function: This function allows us to remove whitespaces or strings from both sides of a string. Example:<?phpecho trim(\"Hello World!\", \"Hed!\");?>Output:  llo WorlRecent articles on PHP Strings");create(getIdByTitle(this.context,"Basics"),"PHP | Objects","An Object is an individual instance of the data structure defined by a class. We define a class once and then make many objects that belong to it. Objects are also known as instances.Creating an Object:Following is an example of how to create object using new operator.  class Book {     // Members of class Book  }    // Creating three objects of book  $physics = new Books;  $maths = new Books;  $chemistry = new Books;Member Functions:After creating our objects, we can call member functions related to that object. A member function typically accesses members of current object only.Example:$physics->setTitle( \"Physics for High School\" );  $chemistry->setTitle( \"Advanced Chemistry\" );  $maths->setTitle( \"Algebra\" );    $physics->setPrice( 10 );  $chemistry->setPrice( 15 );  $maths->setPrice( 7 );The following syntax used are for the following program elaborated in the example given below:Example:<?php   class Books {      /* Member variables */      var $price;      var $title;      /* Member functions */      function setPrice($par){         $this->price = $par;      }      function getPrice(){         echo $this->price.\"<br>\";      }      function setTitle($par){         $this->title = $par;      }      function getTitle(){         echo $this->title.\"<br>\" ;      }   }   /* Creating New object using \"new\" operator */   $maths = new Books;   /* Setting title and prices for the object */   $maths->setTitle( \"Algebra\" );   $maths->setPrice( 7 );   /* Calling Member Functions */   $maths->getTitle();   $maths->getPrice();?>Constructors:A constructor is a key concept in object oriented programming in PHP. Constructor in PHP is special type of function of a class which is automatically executed as any object of that class is created or instantiated.Constructor is also called magic function because in PHP, magic methods usually start with two underscore characters.Below is the sample code for the implementation of constructors:Program for Constructors:<?phpclass GeeksforGeeks{    public $Geek_name = \"GeeksforGeeks\";    // Constructor is being implemented.    public function __construct($Geek_name)    {        $this->Geek_name = $Geek_name;    }}// now constructor is called automatically// because we have initialized the object// or class Bird.$Geek = new GeeksforGeeks(\"GeeksforGeeks\");echo $Geek->Geek_name;?>Output:GeeksforGeeks");create(getIdByTitle(this.context,"Basics"),"PHP | Classes","Like C++ and Java, PHP also supports object oriented programmingClasses are the blueprints of objects. One of the big differences between functions and classes is that a class contains both data (variables) and functions that form a package called an: ‘object’.Class is a programmer-defined data type, which includes local methods and local variables.Class is a collection of objects. Object has properties and behavior.Syntax: We define our own class by starting with the keyword ‘class’ followed by the name you want to give your new class.<?php       class person {         }  ?>Note: We enclose a class using curly braces ( { } ) … just like you do with functions.Given below are the programs to elaborate the use of class in Object Oriented Programming in PHP.The programs will illustrate the examples given in the article.Program 1:<?phpclass GeeksforGeeks{    // Constructor    public function __construct(){        echo \'The class \"\' . __CLASS__ . \'\" was initiated!<br>\';    }}// Create a new object$obj = new GeeksforGeeks;?>Output:The class \"GeeksforGeeks\" was initiated.Program 2:<?phpclass GeeksforGeeks{    // Destructor    public function __destruct(){        echo \'The class \"\' . __CLASS__ . \'\" was destroyed!\';    }}// Create a new object$obj = new GeeksforGeeks;?>Output:The class \"GeeksforGeeks\" was destroyed.");create(getIdByTitle(this.context,"Basics"),"PHP | Serializing Data","Most often we need to store a complex array in the database or in a file from PHP. Some of us might have surely searched for some built-in function to accomplish this task. Complex arrays are arrays with elements of more than one data-types or array.But, we already have a handy solution to handle this situation. We don’t have to write our own function to convert the complex array to a formatted string. There are two popular methods of serializing variables.serialize()unserialize()We can serialize any data in PHP using the serialize() function. The serialize() function accepts a single parameter which is the data we want to seralize and returns a serialized string. Below program illustrate this:<?php// a complex array$myvar = array(    \'hello\',    42,    array(1, \'two\'),    \'apple\');// convert to a string$string = serialize($myvar);// printing the serialized dataecho $string;?>Output:  a:4:{i:0;s:5:\"hello\";i:1;i:42;i:2;a:2:{i:  0;i:1;i:1;s:3:\"two\";}i:3;s:5:\"apple\";}From the above code, we have a variable with serialized data, $string . We can unserialize the value of the variable using unserialize() function to get back to the original value of the complex array, $myvar.Below program illustrate both serialize() and unserialize() functions:<?php// a complex array$myvar = array(    \'hello\',    42,    array(1, \'two\'),    \'apple\');// serialize the above data$string = serialize($myvar);// unserializing the data in $string$newvar = unserialize($string);// printing the unserialized dataprint_r($newvar);?>Output:  Array  (      [0] => hello      [1] => 42      [2] => Array          (              [0] => 1              [1] => two          )        [3] => apple  )This was the native PHP serialization method. However, since JSON has become so popular in recent years, they decided to add support for it in PHP 5.2. Now you can use the json_encode() and json_decode() functions as well for serializing and unserializing data in PHP respectively.Since the JSON format is text only, it can be easily sent to and from a server and can be used as a data format by any programming language.Lets have a look how to use json_encode() in PHP:<?php// a complex array$myvar = array(    \'hello\',    42,    array(1, \'two\'),    \'apple\');// serializing data$string = json_encode($myvar);// printing the serialized dataecho $string;?>Output:  [\"hello\",42,[1,\"two\"],\"apple\"]We can decode the data encoded in above program using the json_decode() function to get the orignal complex array. Below program illustrate this:<?php// a complex array$myvar = array(    \'hello\',    42,    array(1, \'two\'),    \'apple\');// serializing data$string = json_encode($myvar);// decoding the above encoded string$newvar = json_decode($string);// printing the decoded dataprint_r($newvar);?>Output:  Array  (      [0] => hello      [1] => 42      [2] => Array          (              [0] => 1              [1] => two          )        [3] => apple  )Note: JSON encoding and decoding is more compact, and best of all, compatible with javascript and many other languages. However, for complex objects, some information may be lost.");create(getIdByTitle(this.context,"Basics"),"Exception Handling in PHP","An exception is unexpected program result that can be handled by the program itself. Exception Handling in PHP is almost similar to exception handling in all programming languages.PHP provides following specialized keywords for this purpose.try: It represent block of code in which exception can arise.catch: It represent block of code that will be executed when a particular exception has been thrown.throw: It is used to throw an exception. It is also used to list the exceptions that a function throws, but doesn’t handle itself.finally: It is used in place of catch block or after catch block basically it is put for cleanup activity in PHP code.Why Exception Handling in PHP ?Following are the main advantages of exception handling over error handlingSeparation of error handling code from normal code: In traditional error handling code there is always if else block to handle errors. These conditions and code to handle errors got mixed so that becomes unreadable. With try Catch block code becomes readable.Grouping of error types: In PHP both basic types and objects can be thrown as exception. It can create a hierarchy of exception objects, group exceptions in namespaces or classes, categorize them according to types.Exception handling in PHP:Following code explains the flow of normal try catch block in PHP:<?php// PHP Program to illustrate normal// try catch block codefunction demo($var) {    echo \" Before try block\";    try {        echo \"\\n Inside try block\";        // If var is zero then only if will be executed        if($var == 0)        {            // If var is zero then only exception is thrown            throw new Exception(\'Number is zero.\');            // This line will never be executed            echo \"\\n After throw (It will never be executed)\";        }    }    // Catch block will be executed only    // When Exception has been thrown by try block    catch(Exception $e) {            echo \"\\n Exception Caught\", $e->getMessage();        }        // This line will be executed whether        // Exception has been thrown or not        echo \"\\n After catch (will be always executed)\";}// Exception will not be riseddemo(5);// Exception will be rised heredemo(0);?>Output:   Before try block   Inside try block   After catch (will be always executed)   Before try block   Inside try block   Exception CaughtNumber is zero.   After catch (will be always executed)Following code explains the flow of normal try catch and finally block in PHP<?php// PHP Program to illustrate normal// try catch block codefunction demo($var) {    echo \" Before try block\";    try {        echo \"\\n Inside try block\";        // If var is zerothen only if will be executed        if($var == 0) {            // If var is zero then only exception is thrown            throw new Exception(\'Number is zero.\');            // This line will never be executed            echo \"\\n After throw it will never be executed\";        }    }    // Catch block will be executed only    // When Exception has been thrown by try block    catch(Exception $e) {        echo \"\\n Exception Caught\" . $e->getMessage();    }    finally {        echo \"\\n Here cleanup activity will be done\";    }    // This line will be executed whether    // Exception has been thrown or not    echo \"\\n After catch it will be always executed\";}// Exception will not be riseddemo(5);// Exception will be rised heredemo(0);?>Output:   Before try block   Inside try block   Here cleanup activity will be done   After catch (will be always executed)   Before try block   Inside try block   Exception CaughtNumber is zero.   Here cleanup activity will be done   After catch (will be always executed)Using Custom Exception Class<?phpclass myException extends Exception {    function get_Message() {        // Error message        $errorMsg = \'Error on line \'.$this->getLine().                    \' in \'.$this->getFile()        .$this->getMessage().\' is number zero\';        return $errorMsg;    }}function demo($a) {    try {        // Check if        if($a == 0) {            throw new myException($a);        }    }    catch (myException $e) {        // Display custom message        echo $e->get_Message();    }}// This will not generate any exceptiondemo(5);// It will cause an exceptiondemo(0);?>Output:  Error on line 20 in /home/45ae8dc582d50df2790517e912980806.php0 is number zeroSet a Top Level Exception Handler: The set_exception_handler() function set all user defined function to all uncaught exception.<?php// PHP Program to illustrate normal// try catch block code// Function for Uncaught Exceptionfunction myException($exception) {    // Details of Uncaught Exception    echo \"\\nException: \" . $exception->getMessage();}// Set Uncaught Exception handlerset_exception_handler(\'myException\');function demo($var) {    echo \" Before try block\";    try {        echo \"\\n Inside try block\";        // If var is zero then only if will be executed        if($var == 0)        {            // If var is zero then only exception is thrown            throw new Exception(\'Number is zero.\');            // This line will never be executed            echo \"\\n After throw (it will never be executed)\";        }    }    // Catch block will be executed only    // When Exception has been thrown by try block    catch(Exception $e) {        echo \"\\n Exception Caught\", $e->getMessage();    }    // This line will be executed whether    // Exception has been thrown or not    echo \"\\n After catch (will be always executed)\";    if($var < 0) {        // Uncaught Exception        throw new Exception(\'Uncaught Exception occurred\');    }}// Exception will not be riseddemo(5);// Exception will be rised heredemo(0);// Uncaught Exceptiondemo (-3);?>Output:   Before try block   Inside try block   After catch (will be always executed)   Before try block   Inside try block   Exception CaughtNumber is zero.   After catch (will be always executed)   Before try block   Inside try block   After catch (will be always executed)   Exception: Uncaught Exception occurred");create(getIdByTitle(this.context,"Basics"),"Error handling in PHP","Prerequisite: Types of ErrorPHP is used for web development. Error handling in PHP is almost similar to error handling in all programming languages. The default error handling in PHP will give file name line number and error type.Ways to handle PHP Errors:Using die() methodCustom Error HandlingBasic error handling: Using die() function The die() function print a message and exit from current script.Syntax:die( $message )Example:<?php// Php code showing default error handling$file = fopen(\"geeks.txt\", \"w\");?>Note: Run the above code and geeks.txt file is not present then it will display an run-time error message.Runtime Error: PHP Warning: fopen(geeks.txt): failed to open stream: Permission denied   in /home/dac923dff0a2558b37ba742613273073.php on line 2To prevent this error use die() function. Below is the implementation of die() function:Example:<?php// PHP code to check errors// If file is not present// then exit from scriptif( !file_exists(\"geeks.txt\") ) {    die(\"File is not present\");}// If file is present// then continueelse {    $file = fopen(\"geeks.txt\", \"w\");}?>Note: If geeks.txt file not present then it will display output.OutputFile is not presentCustom Error handling: Creating a custom error handler in PHP is quite simple. Create a function that can be called when a error has been occurred in PHP.Syntax:  error_function( $error_level, $error_message, $error_file, $error_line, $error_context)Parameters: This function accepts five parameters as mentioned above and described below:$error_level: It is required parameter and it must be an integer. There are predefined error levels.$error_message: It is required parameter and it is the message which user want to print.$error_file: It is optional parameter and used to specify the file in which error has been occurred.$error_line: It is optional parameter and used to specify the line number in which error has been occurred.$error_context: It is optional parameter and used to specify an array containing every variable and their value when error has been occurred.error_level: These are the possible error level which are listed below:1 : .E_ERROR :fatal runtime error execution of script has been halted2 : E_WARNING :non fatal runtime error execution of script has been halted4 : E_PARSE :compile time error it is generated by the parser8 :E_NOTICE :The script found something that might be an error16 :E_CORE_ERROR :Fatal errors that occurred during initial startup of script32 :E_CORE_WARNING :Non fatal errors that occurred during initial startup of script8191 :E_ALL :All errors and warningset_error_handler() Function: After creating myerror() function need to set custom error handler because in normal way PHP handles it but if user doing custom error handling then user have to set it in place of argument and pass out myerror function as a string.Example:<?php// Creates my error function which prints message//to userfunction myerror($error_no, $error_msg) {    echo \"Error: [$error_no] $error_msg \";    echo \"\\n Now Script will end\";    // When error occured script has to be stoped    die();}// Setting set_error_handlerset_error_handler(\"myerror\");$a = 10;$b = 0;// This will generate errorecho($a / $b);;?>Output:Error: [2] Division by zero    Now Script will endConclusion: It is always try to error handling using Custom error handling because it will show more specified message according to the user that can be helpful to the user. If error is not handle using Custom error handling then a error occurred then out script will be halted by default but if it handle error using Custom error handling then it can continue script after displaying error message.");
    }

    private void arrayArticles()
    {
        create(getIdByTitle(this.context,"Arrays"),"PHP | array_chunk() Function","The array_chunk() function is a builtin function in PHP and is used to split an array in parts or chunks of given size depending upon the parameters passed to the function. The last chunk may contain less elements than the desired size of the chunk.Syntax:  array array_chunk ( $array ,$size , $preserve_keys )Parameters: This function accepts three parameters as shown in the above syntax. The parameters are described below:$array: This parameter represents the array that is needed to be divided into chunks.$size: This parameter is an integer which defines the size of the chunks to be created.$preserve_keys: This parameter takes Boolean value. When this argument is TRUE then the keys are preserved, otherwise the chunk is reindexed starting from 0.Return value: This function returns a multidimensional array indexed starting from 0. Each chunk contains $size number of elements, except the last chunk which may contain lesser number of elements.Examples:  Input : $input_array = array(\'a\', \'b\', \'c\', \'d\', \'e\');          array_chunk($input_array, 2);  Output : Array(                  [0] => Array                  (                      [0] => a                      [1] => b                  )                  [1] => Array                  (                      [0] => c                      [1] => d                  )                  [2] => Array                  (                      [0] => e                  )              )    Input :$input_array = array(\'a\', \'b\', \'c\', \'d\', \'e\');         array_chunk($input_array, 2, true)  Output :    Array              (                  [0] => Array                  (                      [0] => a                      [1] => b                  )                  [1] => Array                  (                      [2] => c                      [3] => d                  )                  [2] => Array                  (                      [4] => e                  )              )In the first example a multidimensional array is returned in which each chunk contains 2 elements. In the second example, since the third argument is passed as true therefore the index of elements in each chunk is same as their index in the original array from which this chunk is created. In this case, also each chunk contains 2 elements which are the value of size passed to the function.Below programs illustrate the array_chunk() function:Program 1:<?php$input_array = array(\'a\', \'b\', \'c\', \'d\', \'e\');print_r(array_chunk($input_array, 2));?>Output:  Array  (      [0] => Array          (              [0] => a              [1] => b          )      [1] => Array          (              [0] => c              [1] => d          )      [2] => Array          (              [0] => e          )  )Program 2:<?php$input_array = array(\'a\', \'b\', \'c\', \'d\', \'e\');print_r(array_chunk($input_array, 2, true));?>Output:  Array  (      [0] => Array          (              [0] => a              [1] => b          )      [1] => Array          (              [2] => c              [3] => d          )      [2] => Array          (              [4] => e          )  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_combine() Function","The array_combine() is an inbuilt function in PHP and is used to combine two arrays and create a new array by using one array for keys and another for values values. That is all elements of one array will be the keys of new array and all elements of second array will be the values of this new array.Examples:  Input : $array1 = (\"Ram\", \"Akash\", \"Rishav\");           $array2 = (\'24\', \'30\', \'45\');  Output :          Array          (            [Ram] => 24            [Akash] => 30            [Rishav] => 45          )    Input : $array1 = (\"65824\", \"92547\", \"12045\");          $array2 = (\'1\', \'2\', \'3\');  Output :          Array          (            [65824] => 1            [92547] => 2            [12045] => 3          )Syntax:array_combine ($keys_array, $values_array)Parameters: This function takes two parameters and both the parameters in this function are mandatory and it accepts only arrays as parameters.$keys_array: This is an array of keys. If illegal values are passed for the key, then it will be converted to a string.$values_array: This is an array of values that is to be used in the new array.Return Type: This function returns a new combined array, in which the elements from first array $keys_array represents keys in new array and elements from second array $values_array represents the corresponding values in the new array. This function returns false if the number of elements in the two arrays are not same.Below program illustrates the working of array_combine() in PHP:<?php// PHP code to illustrate the working of array_combine()function Combine($array1, $array2){    return(array_combine($array1, $array2));}// Driver Code$array1 = array(\"Ram\", \"Akash\", \"Rishav\");$array2 = array(\'24\', \'30\', \'45\');print_r(Combine($array1, $array2));?>Output:  Array  (      [Ram] => 24      [Akash] => 30      [Rishav] => 45  )Note: Total number of elements in both of the arrays must be equal for the function to execute successfully otherwise it will throw an error.");create(getIdByTitle(this.context,"Arrays"),"PHP | array_count_values() Function","The array_count_values() is an inbuilt function in PHP and is one of the most simple functions of PHP that is used to count all the values inside an array. In other words we can say that array_count_values() function is used to calculate the frequency of all of the elements of an array.Syntax:  array_count_values($array)Parameters: This function takes a single parameter $array. This parameter is the array for which we need to calculate the count of values present in it.Return Type: This function returns an associative array with key-value pairs in which keys are the elements of the array passed as parameter and values are frequency of these elements in the array.Note: If the element is not a string or integer then an E_WARNING is thrown.Examples:  Input : array = (\"Geeks\", \"for\", \"Geeks\", \"Geeks\", \"Welcome\", \"for\")  Output :           Array          (            [Geeks] => 3            [for] => 2            [Welcome] => 1          )    Input : array = (1, 1, 2, 3 , 1 , 2 , 4, 5)  Output :         Array         (           [1] => 3           [2] => 2           [3] => 1           [4] => 1           [5] => 1         )Below program illustrates the working of array_count_values() function in PHP:<?php// PHP code to illustrate the working of array_count_values()function Counting($array){    return(array_count_values($array));}// Driver Code$array = array(\"Geeks\", \"for\", \"Geeks\", \"Geeks\", \"Welcome\", \"for\");print_r(Counting($array));?>Output:  Array  (      [Geeks] => 3      [for] => 2      [Welcome] => 1  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_diff_assoc() Function","This inbuilt function of PHP is used to get the difference between one or more arrays. This function compares both the keys and values between one or more arrays and returns the difference between them. So, the function generally compares two arrays according to there keys and values and returns the elements that are present in the first array but not in other input arrays.Note: This function is different than PHP | array_diff() function in a way that the latter only used the values to compare, but in array_diff_assoc() we use both the values and keys to compare.Syntax:array_diff_assoc($array1, $array2, $array3, ..., $arrayn)Parameters: The function can take any number of arrays as parameters needed to be compared.Return Type: This function compares the key and value of the first array of parameters with rest of the arrays and returns an array containing all the entries from $array1 that are not present in any of the other arrays.Examples:  Input :   $array1 = (\"10\"=>\"RAM\", \"20\"=>\"LAXMAN\", \"30\"=>\"RAVI\",                           \"40\"=>\"KISHAN\", \"50\"=>\"RISHI\")  $array2 = (\"10\"=>\"RAM\", \"70\"=>\"LAXMAN\", \"30\"=>\"KISHAN\",                                             \"80\"=>\"RAGHAV\")  $array3 = (\"20\"=>\"LAXMAN\", \"80\"=>\"RAGHAV\")  Output :  Array  (      [30] => RAVI      [40] => KISHAN      [50] => RISHI  )    Input :  $array1 = (\"10\"=>\"RAM\", \"20\"=>\"LAXMAN\", \"30\"=>\"RAVI\",                         \"40\"=>\"KISHAN\", \"50\"=>\"RISHI\")  $array2 = (\"20\"=>\"LAXMAN\", \"40\"=>\"RAGHAV\", \"40\"=>\"KISHAN\")  Output :  Array  (      [10] => RAM      [30] => RAVI      [50] => RISHI  )Below program illustrates the working of array_diff_assoc() in PHP:<?php// PHP code to illustrate the// array_diff_assoc() function// Input Arrays$array1 = array(\"10\"=>\"RAM\", \"20\"=>\"LAXMAN\", \"30\"=>\"RAVI\",                            \"40\"=>\"KISHAN\", \"50\"=>\"RISHI\");$array2 = array(\"10\"=>\"RAM\", \"70\"=>\"LAXMAN\", \"30\"=>\"KISHAN\",                                            \"80\"=>\"RAGHAV\");$array3 = array(\"20\"=>\"LAXMAN\", \"80\"=>\"RAGHAV\");print_r(array_diff_assoc($array1, $array2, $array3));?>Output:Array  (      [30] => RAVI      [40] => KISHAN      [50] => RISHI  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_diff_key() Function","This inbuilt function of PHP is used to get the difference between one or more arrays. This function compares the keys between one or more arrays and returns the difference between them. So, the function generally compares two arrays according to there keys and returns the elements that are present in the first array but not in other input arrays.Note: This function is different than array_diff() and array_diff_assoc(). The first only used the values to compare. The second one uses both keys and values to compare. Where as array_diff_key() uses just the keys to compare.Syntax:array array_diff_key($array1, $array2, $array3, ..., $array_n)Parameters: The function can take any number of arrays as parameters needed to be compared.Return Type: This function compares the key of the first array of parameters with rest of the arrays and returns an array containing all the entries from $array1 that are not present in any of the other arrays.Examples:  Input :   $array1 = (\"10\"=>\"RAM\", \"20\"=>\"LAXMAN\", \"30\"=>\"RAVI\",                         \"40\"=>\"KISHAN\", \"50\"=>\"RISHI\")  $array2 = (\"10\"=>\"RAM\", \"70\"=>\"LAXMAN\", \"30\"=>\"KISHAN\",                                           \"80\"=>\"RAGHAV\")  $array3 = (\"30\"=>\"LAXMAN\", \"80\"=>\"RAGHAV\")  Output :  Array  (      [20] => LAXMAN      [30] => RAVI      [40] => KISHAN      [50] => RISHI  )    Input :  $array1 = (\"10\"=>\"RAM\", \"20\"=>\"LAXMAN\", \"30\"=>\"RAVI\",                         \"40\"=>\"KISHAN\", \"50\"=>\"RISHI\");  $array2 = (\"10\"=>\"LAXMAN\", \"40\"=>\"RAGHAV\", \"40\"=>\"KISHAN\");  Output :  Array  (      [10] => RAM      [20] => LAXMAN      [30] => RAVI      [50] => RISHI  )Below program illustrates the working of array_diff_key() in PHP:<?php// PHP code to illustrate the// array_diff_assoc() function// Input Arrays$array1 = array(\"10\"=>\"RAM\", \"20\"=>\"LAXMAN\", \"30\"=>\"RAVI\",                            \"40\"=>\"KISHAN\", \"50\"=>\"RISHI\");$array2 = array(\"10\"=>\"RAM\", \"70\"=>\"LAXMAN\",                \"30\"=>\"KISHAN\", \"80\"=>\"RAGHAV\");$array3 = array(\"30\"=>\"LAXMAN\", \"80\"=>\"RAGHAV\");print_r(array_diff_assoc($array1, $array2, $array3));?>Output:Array  (      [20] => LAXMAN      [30] => RAVI      [40] => KISHAN      [50] => RISHI  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_diff_uassoc() Function","The array_diff_uassoc() function is a built-in function in PHP and is used to get the difference between one or more arrays using an user-defined function to compare the keys. This function compares both the keys and values between one or more arrays to and returns the elements from the first array which are not there in the rest of arrays. The keys are compared according to the uder defined function supplied to this function.Note: This function is different than PHP | array_diff_assoc() Function as in array_diff_assoc() function the keys are compared according to some internal function whereas in array_diff_uassoc() function the keys are compared according to a user defined function passed to it as parameter.Syntax:array_diff_assoc($array1, $array2, $array3, ..., $arrayn, user_function)Parameters: This function accepts a list of arrays as parameter and a user defined function which will be used for key’s comparison.list_of_array: This function takes a list of arrays separated by spaces from which we want to find the difference. In the above syntax the list of array is $array1, $array2, $array3, …, $arrayn. This list must contain atleast two arrays otherwise a warning will be thrown.user_fucntion: This is a string type parameter which represents the name of the user defined function which will be used for key’s comparison. The function returns either of an integer which is smaller, greater or equal to 0 if the first argument is greater, smaller or equal than the second argument.Return Value: This function returns an array containing the elements of the first array $array1 which are not present in the other arrays passed to it in parameters. The comparison is done between key and value of the first array $array1 with rest of the arrays. The comparison of keys is done as per the user-defined function.Examples:  Input : $a1=array(10=>\"striver\", 20=>\"raj\", 30=>\"geek\")          $a2=array(20=>\"striver\", 10=>\"raj\", 30=>\"geek\")          function user_function($a, $b)          {             if ($a===$b)             {                return 0;             }             return ($a>$b)?1:-1;          }    Output: Array          (             [10] => striver             [20] => raj          )    Explanation:  Since user_function returns 0 when keys  are equal and 1 and -1 when greater and less respectively.  So, the elements with unequal keys are in the output array.Below programs illustrate the array_diff_uassoc() function in PHP:Program 1:<?php// PHP program to illustrate the// array_diff_uassoc() function// user defined fucntion that returns 0 if// $array1\'s keys are equal to any other// input array, else returns 1 if greater,// or -1 if smallerfunction user_function($a, $b){  if ($a===$b)  {      return 0;  }  return ($a>$b)? 1: -1;}// Input Arrays$a1=array(10=>\"striver\", 20=>\"raj\", 30=>\"geek\");$a2=array(20=>\"striver\", 10=>\"raj\", 30=>\"geek\");$result = array_diff_uassoc($a1, $a2, \"user_function\");print_r($result);?>Output:Array  (      [10] => striver      [20] => raj  )Program 2:<?php// PHP program to illustrate the// array_diff_uassoc() function// user defined function that returns 1 if// $array1\'s keys are equal to any other// input array, else returns 1 if greater,// or 0 if smallerfunction user_function($a, $b){  if ($a===$b)  {    return 1;  }  return ($a>$b)? 1: 0;}// Input Arrays$a1 = array(10=>\"striver\", 20=>\"raj\", 30=>\"geek\");$a2 = array(20=>\"striver\", 10=>\"raj\", 30=>\"geek\");$result=array_diff_uassoc($a1, $a2, \"user_function\");print_r($result);?>:Output:  Array  (      [20] => raj      [30] => geek  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_diff_ukey() Function","The array_diff_ukey() function is an inbuilt function in PHP. It is used to compares the key two or more arrays using a user-defined function, and return an array, which is array1 and its not present any others array2, array3 or more…Syntax:array_diff_ukey($array1, $array2, $array3..., arr_diffukeyFunction)Parameters Used:This function accepts minimum three parameters and all three parameter is mandatory and the other is optional. The parameters are described below:$array1(mandatory):The array will be compared with other arrays.(such that array compare from array1).$array2(mandatory):The array Compared with the first array.$array3(Optional):The array Compared with the first array.arr_diffukeyFunction(mandatory):It is Required user-defined function. A string that defines a callable comparison function.The comparison function returns an integer than 0 if the first argument is than the second argument.Return Value:Returns an array containing the entries from array1 that are not present in other arrays such as:-(arra2, arra3, arar4….more). If all values are present in other arrays the function return NULL. The return value type is an array.Example 1:  Input:   $arr1 = array(\"one\"=>\"C Program\", \"two\"=>\"PHP Program\", \"three\"=>\"Java Program \");  $arr2 = array(\"one\"=>\"Java Program\", \"two\"=>\"C++ Program\", \"six\"=>\"Java Program\");    Output:   Array  (      [three] => Java Program   )    Explanation: First two values of arr1 are matched with arr2 and last value                not matched so the function returns last value.Example 2:  Input:   $arr1=array(\"one\"=>\"C Program\", \"two\"=>\"PHP Program\", \"three\"=>\"Java Program \");  $arr2=array(\"one\"=>\"Java Program\", \"two\"=>\"C++ Program\", \"three\"=>\"Java Program\");    Output:   Array  (  )    Explanation: All values are matched with arr2 so function return null values.Let’s take an example for understand the array_diff_ukey() Function.Program 1 : Taking two array (array1 and array2) and using user-defined key comparison function (diffukeyFunction).Simple solution in PHP language :<?php// Program of array_diff_ukey function in PHPfunction arr_diffukeyFunction($one, $two){    if ($one === $two) {        return 0;    }    return ($one > $two) ? 1 : -1;}// Driver Code$arr1 = array(    \"one\" => \"C Program\",    \"two\" => \"PHP Program\",    \"three\" => \"Java Program \");$arr2 = array(    \"one\" => \"Java Program\",    \"two\" => \"C++ Program\",    \"six\" => \"Java Program\");$result = array_diff_ukey($arr1, $arr2, \"arr_diffukeyFunction\");print_r($result);?>Output:  Array  (      [three] => Java Program   )Program 2 : Take three array (array1, array2 and arra3) and using user-defined key comparison function (diffukeyFunction).<?php// Program of array_diff_ukey function in PHPfunction arr_diffukeyFunction($one, $two){    if ($one === $two) {        return 0;    }    return ($one > $two) ? 1 : -1;}// Driver Code$arr1 = array(    \"one\" => \"C Program\",    \"two\" => \"PHP Program\",    \"three\" => \"Java Program \");$arr2 = array(    \"one\" => \"XML Program\",    \"two\" => \"C++ Program\",    \"four\" => \"CSS Program\");$arr3 = array(    \"five\" => \"MVC Program\",    \"six\" => \"C# Program\",    \"one\" => \"ASP .NET Program\");$result = array_diff_ukey($arr1, $arr2, $arr3, \"arr_diffukeyFunction\");print_r($result);?>Output:  Array  (      [three] => Java Program   )Program 3 : Return Null if all values are matched in other arrays<?php// Program of array_diff_ukey function in PHPfunction arr_diffukeyFunction($one, $two){    if ($one === $two) {        return 0;    }    return ($one > $two) ? 1 : -1;}// Driver Code$arr1 = array(    \"one\" => \"C Program\",    \"two\" => \"PHP Program\");$arr2 = array(    \"one\" => \"Java Program\",    \"two\" => \"C++ Program\");$result = array_diff_ukey($arr1, $arr2, \"arr_diffukeyFunction\");print_r($result);?>Output:  Array  (  )Program 4 : If we take only one array (array1) and using user-defined key comparison function (diffukeyFunction)There are no output and its gives “RUNTIME ERROR” warning message.<?php//Program of array_diff_ukey function in PHPfunction arr_diffukeyFunction($one, $two){    if ($one === $two) {        return 0;    }    return ($one > $two) ? 1 : -1;}// Driver Code$arr1 = array(    \"one\" => \"C Program\",    \"two\" => \"PHP Program\",    \"three\" => \"Java Program \");//take only one array$result = array_diff_ukey($arr1, \"arr_diffukeyFunction\");print_r($result);?>Output:No OutputWarning:PHP Warning:  array_diff_ukey(): at least 3 parameters are required,  2 given in /home/c0177af9f69e897ad93cc9855a9ae415.php on line 23");create(getIdByTitle(this.context,"Arrays"),"PHP | array_diff() function","The array_diff() is an inbuilt function in PHP ans is used to calculate the difference between two or more arrays. This function computes difference according to the values of the elements, between one or more array and return differences in the form of a new array. This function basically returns all the entries that are present in the first array which are not present in any other arrays.Syntax:  array_diff($array1, $array2, $array3, ...,$arrayn)Parameters: The function can take any number of arrays as parameters needed to be compared.Return Type: This function compares the first array in parameters with rest of the arrays and returns an array containing all the entries from $array1 that are not present in any of the other arrays.Examples:  Input :  $array1 = (\'a\', \'b\', \'c\');           $array2 = (\'a\', \'d\', \'e\');           $array3 = (\'a\', \'b\', \'f\');           array_diff($array1, $array2, $array3);   Output :           Array           (             [2] => c           )    Input : $array1 = (\'a\', \'b\', \'a\');          $array2 = (\'a\', \'d\', \'e\');  Output :           Array           (             [1] => b           )Below program illustrates the working of array_diff() in PHP:<?php// PHP code to illustrate the working of array_diff()function Difference($array1, $array2, $array3){    return(array_diff($array1, $array2, $array3));}// Driver Code$array1 = array(\'a\', \'b\', \'c\', \'d\', \'e\', \'f\');$array2 = array(\'a\', \'b\', \'g\', \'h\');$array3 = array(\'a\', \'f\', \'i\');print_r(Difference($array1, $array2, $array3));?>Output:  Array  (      [2] => c      [3] => d      [4] => e  )Important points to note:It compares the elements in their string representation. That is, 1 and ‘1’ are both equal for array_diff().The number of repetition of element in first array doesn’t matter. That is if an element occurs 3 times in $array1 and only 1 time in other arrays then all of the 3 occurrences of that element in first array will be omitted in output.For multi-dimensional arrays, we need to to compare each of the dimensions separately. For example:- $array1[2],$array2[2] etc.");create(getIdByTitle(this.context,"Arrays"),"PHP | array_fill_keys() Function","The array_fill_keys() function is a builtin function in PHP and is used to create a new array filled with the given keys and value provided as an array to the function.Syntax:  array array_fill_keys ( $keys, $value )Parameters: This function accepts two parameters, keys and their values to be present in the new array. Both of this parameters are described below:$keys: This parameter is an array consisting of keys that are to be used for creating the new array. If the $keys array contains any illegal value then it is converted into a string and used.$value: This parameter can be a single value or a list of values. This parameter represents the value of the keys that are to be inserted into the array. If this parameter is an array, then the new array created will be a 2-d array where each element of $keys array will be a key and every key in this new array will have $value array as a value.Return value: This function returns an array consisting of key-value pairs that are provided to the function as parameters.Examples:  Input : $keys = array(\'golden\', 25, 560, \'age\')          array_fill_keys($keys, \'majestic\')  Output : Array          (             [golden] => majestic             [25] => majestic             [560] => majestic             [age] => majestic          )    Input :$keys = array(\'tumult\', \'25\', 560, \'cater\')         array_fill_keys($keys, \'limited\')  Output : Array          (             [tumult] => limited             [25] => limited             [560] => limited             [cater] => limited          )In both the example the keys to be used with the new array are provided as an array to the function and the value to be used is provided as the second argument.Below programs illustrate the array_fill_keys() function in PHP:Program 1:<?php$keys = array(\'golden\', 25, 560, \'age\');// Creating new array with specified keys$a = array_fill_keys($keys, \'majestic\');print_r($a);?>Output:  Array  (      [golden] => majestic      [25] => majestic      [560] => majestic      [age] => majestic  )Program 2:<?php$keys = array(\'tumult\', \'25\', 560, \'cater\');// Creating new array$a = array_fill_keys($keys, \'limited\');print_r($a);?>Output:  Array  (      [tumult] => limited      [25] => limited      [560] => limited      [cater] => limited  )Program 3:<?php$keys = array(\'tumult\', \'25\', 560, \'cater\');$value = array(5,10);// Creating new array$a = array_fill_keys($keys, $value);print_r($a);?>Output:  Array  (      [tumult] => Array          (              [0] => 5              [1] => 10          )        [25] => Array          (              [0] => 5              [1] => 10          )        [560] => Array          (              [0] => 5              [1] => 10          )        [cater] => Array          (              [0] => 5              [1] => 10          )  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_fill() function","The array_fill() is an inbuilt-function in PHP and is used to fill an array with values. This function basically creates an user-defined array with a given pre-filled value.Syntax:array_fill($start_index, $number_elements, $values)Parameter:The array_fill() function takes three parameters and are described below:$start_index: This parameter specifies the starting position of filling up the values into the array, the user wants to create. If $start_index is negative, the first index of the returned array will be $start_index and the following indices will start from zero. So it is better to assign a positive value to it. This is a mandatory parameter and must be supplied.$number_elements: This parameter refers to the number of elements, the user wants to enter into the array. The $number_elements should be positive (including 0, for ver 5.6.0) otherwise E_WARNING is thrown. This is also a mandatory parameter.$values : This parameter refers to the values we want to insert into the array. These values can be of any type.Return Type: The array_fill() function returns a filled user-defined array, with values described by $value parameter.Examples:  Input : $start_index = 2; $number_elements = 3;          $values = \"Geeks\";  Output :          Array          (            [2] => Geeks            [3] => Geeks            [4] => Geeks          )    Input : $start_index = -10; $number_elements = 3;          $values = 45;  Output :          Array          (            [-10] => 45            [0] => 45            [1] => 45          )Below program illustrates the working of array_fill() function in PHP:<?php// PHP code to illustrate the working of array_fill()function Fill($start_index, $number_elements, $values){    return(array_fill($start_index, $number_elements, $values));}// Driver Code$start_index = 2;$number_elements = 5;$values = \"Geeks\";print_r(Fill($start_index, $number_elements, $values));?>Output:  Array  (      [2] => Geeks      [3] => Geeks      [4] => Geeks      [5] => Geeks      [6] => Geeks  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_filter() Function","This built-in function in PHP is used to filter the elements of an array using a user-defined function which is also called a callback function. The array_filter() function iterates over each value in the array, passing them to the user-defined function or the callback function. If the callback function returns true then the current value of the array is returned into the result array otherwise not. This way the keys of the array gets preserved, i.e. the key of element in the original array and output array are same.Syntax:array array_filter($array, $callback_function, $flag)Parameters: The function takes three parameters, out of which one is mandatory and the other two are optional.$array (mandatory): This refers to the input array on which the filter operation is to be performed.$callback_function (optional): Refers to the user-defined function. If the function is not supplied then all entries of the array equal to FALSE , will be removed.$flag (optional): Refers to the arguments passed to the callback function.ARRAY_FILTER_USE_KEY – passes key as the only argument to a callback function, instead of the value of the array.ARRAY_FILTER_USE_BOTH – passes both value and key as arguments to callback instead of the value.Return Value: The function returns a filtered array.Below is a program showing how to return or filter out even elements from an array using array_filter() function.<?php// PHP function to check for even elements in an arrayfunction Even($array){    // returns if the input integer is even    if($array%2==0)       return TRUE;    else       return FALSE;}$array = array(12, 0, 0, 18, 27, 0, 46);print_r(array_filter($array, \"Even\"));?>Output:  Array  (      [0] => 12      [1] => 0      [2] => 0      [3] => 18      [5] => 0      [6] => 46  )In this example, we will not pass the callback function and let’s see the output. We will see that the 0 or false elements are not printed:<?php// PHP function to check for even elements in an arrayfunction Even($array){    // returns if the input integer is even    if($array%2==0)       return TRUE;    else       return FALSE;}$array = array(12, 0, 0, 18, 27, 0, 46);print_r(array_filter($array));?>Output:  Array  (      [0] => 12      [3] => 18      [4] => 27      [6] => 46  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_flip() Function","This built-in function of PHP is used to exchange elements within an array, i.e., exchange all keys with their associated values in an array and vice-versa. We must remember that the values of the array need to be valid keys, i.e. they need to be either integer or string. A warning will be thrown if a value has the wrong type, and the key/value pair in question will not be included in the result.Examples:  Input : array = (\"aakash\" => 20, \"rishav\" => 40, \"gaurav\" => 60)  Output :          Array          (            [20] => aakash            [40] => rishav            [60] => gaurav          )  Explanation: The keys and values are exchanged and the last key or value is taken.    Input : array = (\"aakash\" => \"rani\", \"rishav\" => \"sristi\",                    \"gaurav\" => \"riya\", \"laxman\" => \"rani\")  Output :          Array          (            [rani] => laxman            [sristi] => rishav            [riya] => gaurav          )Syntax:array array_flip($array)Parameters: The function takes only one parameter $array that refers to the input array.Return Type: This function returns another array, with the elements exchanged or flipped, it returns null if the input array is invalid.Below program illustrates the working of array_flip():<?php// PHP function to illustrate the use of array_flip()function Flip($array){    $result = array_flip($array);    return($result);}$array = array(\"aakash\" => \"rani\", \"rishav\" => \"sristi\",               \"gaurav\" => \"riya\", \"laxman\" => \"rani\");print_r(Flip($array));?>Output:  Array  (      [rani] => laxman      [sristi] => rishav      [riya] => gaurav  ):http://php.net/manual/en/function.array-flip.php");create(getIdByTitle(this.context,"Arrays"),"PHP | array_intersect_assoc() Function","The array_intersect_assoc() is a builtin function in PHP and is used to compute the intersection of two or more arrays. This function is similar to the function array_intersect() which is discussed in the article PHP | array_intersect() function. The function is also used to compare the values of two or more arrays and returns the matches. The only difference is that the function returns all of the values of the first array that are present in all other arguments at the same index as that in first array, i.e., the keys are mainly used in the comparison.Syntax:array array_intersect_assoc($array1, $array2, $array3,...)Parameters: The array_intersect_assoc() function takes atleast two arrays as parameter. The function can take any number of arrays as arguments greater than or equal to two.Return Value: The function returns another array that contains the intersection of all the input arrays. If no element matches then, a NULL array is returned.Examples:  Input :          $array1 = (\"1\" => \"shyam\", \"2\" => \"rishav\", \"3\" => \"gaurav\");         $array2 = (\"1\" => \"shyam\", \"2\" => \"rishi\", \"3\" => \"rishav\");         $array3 = (\"1\" => \"shyam\", \"2\" => \"rishav\", \"3\" => \"ravi\");  Output :         Array         (             [1] => shyam         )In the below program, we have used array_intersect_assoc() to find the intersection between arrays. Let’s look closer at the outputs of this and array_intersect() function.<?php// PHP function to illustrate the use of array_intersect_assoc()function Intersect($array1, $array2, $array3){    $result = array_intersect_assoc($array1, $array2, $array3);    return($result);}$array1 = array(\"1\" => \"shyam\", \"2\" => \"rishav\", \"3\" => \"gaurav\");$array2 = array(\"1\" => \"shyam\", \"2\" => \"rishi\", \"3\" => \"rishav\");$array3 = array(\"1\" => \"shyam\", \"2\" => \"rishav\", \"3\" => \"ravi\");print_r(Intersect($array1, $array2, $array3));?>Output:  Array  (      [1] => shyam  )In the above program we have used the array_intersect_assoc() to find the intersection of the arrays. In the below program we will use the array_intersect() function to do the same. Give close attention to the outputs of both the programs. The first one returns only those elements which are strictly similar, both by values and keys, unlike array_intersect().<?php// PHP function to illustrate the use of array_intersect()function Intersect($array1, $array2, $array3){    $result = array_intersect($array1, $array2, $array3);    return($result);}$array1 = array(\"1\" => \"shyam\", \"2\" => \"rishav\", \"3\" => \"gaurav\");$array2 = array(\"1\" => \"shyam\", \"2\" => \"rishi\", \"3\" => \"rishav\");$array3 = array(\"1\" => \"shyam\", \"2\" => \"rishav\", \"3\" => \"ravi\");print_r(Intersect($array1, $array2, $array3));?>Output:  Array  (      [1] => shyam      [2] => rishav  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_intersect_key() Function","This builtin function of PHP is used to compute the intersection of two or more arrays. The function is different from array_intersect() and array_intersect_assoc() in a way that it uses the keys for the comparison and returns the matching key elements. The function prints only those elements of the first array whose keys matches with the elements of all other arrays.You may refer to array_intersect() and array_intersect_assoc() for better understanding.Syntax:  array array_intersect_key($array1, $array2, $array3, $array4...)Parameters: The array_intersect_key() function takes at least two arrays as arguments. It can take any number of arrays greater than or equal to two separated by commas (‘,’).Return Type: The function returns another array containing the elements of the first array that are present in all other arrays passed as the parameter whose key matches with each other. If no keys matches then, a NULL array is returned.Examples:  Input : $array1 = (\"1\" => \"aakash\", \"2\" => \"rishav\", \"3\" => \"gaurav\")          $array2 = (\"1\" => \"shyam\", \"2\" => \"rishi\", \"5\" => \"rishav\")          $array3 = (\"1\" => \"aakash\", \"4\" => \"raghav\", \"2\" => \"ravi\")  Output :          Array          (            [1] => aakash            [2] => rishav          )Below program illustrate the array_intersect_key() function. In the below program, we have used array_intersect_key() to find the intersection between arrays. Let’s look closer at the outputs of this and other functions of array_intersect() and array_intersect_assoc() to know the difference.<?php// PHP program to illustrate the use// of array_intersect_key() function$array1 = array(\"1\" => \"aakash\", \"2\" => \"rishav\", \"3\" => \"gaurav\");$array2 = array(\"1\" => \"shyam\", \"2\" => \"rishi\", \"5\" => \"rishav\");$array3 = array(\"1\" => \"aakash\", \"4\" => \"raghav\", \"2\" => \"ravi\");print_r(array_intersect_key($array1, $array2, $array3));?>Output:Array  (      [1] => aakash      [2] => rishav  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_intersect_uassoc() Function","The array_intersect_uassoc() function is an inbuilt function in PHP. It is used to compare key and values of two or more arrays by using a user-defined comparison function and return the matches.The comparison function returns an integer equal to, greater than or less than zero. If the first argument to be considered respectively less than, equal to or greater than second. If condition true then return TRUE value, else it returns FALSE value.Syntax:array_intersect_uassoc($array1, $array2, $array3..., uassoc_intersectFunction)Parameters Used: This function accepts minimum three parameters and all three parameter is mandatory and the others parameters are optional. Parameters are described below:$array1 (Required ):The array will be compared with other arrays..$array2 (Required):The array Compared with the first array.$array3…(Optional):The array Compared with the first array.uassoc_intersectFunction (Required):It is Required user-defined function. A string that defines a callable comparison function. The comparison function returns an integer less than, equal to or greater than 0. If the first argument is less than, equal to or greater than the second argument.Return Value:Returns an array containing the entries from array1 that are present in all other arrays such as:-(arra2, arra3, arar4….more). The return value type is an array.Note: The function uses a user-defined function to compare the keys. (user-define function\'s  functionality is applicable for key not for values of keys)Let’s take an example to understand the array_intersect_uassoc() Function.Program: 1 In this example we comare the keys of array by using case-insensitive strcasecmp function. It compares keys without case-sensitiveness.<?php$arr1 = array(    \"a\" => \"gfg\",    \"b\" => \"GeeksforGeeks\",    \"c\" => \"contribute\");$arr2 = array(    \"a\" => \"gfg\",    \"B\" => \"GeeksforGeeks\",    \"c\" => \"ide\");$arr3 = array(    \"x\" => \"gfg\",    \"B\" => \"GeeksforGeeks\",    \"c\" => \"practice\");// Compare the keys and values by using a// user-defined key comparison function.// Here callback function applicable on keysecho \"Using function: array_uintersect_assoc() \\n \";$result = array_intersect_uassoc($arr1,                $arr2, $arr3, \"strcasecmp\");// printing resultprint_r($result);?>Output:  Using function: array_uintersect_assoc()    Array  (      [b] => GeeksforGeeks  )Program: 2 Take two array (array1 and array2) and using user-defined key comparison function (uassoc_intersectFunction). Function return array with only mathched keys & values only.<?php// Illusrate  array_intersect_uassoc()// Function in PHPfunction uassoc_intersectFunction($arr1, $arr2){    if ($arr1 === $arr2) {        return 0;    }    return ($arr1 > $arr2) ? 1 : -1;}// Code driven$arr1 = array(    \"0\" => \"Graph\",    \"1\" => \"Dynamic\",    \"3\" => \"Recursive\",    \"4\" => \"Prime Factor\");$arr2 = array(    \"4\" => \"Prime\",    \"2\" => \"Factorial\",    \"3\" => \"Recursive\",    \"7\" => \"Modulo\");$result = array_intersect_uassoc($arr1,        $arr2, \"uassoc_intersectFunction\");print_r($result);?>Output:  Array  (      [3] => Recursive  )Program: 3 Taking three array (arr1, arr2 and arr3) and using user-defined key comparison function (uassoc_intersectFunction). User-define function match as it is keys with same values but no any such case found then it will return NULL/Empty Array (In program 1 we used strcasecmp function this function applied on keys and ignore sensitiveness of case and return result GeeksforGeeks.)<?php// illusrate array_intersect_uassoc()// Function in PHPfunction uassoc_intersectFunction($arr1, $arr2){    if ($arr1 === $arr2) {        return 0;    }    return ($arr1 > $arr2) ? 1 : -1;}// Code driven$arr1 = array(    \"a\" => \"gfg\",    \"b\" => \"GeeksforGeeks\",    \"c\" => \"contribute\");$arr2 = array(    \"a\" => \"gfg\",    \"B\" => \"GeeksforGeeks\",    \"c\" => \"ide\");$arr3 = array(    \"a\" => \"Gfg\",    \"B\" => \"GeeksforGeeks\",    \"c\" => \"practice\");// userdefine function match as it is keys// with same values but no any such// case so it will return NULL$result = array_intersect_uassoc($arr1, $arr2, $arr3, \"uassoc_intersectFunction\");print_r($result);?>Output:  Array  (  )Below are some related array intersect PHP functionsThe function returns another array containing the elements of the first array that are present in all other arrays passed as the parameter. If no element matches then, a NULL array is returned.function returns all of the values of the first array that are present in all other arguments at the same index as that in first array, i.e., the keys are mainly used in the comparison.compare the keys of an array and user-defined function to compare the values.The function returns another array containing the elements of the first array that are present in other arrays passed as the parameter whose key matches with each other. If no keys matches then, a NULL array is returned.v<?php// Program to illustrate==>// array_intersect() function// array_intersect_assoc() function// array_uintersect_assoc() function// array_intersect_uassoc() function$arr1 = array(    \"a\" => \"gfg\",    \"b\" => \"GeeksforGeeks\",    \"c\" => \"contribute\");$arr2 = array(    \"a\" => \"gfg\",    \"B\" => \"GeeksforGeeks\",    \"c\" => \"ide\");$arr3 = array(    \"a\" => \"Gfg\",    \"B\" => \"GeeksforGeeks\",    \"c\" => \"practice\");// The array_intersect() function compares// the values (not keys) of two (or more)// arrays, and returns the matches.echo \"**********array_intersect********** \\n \";$result = array_intersect($arr1, $arr2, $arr3);print_r($result);// array_intersect_assoc() returns an array// containing all the values of arr1 that// are present in all the arguments.// for above input it will return nullecho \"******array_intersect_assoc******** \\n \";$result = array_intersect_assoc($arr1, $arr2, $arr3);print_r($result);// array_uintersect_assoc compare values (data)// by using call back functionecho \"*********array_uintersect_assoc********** \\n \";$result = array_uintersect_assoc($arr1,                    $arr2, $arr3, \"strcasecmp\");print_r($result);// Compare the keys and values by using// a user-defined key comparison function// here callback function applicable on keysecho \"*********array_uintersect_assoc *********\\n \";$result = array_intersect_uassoc($arr1,                    $arr2, $arr3, \"strcasecmp\");print_r($result);// compute the intersection of two or more arrays.// function returns another array containing// the elements of the first array that// are present in other arraysecho \"*********array_intersect_key *********\\n \";$result = array_intersect_key($arr1,                    $arr2, $arr3);print_r($result);?>Output:  **********array_intersect**********    Array  (      [b] => GeeksforGeeks  )  ******array_intersect_assoc********    Array  (  )  *********array_uintersect_assoc**********    Array  (      [a] => gfg  )  *********array_uintersect_assoc *********   Array  (      [b] => GeeksforGeeks  )  *********array_intersect_key *********   Array  (      [a] => gfg      [c] => contribute  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_intersect() Function","This builtin function of PHP is used to compute the intersection of two or more arrays. The function is used to compare the values of two or more arrays and returns the matches. The function prints only those elements of the first array that are present in all other arrays.Syntax:array array_intersect($array1, $array2, $array3, $array4...)Parameters: The array_intersect() function takes at least two arrays as arguments. It can take any number of arrays greater than or equal to two separated by commas (‘,’).Return Type: The function returns another array containing the elements of the first array that are present in all other arrays passed as the parameter. If no element matches then, a NULL array is returned.Note: The keys of elements are preserved. That is, the keys of elements in output array will be same as that of keys of those elements in the first array.Examples:  Input : $array1 = array(5, 10, 15, 20, 25, 30)          $array2 = array(20, 10, 15, 55, 110, 30)          $array3 = array(10, 15, 30, 55, 100, 95)  Output :          Array          (             [1] => 10             [2] => 15             [5] => 30          )    Input : $array1 = array(\"ram\", \"laxman\", \"rishi\", \"ayush\");          $array2 = array(\"ayush\", \"gaurav\", \"rishi\", \"rohan\");          $array3 = array(\"rishi\", \"gaurav\", \"ayush\", \"ravi\");  Output :          Array          (             [2] => rishi             [3] => ayush          )Below program illustrates the array_intersect() function in PHP:<?php// PHP function to illustrate the use of array_intersect()function Intersect($array1, $array2, $array3){    $result = array_intersect($array1, $array2, $array3);    return($result);}$array1 = array(5, 10, 15, 20, 25, 30);$array2 = array(20, 10, 15, 55, 100, 110, 30);$array3 = array(10, 15, 30, 55, 100, 95);print_r(Intersect($array1, $array2, $array3));?>Output:  Array  (      [1] => 10      [2] => 15      [5] => 30  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_key_exists() Function","Pre-requisite: PHP | array_keys() FunctionThe array_key_exists() is an inbuilt function of PHP and is used to check whether a specific key or index is present inside an array or not. The function returns True if the specified key is found in the array otherwise returns false.Syntax:boolean array_key_exists($index, $array)Parameters: This function takes two arguments and are described below:$index (mandatory): This parameter refers to the key that is needed to be searched for in an input array.$array (mandatory): This parameter refers to the original array in which we want to search the given key $index.Return Value: This function returns a boolean value i.e., TRUE and FALSE depending on whether the key is present in the array or not respectively.Note: Nested keys will return result as FALSE.Examples:  Input: $array = array(\"ram\"=>25, \"krishna\"=>10,                               \"aakash\"=>20, \"gaurav\")         $index = \"aakash\"  Output : TRUE    Input : $array = (\"ram\", \"krishna\", \"aakash\", \"gaurav\");          $index = 1  Output : TRUE    Input : $array = (\"ram\", \"krishna\", \"aakash\", \"gaurav\");          $index = 4  Output : FALSEBelow programs ilustrates the array_key_exists() function in PHP:In the following program we will see how we can find a key inside an array that holds key_value pair.<?php// PHP function to illustrate the use// of array_key_exists()function Exists($index, $array){    if (array_key_exists($index, $array)){        echo \"Found the Key\";    }    else{        echo \"Key not Found\";    }}$array = array(\"ram\"=>25, \"krishna\"=>10,                \"aakash\"=>20, \"gaurav\");$index = \"aakash\";print_r(Exists($index, $array));?>Output:  Found the KeyIf no key_value pair exits, as in the below case, then the array takes the default keys i.e. numeric keys starting form zero, into consideration and returns True as far as the $index limit ranges.<?php// PHP function to illustrate the use of// array_key_exists()function Exists($index, $array){    if (array_key_exists($index, $array)) {        echo \"Found the Key\";    }    else{        echo \"Key not Found\";    }}$array=array(\"ram\", \"krishna\", \"aakash\", \"gaurav\");$index = 2;print_r(Exists($index, $array));?>Output:  Found the Key");create(getIdByTitle(this.context,"Arrays"),"PHP | array_keys() Function","The array_keys() is a built-in function in PHP and is used to return either all the keys of and array or the subset of the keys.Syntax:array array_keys($input_array, $search_value, $strict)Parameters: The function takes three parameters out of which one is mandatory and other two are optional.$input_array (mandatory): Refers to the array that we want to operate on.$search_value (optional): Refers to the value of the array by which we want to search the array for the key elements. If this parameter is passed then the function will return keys coressponding to this element only otherwise it will return all keys of the array.$strict (optional): Determines if strict comparison (===) should be used during the search. false is the default value.Return Value: The function returns an array containing either all of the keys or subset of keys the input array depending upon the parameters passed.Examples:  Input :  $input_array = (\"one\" => \"shyam\", 2 => \"rishav\",                                             \"three\" => \"gaurav\")           Output :  Array  (      [0] => one      [1] => 2      [2] => three  )    Input : $input_array = (\"one\", \"two\", \"three\", \"one\",                             \"four\", \"three\", \"one\", \"one\")          $search_value = \"one\"  Output :  Array  (      [0] => 0      [1] => 3      [2] => 6      [3] => 7  )In the below program, we have passed a simple associative array to the function array_keys(), to print all of its keys:<?php// PHP function to illustrate the use of array_keys()function get_Key($array){    $result = array_keys($array);    return($result);}$array = array(\"one\" => \"shyam\", 2 => \"rishav\",                             \"three\" => \"gaurav\");print_r(get_Key($array));?>Output:  Array  (      [0] => one      [1] => 2      [2] => three  )In the below program, along with the array we have passed a value only for which the key position is returned.<?php// PHP function to illustrate the use of array_keys()function get_Key($array, $search_value){    $result = array_keys($array, $search_value);    return($result);}$array = array(\"one\", \"two\", \"three\", \"one\", \"four\",                               \"three\", \"one\", \"one\");$search_value = \"one\";print_r(get_Key($array, $search_value));?>Output:  Array  (      [0] => 0      [1] => 3      [2] => 6      [3] => 7  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_merge_recursive() Function","The array_merge_recursive() is an inbuilt function in PHP and is used to merge two or more arrays into a single array recursively. This function is used to merge the elements or values of two or more arrays together into a single array. The merging occurs in such a manner that the values of one array are appended at the end of the previous array. If there are same keys in the given arrays, then the key is assigned a value which has an array that consists of the values with the same key.Note: The function is different from array_merge() in a way that in case of multiple arrays with same keys, array_merge() function takes the last array value from all the arrays, but in array_merge_recursive() the key is assigned an array which consists of all the values of arrays which has the same key.Syntax:array_merge_recursive($array1, $array2, $array3...$arrayn)Parameters: The function can take any number of arrays as parameter separated by comma (,) that we need to merge. The first parameter $array1 is mandatory.Return Value: The function returns a merged array which has all the arrays merged. The merging occurs in such a manner that the values of one array are appended at the end of the previous array. If there are same keys in the given arrays, then that key in the output array is assigned an array that consists of the values with the same key.Examples:  Input : $a1=array(\"a\"=>\"raj\", \"b\"=>\"striver\");          $a2=array(\"z\"=>\"geeks\", \"b\"=>\"articles\");  Output :   Array  (      [a] => raj      [b] => Array          (              [0] => striver              [1] => articles          )        [z] => geeks  )  Explanation: \"striver\" and \"articles\" has the same   key \"b\", so the key b is assigned to an array which has   \"striver\" and \"articles\" as elements.     Input :$a1=array(\"a\"=>\"raj\", \"b\"=>\"striver\");         $a2=array(\"z\"=>\"geeks\", \"d\"=>\"articles\");  Output :  Array  (      [a] => raj      [b] => striver      [z] => geeks      [d] => articles  )Below programs illustrate the array_merge_recursive() function:Program 1: PHP program to demonstrate array_merge_recursive()function with all different keys.<?php// PHP program to demonstrate array_merge_recursive()// function with same keys$a1=array(\"a\"=>\"raj\", \"b\"=>\"striver\");$a2=array(\"z\"=>\"geeks\", \"d\"=>\"articles\");print_r(array_merge_recursive($a1, $a2));?>Output:Array  (      [a] => raj      [b] => striver      [z] => geeks      [d] => articles  )Program 2: PHP program to demonstrate array_merge_recursive() function with same keys.<?php// PHP program to demonstrate array_merge_recursive()// function with same keys$a1=array(\"a\"=>\"raj\", \"b\"=>\"striver\");$a2=array(\"z\"=>\"geeks\", \"b\"=>\"articles\");//function callprint_r(array_merge_recursive($a1, $a2));?>Output:Array  (      [a] => raj      [b] => Array          (              [0] => striver              [1] => articles          )        [z] => geeks  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_multisort() Function","The array_multisort() is an inbuilt function in PHP which is used to sort multiple arrays at once or a multi-dimensional array with each individual dimension.With this function, one should remember that string keys will be maintained, but numeric keys will be re-indexed, starting at 0 and increases by 1.Syntax:bool array_multisort($array1, sorting_order, sorting_type, $array2..)Parameters: The array generally takes one parameter that is the array which needs to be sorted. But in addition, the function can take two more optional parameters sorting_order and sorting_type.$array1: This parameter specifies the array which we want to sort.sorting_order: This parameter specifies the order to use i.e. in ascending or descending order. The default value of this parameter is SORT_ASC. That is, sorting in ascending order. In order to sort in descending order we will have to set this parameter to SORT_DESC.sorting_type: This parameter specifies the sort options for the arrays and they are as follows:SORT_REGULAR: Compare elements regularly(Standard ASCII).SORT_NUMERIC: Compare elements as numeric-values.SORT_STRING: Compare elements as string values.SORT_LOCALE_STRING: Compare elements as string, based on the current locale.SORT_NATURAL: Compare elements as strings using “natural ordering”.SORT_FLAG_CASE: Can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively.If we want to sort multiple arrays, we can pass them as parameters like $array2, $array3… followed by their sorting_order, sorting_type.Return value: The array_multisort() function returns a boolean value. That is it will return TRUE on success and FALSE on failure.Note:If two members on comparing become equal, their relative order in sorted array is undefined.Below programs illustrate the array_multisort() function:Program 1:<?php// Input array$animals = array(\"Dog\", \"Cat\", \"Horse\",                \"Bear\", \"Zebra\", \"Lion\");// sorting array using default values// for sorting_order and sorting_typearray_multisort($animals);print_r($animals);?>Output:  Array  (      [0] => Bear      [1] => Cat      [2] => Dog      [3] => Horse      [4] => Lion      [5] => Zebra  )Program 2:<?php// Input arrays$array1=array(\"Dog\", \"Cat\");$array2=array(\"Fido\", \"Missy\");// sorting multiple arrays using default values// for sorting_order and sorting_typearray_multisort($array1, $array2);// printing sorted arraysprint_r($array1);print_r($array2);?>Output:  Array  (      [0] => Cat      [1] => Dog  )  Array  (      [0] => Missy      [1] => Fido  )Program 3:<?php// Input arrays$array1=array(\"Dog\", \"Dog\", \"Cat\");$array2=array(\"Pluto\", \"Fido\", \"Missy\");// sorting multiple arraysarray_multisort($array1, SORT_ASC, $array2, SORT_DESC);// Printing sorted arraysprint_r($array1);print_r($array2);?>Output:  Array  (      [0] => Cat      [1] => Dog      [2] => Dog  )  Array  (      [0] => Missy      [1] => Pluto      [2] => Fido  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_pad() Function","The array_pad() is a builtin function in PHP and is used to pad a value fixed number of time onto an array. This function inserts an element specified number of times into an array either at front or back.Syntax:array array_pad($input_array, $input_size, $values)Parameters: This function accepts three parameters, all of this which are mandatory to be supplied.$input_array (mandatory): Refers to the array, on which the operation is to be performed, or to which the elements are needed to be added.$total_size (mandatory): Refers to the total size of the new array to be returned.If the value is positive, the elements get added to the end of the array.If the value is negative, the elements get added at the beginning of the array.$values (mandatory): Refers to the value with which padding will take place. The padding takes place only when $total_size is greater than the size of the input_array.Return Value: The function returns a copy of the array padded to the size of $total_size. If the absolute value of $total_size is less than or equal to the length of the array then no padding takes place. It is possible to add, at most 1048576 elements at a time.Examples:  Input : array = (\"one\", \"two\", \"three\", \"four\", \"five\")          $total_size  = 7 , $value = \"six\"  Output :   Array  (      [0] => one      [1] => two      [2] => three      [3] => four      [4] => five      [5] => six      [6] => six  )    Input : array = (\"one\", \"two\", \"three\", \"four\", \"five\")          $total_size  = -7 , $value = \"six\"  Output :   Array  (      [0] => six      [1] => six      [2] => one      [3] => two      [4] => three      [5] => four      [6] => five  )Below programs explains the working of the array_pad() function:Padding elements at end of the array when the $total_size is positive:<?php// PHP function to illustrate the use of array_pad()function Padding($array, $string){    $result = array_pad($array, 7, $string);    return($result);}$array = array(\"one\", \"two\", \"three\", \"four\", \"five\");$string = \"six\";print_r(Padding($array, $string));?>Output:  Array  (      [0] => one      [1] => two      [2] => three      [3] => four      [4] => five      [5] => six      [6] => six  )Padding elements at start of the array when the $total_size is negative:<?php// PHP function to illustrate the use of array_pad()function Padding($array, $string){    $result = array_pad($array, -7, $string);    return($result);}$array = array(\"one\", \"two\", \"three\", \"four\", \"five\");$string = \"six\";print_r(Padding($array, $string));?>Output:  Array  (      [0] => six      [1] => six      [2] => one      [3] => two      [4] => three      [5] => four      [6] => five  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_pop() Function","This inbuilt function of PHP is used to delete or pop out and return the last element from an array passed to it as parameter. It reduces the size of the array by one since the last element is removed from the array.Syntax:array_pop($array)Parameters: The function takes only one parameter $array, that is the input array and pops out the last element from it, reducing the size by one.Return Value: This funciton returns the last element of the array. If the array is empty or the input parameter is not an array, then NULL is returned.Note: This function resets the (reset()) the array pointer of the input array after use.Examples:  Input : $array = (1=>\"ram\", 2=>\"krishna\", 3=>\"aakash\");  Output : aakash    Input : $array = (24, 48, 95, 100, 120);  Output : 120Below programs illustrate the array_pop() function in PHP:Example 1<?php// PHP code to illustrate the use of array_pop()$array = array(1=>\"ram\", 2=>\"krishna\", 3=>\"aakash\");print_r(\"Popped element is \");echo array_pop($array);print_r(\"\\nAfter popping the last element, \".                \"the array reduces to: \\n\");print_r($array);?>Output:  Popped element is aakash  After popping the last element, the array reduces to:   Array  (      [1] => ram      [2] => krishna  )Example 2<?php$arr = array(24, 48, 95, 100, 120);print_r(\"Popped element is \");echo array_pop($arr);print_r(\"\\nAfter popping the last element, \".                \"the array reduces to: \\n\");print_r($arr);?>Output:Popped element is 120  After popping the last element, the array reduces to:   Array  (      [0] => 24      [1] => 48      [2] => 95      [3] => 10  )Exception: An E_WARNING exception is thrown if a non-array is passed which is a runtime error or warning. This warning will not stop the execution of script.");create(getIdByTitle(this.context,"Arrays"),"PHP | array_product() Function","There are some point of time when we need to calculate the product of all elements in an array. The most basic way to do this is to iterate over all elements and calculate the product but PHP serves us with a builtin function to do this. The array_product() is a built-in function in PHP and is used to find the products of all the elements in an array.Syntax:array_product($array)Parameters: The function takes only one parameter $array, that refers to the input array whose products of elements we wish to get.Return Value: The array_product() function returns an integer or float value depending on the nature of elements of the array.Examples:  Input : array = (5, 8, 9, 2, 1, 3, 6)  Output : 12960    Input : array = (3.2, 4.8, 9.1, 4.36, 1.14)  Output : 694.7426304Below programs illustrates the working of array_product() function:When the array passed to the array_product() function contains only integral values then the array_product() function returns an integer value equals to the product of all the elements of the array passed to it.<?php// PHP function to illustrate the use// of array_product()// Return Integer numberfunction Product($array){    $result = array_product($array);    return($result);}$array = array(5, 8, 9, 2, 1, 3, 6);print_r(Product($array));?>Output:  12960When the array passed to the array_product() function contains both integral and float values then the array_product() function returns a floating point value equals to the product of all the elements of the array passed to it.<?php// PHP function to illustrate the use of// array_product()function Product($array){    $result = array_product($array);    return($result);}$array = array(3.2, 4.8, 9.1, 4.36, 1.14);print_r(Product($array));?>Output:  694.7426304");create(getIdByTitle(this.context,"Arrays"),"PHP | array_push() Function","This inbuilt function of PHP is used to push new elements into an array. We can push one or more than one element into the array and these elements gets inserted to the end of the array and because of the pushed elements into the array, the length of the array also gets incremented by the number of elements pushed into the array.Syntax:array_push($array, $val1, $val2, $val3....)Parameters:The function can take multiple parameters, depending on the number of elements we want to push into the array. We can classify the parameters in two categories as shown below:$array: This parameter refers to the original array we want to operate upon.List of values: This parameter refers to the list of elements separated by commas we want to push into the array. In the above syntax the list of values to be pushed is $val1, $val2, $val3….Return Value: This function returns the modified array, with all the elements pushed to the end of the array.Note: If the array has a key, value pair, then the method will always add a numeric key to the pushed value.Examples:  Input : $array = (1=>\"ram\", 2=>\"krishna\", 3=>\"aakash\")          $val1 = \"rohan\", $val2 = \"rajeeb\", $val3 = \"saniya\"  Output :   Array  (      [1] => ram      [2] => krishna      [3] => aakash      [4] => rohan      [5] => rajeeb      [6] => saniya  )    Input : $array = (\"ram\", \"krishna\", \"aakash\");          $val1 = \"rohan\", $val2 = \"rajeeb\", $val3 = \"saniya\"  Output :  Array  (      [0] => ram      [1] => krishna      [2] => aakash      [3] => rohan      [4] => rajeeb      [5] => saniya  )Below programs illustrate the array_push() function in PHP:In the below program the array_push() function is used to push new elements in an array with no keys.<?php// PHP code to illustrate the use of array_push()// Input array$array = array(\"ram\", \"krishna\", \"aakash\");// elements to push$a1 = \"rohan\";$a2 = \"rajeeb\";$a3 = \"saniya\";// array after pushing new elementsprint_r(array_push($array, $a1, $a2, $a3));?>Output:  Array  (      [0] => ram      [1] => krishna      [2] => aakash      [3] => rohan      [4] => rajeeb      [5] => saniya  )In the below program, we will understand how the array_push() function works with an array having a already defined key_value pair.<?php// PHP code to illustrate the use of array_push()// Input Array$array = array(1=>\"ram\", 2=>\"krishna\", 3=>\"aakash\");// Elements to push$a1 = \"rohan\";$a2 = \"rajeeb\";$a3 = \"saniya\";// Array after pushing new elementsprint_r(array_push($array, $a1, $a2, $a3));?>Output:  Array  (      [1] => ram      [2] => krishna      [3] => aakash      [4] => rohan      [5] => rajeeb      [6] => saniya  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_rand() Function","This inbuilt function of PHP is used to fetch a random number of elements from an array. The element is a key and can return one or more than one key. On a practical basis, this is not that useful because the function uses pseudo-random number generator that is not suitable for cryptographic purposes.Syntax:array_rand($array, $num)Parameters: The function takes only two arguments and are described below:$array (mandatory): This is a mandatory parameter and refers to the original input array.$num (optional): This parameter refers to the number of random numbers needed to be returned. This has to be greater than or equal to one otherwise E_WARNING is thrown along.Return Value: This function returns the random generated values from the array. The number of returned elements depends on the value of the $num, assigned to the function.Examples:  Input :   $array = (\"ram\"=>\"20\", \"krishna\"=>\"42\", \"aakash\"=>\"15\")  $num = 2  Output :  Array  (      [0] => ram      [1] => aakash  )    Input :  $array = (\"ram\"=>\"20\", \"krishna\"=>\"42\", \"aakash\"=>\"15\")  Output : krishnaBelow programs illustrates the array_rand() function in PHP:In the below program we have passed our second parameter that specifies the number of elements to be returned.<?php// PHP function to illustrate the use// of array_rand()$array = array(\"ram\"=>\"20\", \"krishna\"=>\"42\",                            \"aakash\"=>\"15\");$num = 2;print_r(array_rand($array, $num));?>Output:  Array  (      [0] => ram      [1] => krishna  )Now let’s see what will happen if we don’t pass the second parameter.<?php// PHP function to illustrate the// use of array_rand()$array = array(\"ram\"=>\"20\", \"krishna\"=>\"42\",                            \"aakash\"=>\"15\");print_r(array_rand($array));?>Output:  aakash");create(getIdByTitle(this.context,"Arrays"),"PHP | array_reduce() Function","This inbuilt function of PHP is used to reduce the elements of an array into a single value that can be of float, integer or string value. The function uses a user defined callback function to reduce the input array.Syntax:array_reduce($array, own_function, $initial)Parameters:The function takes three arguments and are described below:$array (mandatory): This is a mondatory parameter and refers to the original array from which we need to reduce.own_function (mandatory): This parameter is als mandatory and refers to the user defined function that is used to hold the value of the $array$initial (optional): This parameter is optional and refers to the value to be sent to the function.Return Value: This function returns the reduced result. It can be of any type int, float or string.Examples:  Input : $array = (15, 120, 45, 78)          $initial = 25          own_function() takes two parameters and concatenates           them with \"and\" as a separator in between  Output : 25 and 15 and 120 and 45 and 78    Input : $array = array(2, 4, 5);          $initial = 1          own_function() takes two parameters           and multiplies them.  Output : 40In this program we will see how an array of integer elements is reduced to a single string value. We also passed the intial element of our choice.<?php// PHP function to illustrate the use of array_reduce()function own_function($element1, $element2){    return $element1 . \" and \" . $element2;}$array = array(15, 120, 45, 78);print_r(array_reduce($array, \"own_function\", \"Initial\"));?>Output:Initial and 15 and 120 and 45 and 78In the below program, the array_reduce reduces the given array to the product of all the elements of the array using the own_function().<?php// PHP function to illustrate the use of array_reduce()function own_function($element1, $element2){    $element1 = $element1 * $element2;    return $element1;}$array = array(2, 4, 5, 10, 100);print_r(array_reduce($array, \"own_function\", \"2\"));?>Output:80000");create(getIdByTitle(this.context,"Arrays"),"PHP | array_replace_recursive() Function","The array_replace_recursive() is an inbuilt function in PHP that replaces the values of the first array with the values from following arrays recursively.It performs the replacement based on the below rules:If a key from the first array exists in the second array, then the value corresponding to that key of the first array will be replaced by the value of the second array.If the key exists in the second array but not in the first array then it will be created in the first array.If a key only exists in the first array then it will be left as it is.If several arrays are passed for replacement, they will be processed in order, the later array overwriting the previous values.Syntax:  array_replace_recursive($array1, $array2, $array3...)Parameters: This function accepts a list of arrays as parameters where the first parameter is compulsory and rest are optional.Return Value: It returns the modified array, or NULL if an error occurs.Example:  Input: $array1 = array(\"a\"=>array(\"red\"),                          \"b\"=>array(\"green\"));         $array2 = array(\"a\"=>array(\"yellow\"),                          \"b\"=>array(\"black\"));  Output: Array (                   [a] => Array ( [0] => yellow )                   [b] => Array ( [0] => black  )                 )Below progarm illustrate the array_replace_recursive() function:<?php// PHP program to illustrate array_replace_recursive()// function$array1 = array( \"a\" => array(\"red\"),            \"b\" => array(\"green\", \"blue\"));$array2=array( \"a\" => array(\"yellow\"),                    \"b\" => array(\"black\"));$array3=array(\"a\" => array(\"orange\"),                 \"b\" => array(\"burgundy\"));print_r(array_replace_recursive($array1, $array2, $array3));?>Output:  Array  (      [a] => Array          (              [0] => orange          )        [b] => Array          (              [0] => burgundy              [1] => blue          )    )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_replace() Function","The array_replace() function is a builtin function in PHP and it takes a list of arrays separated by commas (,) as parameters and replaces all those values of the first array that have same keys in the other arrays. The replacement is done according to the following rules:If a key in the first array also exists in the second array, then its value in the first array is replaced with the value of that key in the second array.If a key in the second array does not exist in the first array, then it is created in the first array and its value from the second array is copied in the first array.If a key in the first array is not present in any of the subsequent arrays, then the value of that key is left unchanged in the first array.The arrays are processed in order in which they are passed to the function, therefore if a key of the first array is present in more than one array, then its value will be replaced by the value of the array in which it occurs the last time.Syntax:  array array_replace ( $array1, $array2, ...., $arrayn )Parameters: This function accepts a list of arrays as parameters. The first parameter to the function is the array that is to be replaced. The rest of the parameters to the function are the arrays whose value is to be copied into the first array.Return value: This function returns an array formed after modifying the first array in parameters.Examples:  Input : $array1 = array(\"orange\", \"banana\", \"apple\", \"raspberry\")          $array2 = array(0 => \"pineapple\", 4 => \"cherry\")          $array3 = array(0 => \"grape\")          array_replace($array1, $array2, $array3)  Output : Array          (              [0] => grape              [1] => banana              [2] => apple              [3] => raspberry              [4] => cherry          )    Input : $array1 = array(\"aim\", \"plan\", \"vision\", \"clarity\")          $array2 = array(\"word1\" => \"loneliness\", \"word2\" => \"happiness\")          $array3 = array(0 => \"solitude\")          array_replace($array1, $array2, $array3)  Output : Array          (              [0] => solitude              [1] => plan              [2] => vision              [3] => clarity              [word1] => loneliness              [word2] => happiness          )In the first example the key, 0 is present in both the arrays, therefore its value is replaced with the one in which it occurs last i.e. grape and the key 4 is present in the second array therefore its value is also replaced.In the second example the key 0 is present in the third array, therefore its value is replaced in the first array. The keys word1 and word2 are not present in the first array, therefore they are added to the first array along with their values.Below programs illustrate the array_replace() function in PHP:Program 1:<?php// Array to be replaced$array1 = array(\"orange\", \"banana\", \"apple\",                                 \"raspberry\");// arrays that will replace the values// in the first array$array2 = array(0 => \"pineapple\", 4 => \"cherry\");$array3 = array(0 => \"grape\");$resArr = array_replace($array1, $array2,                                 $array3);print_r($resArr);?>Output:  Array  (      [0] => grape      [1] => banana      [2] => apple      [3] => raspberry      [4] => cherry  )Program 2:<?php// Array to be replaced$array1 = array(\"aim\", \"plan\", \"vision\", \"clarity\");// arrays that will replace the values// in the first array$array2 = array(\"word1\" => \"loneliness\",                  \"word2\" => \"happiness\");$array3 = array(0 => \"solitude\");$resArr = array_replace($array1, $array2,                                 $array3);print_r($resArr);?>Output:  Array  (      [0] => solitude      [1] => plan      [2] => vision      [3] => clarity      [word1] => loneliness      [word2] => happiness  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_reverse() Function","This inbuilt function of PHP is used to reverse the elements of an array including the nested arrays. Also, we have an option of preserving the key elements according to the users choice. This function accepts an array as parameter and returns the array with elements in reversed order.Syntax:array array_reverse($array, $key_preserve)Parameters:The function takes two arguments and are described below:$array (mandatory):This parameter refers to the original array.$key_preserve (optional): This is an optional parameter and can be set to TRUE or FALSE, it refers to the preservation of keys of the array. By default the value of this parameter is taken as FALSE.Return Value:This function returns the array passed in parameter with elements in reversed order.Examples:  Input : $array = (2, 4, 5, 10, 100)  Output :   Array  (      [0] => 100      [1] => 10      [2] => 5      [3] => 4      [4] => 2  )    Input :  Array  (      [0] => ram      [1] => aakash      [2] => saran      [3] => mohan  )  Output :  Array  (      [3] => mohan      [2] => saran      [1] => aakash      [0] => ram  )Below programs illustrate the array_reverse() function in PHP:This program reverses an array taking the $key_preserve as FALSE by default. This don’t presere the keys.<?php// PHP function to illustrate the use of array_reverse()function Reverse($array){    return(array_reverse($array));}$array = array(\"ram\", \"aakash\", \"saran\", \"mohan\");echo \"Before:\\n\";print_r($array);echo \"\\nAfter:\\n\";print_r(Reverse($array));?>Output:Before:  Array  (      [0] => ram      [1] => aakash      [2] => saran      [3] => mohan  )    After:  Array  (      [0] => mohan      [1] => saran      [2] => aakash      [3] => ram  )Let’s see what happens when we pass the key_preserve parameter as TRUE. This preserve the keys.<?php// PHP function to illustrate the use of array_reverse()function Reverse($array){    return(array_reverse($array, true));}$array = array(\"ram\", \"aakash\", \"saran\", \"mohan\");echo \"Before:\\n\";print_r($array);echo \"\\nAfter:\\n\";print_r(Reverse($array));?>Output:Before:  Array  (      [0] => ram      [1] => aakash      [2] => saran      [3] => mohan  )    After:  Array  (      [3] => mohan      [2] => saran      [1] => aakash      [0] => ram  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_search() Function","This inbuilt function of PHP is used to search for a particular value in an array, and if the value is found then it returns its corresponding key. If there are more than one values then the key of first matching value will be returned.Syntax:array_search($value, $array, strict_parameter)Parameters:This function takes three parameters as described below:$value (mandatory): Refers to the value that needs to be searched in the array.$array (mandatory): Refers to the original array, which needs to be searched.strict_parameter (optional): Can be set to TRUE or FALSE, and refers to the strictness of search. The default value of this parameter is FALSE.If TRUE, then the function checks for identical elements, i.e., an integer 10 will be treated different from a string 10If FALSE, strictness is not maintained.Return Value: As already mentioned, the function returns the key of the corresponding value that is passed. If not found then FALSE is returned and if there are more than one matches, then the first matched key is returned.Examples:  Input :  $array = (\"ram\", \"aakash\", \"saran\", \"mohan\", \"aakash\")           $value = \"aakash\"  Output : 1    Input :  $array = (45, 5, 1, 22, 22, 10, 10)           $value = 22  Output : 3Below program illustrates the array_search() function in PHP:<?php// PHP function to illustrate the use of array_search()function Search($value, $array){    return(array_search($value, $array));}$array = array(\"ram\", \"aakash\", \"saran\", \"mohan\", \"saran\");$value = \"saran\";print_r(Search($value, $array));?>Output:2In the below program, we will see how the function works when the strict_parameter is set to FALSE. Note that the data types of the array and to be searched element is different.<?php// PHP function to illustrate the use of array_search()function Search($value, $array){    return(array_search($value, $array,false));}$array = array(45, 5, 1, 22, 22, 10, 10);$value = \"10\";print_r(Search($value, $array));?>Output:5Now let’s find out what will happen if we pass the strict_parameter as TRUE, for the same program.<?php// PHP function to illustrate the use of array_search()function Search($value, $array){    return(array_search($value, $array, true));}$array = array(45, 5, 1, 22, 22, 10, 10);$value = \"10\";print_r(Search($value, $array));?>Output:No Output");create(getIdByTitle(this.context,"Arrays"),"PHP | array_shift() Function","This inbuilt function of PHP removes the first element from an array and returns the value of the removed element. After the removal of the first element, the key of the remaining elements is modified and again re-numbered from the start, only if the keys are numerical. In other words, this function basically shifts an element off from the begining in an array.Syntax:array_shift($array)Parameters: The function takes only one argument, $array which refers to the original input array which needs to be shifted.Return Value: As already mentioned, the function returns the value of the shifted element from the array, otherwise NULL if the array is empty.Examples:  Input : $array = (\"ram\"=>2, \"aakash\"=>4, \"saran\"=>5, \"mohan\"=>100)  Output : 2    Input : $array = (45, 5, 1, 22, 22, 10, 10);  Output :45In this program, we will see how the function works in key_value pair array.<?php// PHP function to illustrate the use of array_shift()function Shifting($array){    print_r(array_shift($array));    echo \"\\n\";    print_r($array);}$array = array(\"ram\"=>2, \"aakash\"=>4, \"saran\"=>5, \"mohan\"=>100);Shifting($array);?>Output:2  Array  (      [aakash] => 4      [saran] => 5      [mohan] => 100  )Now let’s see how the function takes care of the default key.<?php// PHP function to illustrate the use of array_shift()function Shifting($array){    print_r(array_shift($array));    echo \"\\n\";    print_r($array);}$array = array(45, 5, 1, 22, 22, 10, 10);Shifting($array);?>Output:45  Array  (      [0] => 5      [1] => 1      [2] => 22      [3] => 22      [4] => 10      [5] => 10  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_slice() Function","The array_slice() is an inbuilt function of PHP and is used to fetch a part of an array by slicing through it, according to the users choice.Syntax:array_slice($array, $start_point, $slicing_range, preserve)Parameters: This function can take four parameters and are described below:$array (mandatory): This parameter refers to the original array, we want to slice.$start_point (mandatory): This parameter refers to the starting position of the array from where the slicing need to be performed. It is mandatory to supply this value. If the value supplied is negative, then the function starts slicing from the end of the array, i.e., -1 refers to the last element of the array.$slicing _range (optional): This parameter refers to the range or limit point upto which the slicing is needed to be done. A negative value will indicate the count from the end of the string. Now, this can also be left blank. On leaving blank the function will slice through all the values as mentioned in the starting point right up to the end.preserve (optional): This parameter can take only two boolean parameters, i.e., either True or False. This will tell the function whether to preserve the keys or reset it. True refers to preserve the keys and false refers to reset the keys. False being the default value.Return Value: As already mentioned this function will return the slected or the sliced parts of the array.Below program illustrate the array_slice() function in PHP:In this program, we will be passing all the positive parameters along with the True value to preserve the keys.<?php// PHP program to illustrate the// array_slice() function// Input array$array = array(\"ram\", \"krishna\", \"aakash\",                        \"gaurav\", \"raghav\");// Slice from pos 1 to pos 3print_r(array_slice($array, 1, 3, true));?>Output:Array  (      [1] => krishna      [2] => aakash      [3] => gaurav  )Now let’s try to observe the output by passing the same values as in above program, but with False as the value of the preserved key.<?php// PHP program to illustrate the// array_slice() function// input array$array = array(\"ram\", \"krishna\", \"aakash\",                        \"gaurav\", \"raghav\");// Slice from pos 1 to pos 3print_r(array_slice($array, 1, 3, false));?>Output:Array  (      [0] => krishna      [1] => aakash      [2] => gaurav  )Below program shows what happens when we dont give the range parameter:<?php// PHP program to illustrate the// use of array_slice()// Input array$array = array(\"ram\", \"krishna\", \"aakash\",                        \"gaurav\", \"raghav\");// Slice from pos 1 to endprint_r(array_slice($array, 1));?>Output:Array  (      [0] => krishna      [1] => aakash      [2] => gaurav      [3] => raghav  )Below program illustrate the array_slice() function when we pass the negative parameter as our starting position:<?php// PHP program to illustrate the// use of array_slice()// Input array$array = array(\"ram\", \"krishna\", \"aakash\",                        \"gaurav\", \"raghav\");// Slice from pos 3rd position to// the end of the arrayprint_r(array_slice($array, -3));?>Output:  Array  (      [0] => aakash      [1] => gaurav      [2] => raghav  )Below program shows what happens when we try to pass the negative parameters as both the starting point and the length or range:<?php// PHP program to illustrate the// use of array_slice()// Input Array$array = array(\"ram\", \"krishna\", \"aakash\",                        \"gaurav\", \"raghav\");// Slice from pos 1 to endprint_r(array_slice($array, -3, -2, true));?>Output:  Array  (      [2] => aakash  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_splice() Function","This inbuilt function of PHP is an advanced and extended version of array_slice() function, where we not only can remove elements from an array but can also add other elements to the array. The function generally replaces the existing element with elements from other arrays and returns an array of removed or replaced elements.Syntax:array array_splice($array1, $start_point, $range, $array2)Parameters: This function can take four parameters and are described below:$array1 (mandatory): This parameter refers to the original array, we want to operate upon.$start_point (mandatory): This parameter refers to the starting position of the array from where the elements need to be removed. It is mandatory to supply this value. If the value supplied is negative, then the function starts removing from the end of the array, i.e., -1 refers to the last element of the array.$range (optional): This parameter refers to the range or limit point up to which the removal is needed to be done. A negative value will indicate the count from the end of the string. Now, this can also be left blank. On leaving blank the function will remove all the values as mentioned in the starting point right up to the end.$array2 (optional): This refers to another array whose elements are to be inserted into $array1. Now for insertion of one element, we don’t need to provide the whole array. We can just pass a single string for one value. For group of values, we need an array.Return Value: The function will return an array of the removed elements from $start_point to $range.Below program illustrate the array_splice() function in PHP:<?php// PHP program to illustrate the use// of array_splice() function$array1 = array(\"10\"=>\"raghav\", \"20\"=>\"ram\",    \"30\"=>\"laxman\",\"40\"=>\"aakash\",\"50\"=>\"ravi\");$array2 = array(\"60\"=>\"ankita\",\"70\"=>\"antara\");echo \"The returned array: \\n\";print_r(array_splice($array1, 1, 4, $array2));echo \"\\nThe original array is modified to: \\n\";print_r($array1);?>Output:The returned array:   Array  (      [0] => ram      [1] => laxman      [2] => aakash      [3] => ravi  )    The original array is modified to:   Array  (      [0] => raghav      [1] => ankita      [2] => antara  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_sum() Function","The array_sum() function returns the sum of all the values in an array(one dimensional and associative). It takes an array parameter and returns the sum of all the values in it.  number array_sum ( $array )ArgumentThe only argument to the function is the array whose sum needs to be calculated.Return valueThis function returns the sum obtained after adding all the elements together. The returned sum may be integer or float. It also returns 0 if the array is empty.Examples:  Input : $a = array(12, 24, 36, 48);          print_r(array_sum($a));  Output :120    Input : $a = array();          print_r(array_sum($a));  Output :0In the first example the array calculates the sum of the elements of the array and returns it. In the second example the answer returned is 0 since the array is empty.Recommended: Please try your approach on {IDE} first, before moving on to the solution.Program – 1<?php//array whose sum is to be calculated$a = array(12, 24, 36, 48);//calculating sumprint_r(array_sum($a));?>Output:  120Program – 2<?php//array whose sum is to be calculated$a = array();//calculating sumprint_r(array_sum($a));?>Output:  0Program – 3<?php// array whose sum is to be calculated$b = array(\"anti\" => 1.42, \"biotic\" => 12.3, \"charisma\" => 73.4);// calculating sumprint_r(array_sum($b));?>Output:  87.12Thanks to HGaur for providing above examples.");create(getIdByTitle(this.context,"Arrays"),"PHP | array_udiff_assoc() Function","The array_udiff_assoc() is an inbuilt function in PHP and used for distinguishing between two or more arrays. The function computes the difference arrays from two or more arrays by used of user-defined function with additional key and return differences. It returns all the entries that are present in the first array and not present in any other array. It is different from array_diff_assoc() function as it allows a user defined function to decide the criteria.Syntax:array_udiff_assoc($array1, $array2, $array3……….array nth, arr_udiffassocFun)Parameters Used: This array_udiff_assoc()function parameters are described below:array1 : It is the initial array and compares to another array. It is Mandatory.array2 : The array Compared with the first array key. It is Mandatory .array3 : The second array Compared with the first array key. It is Optional.arr_udiffassocFun: It’s required user-defined function and A string that define user-defined callback function and it return an integer <, =, or > than 0 if the first argument is <, =, or > than the second argument.Return Value:Returns an array which contains elements of first array which are not present in all others arrays. If there are all array element present then array return NULL.Note: This built-in function array_udiff_assoc()) to compare the keys of an array and user-defined function to compare the values. The function checks only one dimension of a n-dimensional array.Example 1 :    Input :   $arr1 = array(      \"a\" => \"Geeks\",      \"b\" => \"for\",      \"d\" => \"geeks\"  );  $arr2 = array(      \"a\" => \"Geeks\",      \"y\" => \"is\",      \"d\" => \"geeks\"  );  Output:  Array  (      [b] => for  )  Explanation: arr1 contains only one   values(for) which is not present in   arr2.Example 2 :  Input:  $arr1 = array(      \"a\" => \"C\",      \"b\" => \"C++\",      \"d\" => \"Java\",      \"x\" => \"XML\",      \"y\" => \"C#\"  );  $arr2 = array(      \"a\" => \"C\",      \"b\" => \"C++\",      \"d\" => \"PHP\",      \"x\" => \"Advanced PHP\",      \"n\" => \"XML\"      );  Output:  Array  (      [d] => Java      [x] => XML      [y] => C#  )    Explanation: arr1  return three values  (article) which are not present in arr2.  But XML is present both arr1 and arr2   but both have different key.Let’s take a simple example to understand about array_udiff_assoc() Function.Program 1: Take two array (array1 and array2) and using user-defined key comparison function (arr_udiffassocFun).<?php<?php// PHP code for array_uintersect_assoc function.// This function is used to decide which elements// to pick array_udiff_assocfunction arr_udiffassocFun($x, $y){    return ($x === $y)? 0 : 1;}// array list for comparison.$arr1 = array(    \"a\" => \"Raj\",    \"b\" => \"Ram\",    \"d\" => \"Denish\",    \"r\" => \"David\");$arr2 = array(    \"a\" => \"Raj\",    \"y\" => \"Ram\",    \"d\" => \"Denish\",    \"x\" => \"Ritche\");// Driver code$result = array_udiff_assoc($arr1,             $arr2, \"arr_udiffassocFun\");print_r($result);?>Output:  Array  (      [b] => Ram      [r] => David  )Note : [b] => Ram is printed because key is different. In array_diff_assoc() and array_udiff_assoc(), keys and values both are compared. array_diff() compares only values.Program: 2 Takes four array (array1, array2, array3 and array4 ) and using user-defined key comparison function array_udiff_assoc().<?php// PHP code for array_uintersect_assoc function// This function is used to decide which elements// to pick array_udiff_assocfunction arr_udiffassocFun($x, $y){    return ($x === $y)? 0 : 1;}// array list for comparison.$arr1 = array(    \"a\" => \"Larry\",    \"b\" => \"Page\",    \"d\" => \"Denish\",    \"r\" => \"Ritche\");$arr2 = array(    \"a\" => \"Larry\",    \"y\" => \"Page\",    \"d\" => \"Denish\",    \"r\" => \"Ritche\");$arr3 = array(    \"a\" => \"larry\",    \"y\" => \"Bill Gate\",    \"d\" => \"Denish\",    \"r\" => \"Willion\");$arr4 = array(    \"a\" => \"Raj\",    \"y\" => \"Bill Gate\",    \"d\" => \"Denish\",    \"r\" => \"Woks\");$result = array_udiff_assoc($arr1,   $arr2, $arr3, $arr4, \"arr_udiffassocFun\");// print result.print_r($result);?>Output:  Array  (      [b] => Page  )Related Article:Compute differences of an array.Compute differences of an array by used user-defined callback function and compare data.Compute differences of an array with additional index key.This function compares both the keys and values between one or more arrays to and returns the elements from the first array which are not there in the rest of arrays.Compares the key of the first array of parameters with rest of the arrays and returns an array containing all the entries from $array1 that are not present in any of the other arrays.Practice Similar Questions On:PHPReferences: http://php.net/manual/en/function.array-udiff-assoc.php");create(getIdByTitle(this.context,"Arrays"),"PHP | array_udiff() Function","The array_udiff() is an inbuilt function in PHP and used for distinguishing between two or more array. The function compares the different values of two or more arrays by used of user-defined function data comparison and returns the differences. Actually, the function returns all the entries that are present in the first array which is not present in others array. If there are all values of all array are same then, return NULL array. Its unlike comparison of arr_diff()Syntax:array_udiff($array1, $array2, $array3..........array nth, arr_udiffFunction)Parameters Used: This array_udiff() function parameters are described below:array1 :It is the initial array and compares to another array…Its Mandatory.array2 :The array Compared with the first array key.Its Mandatory .array3… :The second array Compared with the first array key.Its Optional.arr_udiffFunction: Its Required user-defined function and A string that define user-defined callback function and it return an integer <, =, or > than 0 if the first argument is <, =, or > than the second argument.Return Value:Returns an array types values which contain the first array which is present in all others array.If there are all of same then array return NULL array.Note: This built-in function (array_udiff()) to compare the keys of an array and user-defined function to compare the values.Example 1 :    Input :      $arr1=array(\"a\"=>\"Geeksforgeeks\", \"b\"=>\"IDE\", \"d\"=>\"environment\", \"v\"=>\"Code Run\");      $arr2=array(\"a\"=>\"Geeksforgeeks\", \"b\"=>\"Editor\", \"f\"=>\"Write\", \"h\"=>\"Code\", );        Output:    Array  (      [b] => IDE      [d] => environment      [v] => Code Run  )    Explanation: arr1 contains only three values(IDE, environment,                Code Run)  which is not present in arr2.Example 2 :  Input:  $arr1 = array(\"a\"=>\"Geeks\", \"x\"=>\"article\",                                  \"n\"=>\"Geeks\");  $arr2 = array(\"x\"=>\"Geeks\", \"y\"=>\"for\", \"z\"=>\"Geeks\",                  \"a\"=>\"IDE\", \"a\"=>\"Editor\", );  Output:    Array  (      [x] => article  )    Explanation: arr1 contains only one values(article) which is not present in arr2.Let’s take a simple example to understand about array_udiff() Function.Program 1: Take two array (array1 and array2) and using user-defined key comparison function (arr_udiffFunction).<?php//PHP code for array_uintersect_assoc functionfunction arr_udiffFunction($a, $b){    if ($a === $b) {        return 0;    }    return ($a > $b) ? 1 : -1;}//array list for comparison.$arr1 = array(    \"a\" => \"C\",    \"b\" => \"C++\",    \"d\" => \"Java\",    \"r\" => \"XML\");$arr2 = array(    \"a\" => \"C\",    \"y\" => \"C++\",    \"d\" => \"C#\",    \"x\" => \"PHP\");$result = array_udiff($arr1, $arr2, \"arr_udiffFunction\");//print result.print_r($result);?>Output:  Array  (      [d] => Java      [r] => XML  )Program: 2 Take four array (array1, array2, array3 and array4 ) and using user-defined key comparison function array_udiff().<?php//PHP code for array_uintersect_assoc functionfunction arr_udiffFunction($a, $b){    if ($a === $b) {        return 0;    }    return ($a > $b) ? 1 : -1;}//array list for comparison.$arr1 = array(    \"a\" => \"C lab\",    \"b\" => \"C++ lab\",    \"d\" => \"Java lab\",    \"r\" => \"ASP lab\");$arr2 = array(    \"a\" => \"C lab\",    \"y\" => \"C++ lab\",    \"d\" => \"Java lab\",    \"r\" => \"XML lab\");$arr3 = array(    \"a\" => \"C# lab\",    \"n\" => \"Android lab\",    \"d\" => \"Python lab\",    \"r\" => \"XML lab\");$arr4 = array(    \"a\" => \"Objective C lab\",    \"y\" => \"C++ lab\",    \"d\" => \"Java lab\",    \"r\" => \"Perl lab\");$result = array_udiff($arr1, $arr2, $arr3, \"arr_udiffFunction\");//print result.print_r($result);?>Output:  Array  (      [r] => ASP lab  )Program: 3 Take two array (array1 and array2) and using user-defined key comparison function (array_udiff(). which has match all element and values of array which is return NULL.<?php//PHP code for array_uintersect_assoc functionfunction arr_udiffFunction($a, $b){    if ($a === $b) {        return 0;    }    return ($a > $b) ? 1 : -1;}//array list for comparison.$arr1 = array(    \"a\" => \"C\",    \"b\" => \"C++\",    \"d\" => \"Java\",    \"r\" => \"XML\");$arr2 = array(    \"a\" => \"C\",    \"y\" => \"C++\",    \"d\" => \"Java\",    \"r\" => \"XML\");$result = array_udiff($arr1, $arr2, \"arr_udiffFunction\");//print result.print_r($result);?>Output:  Array  (  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_uintersect_assoc() Function","The array_uintersect_assoc() function is an inbuilt function in PHP used to compute the intersection of the keys and different values of two or more arrays. The initial array or first array compare to all others array by the callback function or user-defined function and returns the matches.The keys are used in the comparison unlike in array_uintersect() .Syntax:array_uintersect_assoc($array1, $array2, $array3..........array nth, arr_uintersectFunction)Parameters Used: This function accepts two parameters and both parameters are mandatory and the others are optional The parameters are described below:$array1 :It is the initial array and compare to another array.It’s Mandatory.$array2 :The array Compared with the first array key.It’s Mandatory.$array3 :The second array Compared with the first array key.Its Optional.arr_uintersectFunction :Its Required user defined function and A string that define user-defined callback function and return an integer less than, equal to, or greater than zero if the first argument is less than, equal to, or greater than the second argument.Return Value:Returns an array types values which contain the first array which is present in all others array. If there are no matches then array return NULL.Note:This is built-in function (array_uintersect_assoc()) to compare the keys of an array and user-defined function to compare the values.Example 1 :  Input :       $arr1=array(\"a\"=>\"Website\", \"b\"=>\"frontend\", \"c\"=>\"programmer\");       $arr2=array(\"a\"=>\"Website\", \"b\"=>\"backend \", \"c\"=>\"programmer\");       $arr3=array(\"a\"=>\"Website\", \"b\"=>\"fullstack \", \"c\"=>\"programmer\");       $arr4=array(\"a\"=>\"Website\", \"b\"=>\"maintanance \", \"c\"=>\"Team\");        Output:    Array  (      [a] => Website  )  Explanation: Only one element (website) is comman in all array.Example 2 :  Input:          $arr1=array(\"a\"=>\"Software\", \"b\"=>\"Testing\", \"c\"=>\"Tool\");        $arr2=array(\"a\"=>\"Software\", \"b\"=>\"Testing \", \"c\"=>\"Team\");    Output:    Array  (      [a] => Software      [b] => Testing      )  Explanation: Two values are common in both array = Sofware, and Testing.Let’s take simple example to understand about array_uintersect_assoc() Function.Program: 1Take two array (array1 and array2) and using user-defined key comparison function (arr_uintersectFunction).<?php//PHP code  for array_uintersect_assoc functionfunction arr_uintersectFunction($a, $b){    if ($a === $b) {        return 0;    }    return ($a > $b) ? 1 : -1;}//two array list with index and values.$arr1 = array(    \"a\" => \"Java\",    \"b\" => \"Program\",    \"c\" => \"Practice\",    \"d\" => \"in\",    \"f\" => \"Geeksforgeeks\");$arr2 = array(    \"a\" => \"Java\",    \"b\" => \"Code \",    \"c\" => \"write\",    \"d\" => \"in\",    \"f\" => \"GeeksforgeeksIDE\");$result = array_uintersect_assoc($arr1, $arr2, \"arr_uintersectFunction\");//print result.print_r($result);?>Output:  Array  (      [a] => Java      [d] => in  )Program: 2Take two array (array1 and array2) and using user-defined key comparison function (arr_uintersectFunction). which has not match any key and values then array returns NULL.<?php//PHP code  for array_uintersect_assoc function//User-defined functionfunction arr_uintersectFunction($a, $b){    if ($a === $b) {        return 0;    }    return ($a > $b) ? 1 : -1;}//two array list with index and values.$arr1 = array(    \"a\" => \"my\",    \"b\" => \"best\",    \"c\" => \"programming\",    \"d\" => \"blog\",    \"e\" => \"Geeksforgeeks\");$arr2 = array(    \"f\" => \"My\",    \"g\" => \"first \",    \"h\" => \"programm\",    \"i\" => \"Geeks Hello\");$arr3 = array(    \"j\" => \"Analysis\",    \"k\" => \"Algorithm \",    \"l\" => \"and\",    \"m\" => \"Practice\");$result = array_uintersect_assoc($arr1, $arr2, $arr3, \"arr_uintersectFunction\");//print result.print_r($result);?>Output:  Array  (  )Program: 3 Returns all the values of $arr1 that are present in all the arguments.<?php$arr1 = array(    \"a\" => \"gfg\",    \"b\" => \"ide\",    \"c\" => \"runcode\");$arr2 = array(    \"a\" => \"GFG\",    \"B\" => \"practice\");$arr3 = array(    \"a\" => \"Gfg\",    \"B\" => \"contribute\");print_r(array_uintersect_assoc($arr1, $arr2, $arr3, \"strcasecmp\"));?>Output:  Array  (      [a] => gfg  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_uintersect_uassoc() Function","The array_uintersect_uassoc() function is an inbuilt function in PHP which is used to computes the intersection of two arrays. There is the role of a callback function which helps in comparing and computing the indexes values, It compares the keys. It also compares the values inside the two or more arrays using two user-defined functions and then returns the matches. The array_uintersect_uassoc() returns an array containing all the values of the first array that present in all the arguments. For comparisons, the keys are used in the first function and that value is used in the second one.Syntax:array array_uintersect_uassoc( $array1, $array2, $array3..., $function_key, $function_value )Parameters: This function accepts multiple parameters as mentioned above and described below:array1: This is the first array which is mandatory and used to compare with other arrays.array2: This is the second array which is mandatory and used to compare against the first array and other arrays.array3 and others array: It is optional parameters. This is the array used to compare with other arrays.function_key: It is the required parameters. It is the name of the user-defined function that compares the array keys.function_value: It is required parameters. It is the name of the user-defined function that compares the array values.Return Value: It returns an array containing all the values of array1 that are present in all the arguments.Below programs illustrate the array_uintersect_uassoc() Function in PHP:Program 1:<?php$arr1 = array(\"a\" => \"green\", \"b\" => \"brown\", \"c\" => \"blue\", \"red\");$arr2 = array(\"a\" => \"GREEN\", \"B\" => \"brown\", \"yellow\", \"red\");print_r(array_uintersect_uassoc($arr1, $arr2, \"strcasecmp\", \"strcasecmp\"));?>Output:  Array  (      [a] => green      [b] => brown  )Program 2:<?phpfunction function_key($a, $b){    if ($a == $b)        return 0;    return ($a > $b) ? 1 : -1;}function function_value($a, $b){    if ($a == $b)        return 0;    return ($a > $b) ? 1 : -1;}$arr1=array(\"1\"=>\"Geeks\",\"2\"=>\"GeeksforGeeks\",\"3\"=>\"Geeks1\");$arr2=array(\"1\"=>\"Geeks\",\"2\"=>\"GFG\",\"3\"=>\"Geeks1\");$res = array_uintersect_uassoc($arr1, $arr2, \"function_key\", \"function_value\");print_r($res);?>Output:  Array   (       [1] => Geeks       [3] => Geeks1   )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_uintersect() Function","The array_uintersect() is an inbuilt function in PHP and is used to compute the intersection of two or more arrays depending on the values. The first array values are compared with all the other arrays with the help of an user-defined function and the matches are returned.Syntax:array_uintersect($array1, $array2, $array3, ..... $arrayn, user_functionParameters: This function accepts two types of parameters. One is a list of arrays and another one is a user-defined function.List of arrays: This function accepts a list of arrays separated by spaces for which we want to find the intersection. In the above syntax the list of arrays is $array1, $array2, $array3, ….. $arrayn. It can accept any number of arrays separated by spaces with the minimum being 2.user_function: This is a string type parameter which is the name of a user defined function. The function returns 0 when the values in its parameter are same, returns 1 if first parameter is greater than the second, else it returns -1.Return Value: The function returns another array containing all of the elements of the first array that are present in all other arrays passed as the parameter. If no element matches then, a NULL array is returned.Examples:  Input : $a1=array(\"a\"=>\"striver\", \"b\"=>\"geeks\", \"d\"=>\"raj\")          $a2=array(\"d\"=>\"articles\", \"e\"=>\"raj\", \"f\"=>\"coding\")    Output :  Array  (      [d] => raj  )    Input :$a1 = array(\"1\"=>\"geeks\", \"2\"=>\"for\", \"3\"=>\"geek\", \"4\"=>\"coding\")  $a2 = array(\"1\"=>\"geeks\", \"2\"=>\"for\", \"3\"=>\"php\", \"4\"=>\"coding\", \"5\"=>\"ide\")  $a3 = array(\"6\"=>\"cpp\", \"7\"=>\"java\", 8=>\"geeks\")    Output :  Array  (      [1] => geeks  )Below programs illustrate the array_uintersect() function:Program 1: PHP program to demonstrate the working of array_uintersect() function.<?php// PHP program to demonstrate the working of// array_uintersect() function// user-defined functionfunction user_function($a, $b){if ($a===$b)  {  return 0;  }  return ($a>$b)?1:-1;}// arrays$a1=array(\"a\"=>\"striver\", \"b\"=>\"geeks\", \"d\"=>\"raj\");$a2=array(\"d\"=>\"articles\", \"e\"=>\"raj\", \"f\"=>\"coding\");$result=array_uintersect($a1, $a2, \"user_function\");print_r($result);?>Output:Array  (      [d] => raj  )Program 2: PHP program to demonstrate the working of array_uintersect() function with three arrays.<?php// PHP program to demonstrate the working of// array_uintersect() function with 3 arrays// user-defined functionfunction user_function($a, $b){if ($a===$b)  {  return 0;  }  return ($a>$b)?1:-1;}// 3 arrays$a1 = array(\"1\"=>\"geeks\", \"2\"=>\"for\", \"3\"=>\"geek\",                                    \"4\"=>\"coding\");$a2 = array(\"1\"=>\"geeks\", \"2\"=>\"for\", \"3\"=>\"php\",                        \"4\"=>\"coding\", \"5\"=>\"ide\");$a3 = array(\"6\"=>\"cpp\", \"7\"=>\"java\", 8=>\"geeks\");$result=array_uintersect($a1, $a2, $a3, \"user_function\");print_r($result);?>Output:Array  (      [1] => geeks  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_unique() Function","Many times while writing programs or development we need to filter arrays to remove duplicates. PHP provides us with an inbuilt function to do this, making things easy for us. The array_unique() is a built-in function in PHP and this function removes duplicate values from an array. If there are multiple elements in the array with same values then the first appearing element will be kept and all other occurrences of this element will be removed from the array.Also, according to this function two elements are considered equal if and only if (string) $elem1 === (string) $elem2 i.e. when the string representation of the elements is the same.Syntax:  array array_unique($array , $sort_flags)Note: The keys of array are preserved. That is, the keys of the not removed elements of the input array will be same in the output array.Parameters: This function accepts two parameters out of which one is mandatory and the other is optional. Both of these parameters are described below:$array: This parameter is mandatory to be supplied and it specifies the input array from which we want to remove duplicates.$sort_flags: This is optional parameter. This parameter $sort_flags may be used to modify the sorting behavior using these values:SORT_REGULAR: This is the default value of the parameter $sort_flags. This value tells the function to compare items normally (don’t change types).SORT_NUMERIC: This value tells the function to compare items numerically.SORT_STRING: This value tells the function to compare items as strings.SORT_LOCALE_STRING: This value tells the function to compare items as strings, based on the current locale.Return Value: The array_unique() function returns the filtered array after removing all duplicates from the array.Below programs illustrate the array_unique() function in PHP:Example-1:<?php// Input Array$a=array(\"red\", \"green\", \"red\", \"blue\");// Array after removing duplicatesprint_r(array_unique($a));?>Output:  Array  (      [0] => red      [1] => green      [3] => blue  )Example-2:<?php// Input array$arr = array(\"a\"=>\"MH\", \"b\"=>\"JK\", \"c\"=>\"JK\", \"d\"=>\"OR\");// Array after removing duplicatesprint_r(array_unique($arr));?>Output:  Array  (      [a] => MH      [b] => JK      [d] => OR  )Important points to note:The array_unique() is not intended to work on multi dimensional arrays.The keys of the input array are preserved.According to this function two elements are considered equal if their string representation is same.Reference:http:http://php.net/manual/en/function.array-unique.phpp");create(getIdByTitle(this.context,"Arrays"),"PHP | array_unshift() Function","This inbuilt function of PHP is used to add on or more elements into an array and these elements are added to at the beginning of the array. All the elements that we add into the array are inserted in the same order, as they have been passed. They are numerically indexed starting from 0th position. If there are string keys, then they remain unchanged.Syntax:int array_unshift($array, $val1, $val2, $val3....)Parameters:The function can take multiple parameters, depending on the number of elements we want to insert into the array. We have basically classified the parameters in two categories as explained below:$array: This is a mandatory parameter and refers to the original array we want to operate upon.List_of_values: This is a group of parameters and represents a list of values we need to insert in the array, $array. In the above syntax the List_of_values is $val1, $val2, $val3…..Return Value: This function returns the total number of elements in the new modified array after inserting elements.Examples:  Input : $array = (\"ram\", \"krishna\", \"aakash\")          $val1 = \"rohan\", $val2 = \"rajeeb\", $val3 = \"saniya\"  Output :  Array  (      [0] => rohan      [1] => rajeeb      [2] => saniya      [3] => ram      [4] => krishna      [5] => aakash  )    Input : $array = (1=>\"ram\", 2=>\"krishna\", 3=>\"aakash\")          $val1 = \"rohan\", $val2 = \"rajeeb\", $val3 = \"saniya\";  Output :  Array  (      [0] => rohan      [1] => rajeeb      [2] => saniya      [3] => ram      [4] => krishna      [5] => aakash  )Below programs illustrate the array_unshift() function in PHP:In this program, we will try to understand the working of the function array_unshift() by adding the elements to the beginning of the array. We will also observe that the numeric keys are added automatically.<?php// PHP programm to illustrate// the use of array_unshift()// Input Array$array = array(\"ram\", \"krishna\", \"aakash\");// Values to be added$a1 = \"rohan\";$a2 = \"rajeeb\";$a3 = \"saniya\";// Callig array_unshift()array_unshift($array, $a1, $a2, $a3);// Print modified arrayprint_r($array);?>Output:Array  (      [0] => rohan      [1] => rajeeb      [2] => saniya      [3] => ram      [4] => krishna      [5] => aakash  )In the above program we have seen that if a non-key array is passed to the array_unshift() function then it is automatically modified to array with numeric keys. But if the array already had numeric keys starting from zero then after inserting new elements the keys will get modified. Below program illustrate this:<?php// PHP program to illustrate// the use of array_unshift()// Input Array$array = array(1=>\"ram\", 2=>\"krishna\", 3=>\"aakash\");// Values to be inserted$a1 = \"rohan\";$a2 = \"rajeeb\";$a3 = \"saniya\";// Calling array_unshift()array_unshift($array, $a1, $a2, $a3);// Print modified arrayprint_r($array);?>Output:Array  (      [0] => rohan      [1] => rajeeb      [2] => saniya      [3] => ram      [4] => krishna      [5] => aakash  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_values() Function","This inbuilt function in PHP is used to get an array of values from another array that may contain key-value pairs or just values. The function creates another array where it stores all the values and by default assigns numerical keys to the values.Syntax:array array_values($array)Parameters: This function takes only one parameter $array which is mandatory and refers to the original input array, from which values needs to be fetched.Return Value: This function returns an array with the fetched values, indexed with the numerical keys.Examples:  Input : $array = (\"ram\"=>25, \"krishna\"=>10, \"aakash\"=>20, \"gaurav\")  Output :  Array  (      [0] => 25      [1] => 10      [2] => 20      [3] => gaurav  )    Input : $array = (\"ram\", \"krishna\", \"aakash\", \"gaurav\")  Output :  Array  (      [0] => ram      [1] => krishna      [2] => aakash      [3] => gaurav  )Below program illustrates the array_values() function in PHP:// PHP function to illustrate the use of array_values()function Return_Values($array){    return (array_values($array));}$array = array(\"ram\"=>25, \"krishna\"=>10, \"aakash\"=>20, \"gaurav\");print_r(Return_Values($array));?>Output:Array  (      [0] => 25      [1] => 10      [2] => 20      [3] => gaurav  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array_walk_recursive() Function","The array_walk_recursive() function is an inbuilt function in PHP. The array_walk_recursive() function walks through the entire array regardless of pointer position and applies a callback function or user-defined function to every element of the array recursively. The array element’s keys and values are parameters in the callback function. The difference between this function and the array_walk() function is that it will recurse into deeper arrays (an array inside an array).Syntax:  boolean array_walk_recursive($array, myFunction, $extraParam)Parameters: This function accepts three parameters as described below:$array: This is a mandatory parameter and specifies the input array.myFunction: This parameter specifies the name of the user-defined function and is also mandatory. The user-defined function generally excepts two parameters of which the first parameter represent the array’s values and the second parameter represents the corresponding keys.$extraparam: This is an optional parameter. It specifies an extra parameter to the user-defined function in addition to the two parameters, array keys and values.Return value: This function returns a boolean value. It returns TRUE on success or FALSE on failure.Below programs illustrate the array_walk_recursive() function:Program 1:<?php// PHP program to illustrate// array_walk_recursive() function// user-defined callback functionfunction myFunction($value, $key){    echo \"The key $key has the value $value \\n\";}// Input arrays$arr1=array(\"x\"=>\"india\", \"y\"=>\"Pakistan\");$arr2=array($arr1, \"1\"=>\"China\", \"2\"=>\"Japan\");// calling array_walk_recursive() without// extra parameterarray_walk_recursive($arr2, \"myFunction\");?>Output:  The key x has the value india   The key y has the value Pakistan   The key 1 has the value China   The key 2 has the value JapanProgram 2:<?php// PHP program to illustrate// array_walk_recursive() function// user-defined callback function// with extra parameterfunction myFunction($value, $key , $extraParam){    echo \"The key $key $extraParam $value \\n\";}// Input arrays$arr1=array(\"x\"=>\"india\", \"y\"=>\"Pakistan\");$arr2=array($arr1, \"1\"=>\"China\", \"2\"=>\"Japan\");// calling array_walk_recursive() with// extra parameterarray_walk_recursive($arr2, \"myFunction\", \"has the value\");?>Output:  The key x has the value india   The key y has the value Pakistan   The key 1 has the value China   The key 2 has the value Japan");create(getIdByTitle(this.context,"Arrays"),"PHP | array_walk() Function","The array_walk() function is an inbuilt function in PHP. The array_walk() function walks through the entire array regardless of pointer position and applies a callback function or user-defined function to every element of the array. The array element’s keys and values are parameters in the callback function.Syntax:  boolean array_walk($array, myFunction, $extraParam)Parameters: This function accepts three parameters as described below:$array: This is a mandatory parameter and specifies the input array.myFunction: This parameter specifies the name of the user-defined function and is also mandatory. The user-defined function generally excepts two parameters of which the first parameter represent the array’s values and the second parameter represents the corresponding keys.$extraparam: This is an optional parameter. It specifies an extra parameter to the user-defined function in addition to the two parameters, array keys and values.Return value: This function returns a boolean value. It returns TRUE on success or FALSE on failure.Below programs illustrate the array_walk() function:Program 1:<?php// PHP program to illustrate array_walk()// function// user-defined callback functionfunction myfunction($value, $key){    echo \"The key $key has the value $value \\n\";}// Input array$arr = array(\"a\"=>\"yellow\", \"b\"=>\"pink\", \"c\"=>\"purple\");// calling array_walk() with no extra parameterarray_walk($arr, \"myfunction\");?>Output:  The key a has the value yellow   The key b has the value pink   The key c has the value purpleProgram 2:<?php// PHP program to illustrate array_walk()// function// user-defined callback functionfunction myfunction($value, $key, $extraParam){    echo \"The key $key $extraParam $value \\n\";}// Input array$arr = array(\"a\"=>\"yellow\", \"b\"=>\"pink\", \"c\"=>\"purple\");// calling array_walk() with extra parameterarray_walk($arr, \"myfunction\", \"has the value\");?>Output:  The key a has the value yellow   The key b has the value pink   The key c has the value purpleProgram 3:<?php// PHP program to illustrate array_walk()// function// user-defined callback function to// update array values - to update array// values, pass the first parameter by referencefunction myfunction(&$value, $key){    $value = $value + 10;}// Input array$arr = array(\"first\"=>10, \"second\"=>20, \"third\"=>30);// calling array_walk() with no extra parameterarray_walk($arr, \"myfunction\");// printing array after updating valuesprint_r($arr);?>Output:  Array  (      [first] => 20      [second] => 30      [third] => 40  )");create(getIdByTitle(this.context,"Arrays"),"PHP | array() Function","The array() function is an inbuilt function in PHP which is used to create an array. There are three types of array in PHP:Indexed array: The array which contains numeric index.Syntax:array( val1, val2, val3, ... )Associative array: The array which contains name as keys.Syntax:array( key=>val, key=>val, key=>value, ... )Multidimensional array: The array which contains one or more arrays.Syntax:array( array( val11, val12, ...)         array( val21, val22, ...)         ... )Parameters: This function accepts atmost two parameters as mentioned above and described below:val: This parameter is used to hold the value of array.key: This parameter is used to hold the key value:Return Value: This function returns an array of parameters.Below programs illustrates the array() function in PHP:Program 1: This example illustrate the Indexed array.<?php// Create an array$sub = array(\"DBMS\", \"Algorithm\", \"C++\", \"JAVA\");// Find length of array$len = count( $sub );// Loop to print array elementsfor( $i = 0; $i < $len; $i++) {    echo $sub[$i] . \"\\n\";}?>Output:  DBMS  Algorithm  C++  JAVAProgram 2: This example illustrate the Associative array.<?php// Declare an associative array$detail = array( \"Name\"=>\"GeeksforGeeks\",                 \"Address\"=>\"Noida\",                 \"Type\"=>\"Educational site\");// Display the outputvar_dump ($detail);?>Output:  array(3) {    [\"Name\"]=>    string(13) \"GeeksforGeeks\"    [\"Address\"]=>    string(5) \"Noida\"    [\"Type\"]=>    string(16) \"Educational site\"  }Program 3: This example illustrate the Multidimensional array.<?php// Declare 2D array$detail = array(array(1, 2, 3, 4),                array(5, 6, 7, 8));// Display the outputvar_dump ($detail);?>Output:  array(2) {    [0]=>    array(4) {      [0]=>      int(1)      [1]=>      int(2)      [2]=>      int(3)      [3]=>      int(4)    }    [1]=>    array(4) {      [0]=>      int(5)      [1]=>      int(6)      [2]=>      int(7)      [3]=>      int(8)    }  }");create(getIdByTitle(this.context,"Arrays"),"PHP | arsort() Function","The arsort() in PHP is used to sort an array according to values. It sorts in a way that relation between indicies and values is maintained. By default it sorts in descending order of values.Syntax:bool arsort( $array, $sorting_type )Parameters: This function accepts two parameters as mentioned above and described below:$array: This parameter specifies the array which to be sort. It is a mandatory parameter.$sorting_type: This parameter specifies name of a user-defined function which will be used to sort the keys of array $array. This comparison function must return an integer.Return Value: This function returns True on success or False on failure.Below programs illustrate the arsort() function in PHP.Program 1:<?php// PHP program to ilustrate// arsort() function// Input differet array elements$arr = array(\"0\" => \"GeeksforGeeks\",             \"1\" => \"Practice\",             \"2\" => \"Contribute\",             \"3\" => \"Java\",             \"4\" => \"Videos\",             \"5\" => \"Report Bug\",             \"6\" => \"Article\",             \"7\" => \"Sudo Placement\"        );// Implementation of arsort()arsort($arr);// for-Loop  for displaying resultforeach ($arr as $key => $val) {    echo \"[$key] = $val\";    echo\"\\n\";}?>Output:  [4] = Videos  [7] = Sudo Placement  [5] = Report Bug  [1] = Practice  [3] = Java  [0] = GeeksforGeeks  [2] = Contribute  [6] = ArticleProgram 2:<?php// PHP program to ilustrate// arsort() function// Input differet array elements$arr = array(\"a\" => 11,             \"b\" => 22,             \"d\" => 33,             \"n\" => 44,             \"o\" => 55,             \"p\" => 66,             \"p\" => 77,             \"q\" => 88,        );// Implementation of arsort()arsort($arr);// for-Loop  for displaying resultforeach ($arr as $key => $val) {    echo \"[$key] = $val\";    echo\"\\n\";}?>Output:  [q] = 88  [p] = 77  [o] = 55  [n] = 44  [d] = 33  [b] = 22  [a] = 11Related Articles:");create(getIdByTitle(this.context,"Arrays"),"PHP | asort() Function","The asort() function is an inbuilt function in PHP which is used to sort an array according to values. It sorts in a way that relation between indices and values is maintained. By default it sorts in ascending order of values.Syntax:bool asort( $array, $sorting_type )Parameters: This function accepts two parameters as mentioned above and described below:$array: This parameter specifies the array which to be sort. It is a mandatory parameter.$sorting_type: This is an optional parameter. There are different sorting types which are discussed below:SORT_REGULAR: The value of $sorting_type is SORT_REGULAR then items are compare normally.SORT_NUMERIC: The value of $sorting_type is SORT_NUMERIC then items are compares numerically.SORT_STRING: The value of $sorting_type is SORT_STRING then items are compares as string.SORT_LOCALE_STRING: The value of $sorting_type is SORT_STRING then items are compares as string, based on current locale.Return Value: This function returns True on success or False on failure.Below programs illustrate the asort() function in PHP.Program 1:<?php// PHP program to ilustrate// asort() function// Input differet array elements$arr = array(\"0\" => \"Web Technology\",            \"1\" => \"Machine Learing\",            \"2\" => \"GeeksforGeeks\",            \"3\" => \"Computer Graphics\",            \"4\" => \"Videos\",            \"5\" => \"Report Bug\",            \"6\" => \"Article\",            \"7\" => \"Sudo Placement\",            \"8\" => \"SContribute\",            \"9\" => \"Reset\",            \"10\" => \"Copy\",            \"11\" => \"IDE\",            \"12\" => \"Gate Note\",        );// Implementation of asort()asort($arr);// for-Loop for displaying resultforeach ($arr as $key => $val) {    echo \"[$key] = $val\";    echo\"\\n\";}?>Output:  [6] = Article  [3] = Computer Graphics  [10] = Copy  [12] = Gate Note  [2] = GeeksforGeeks  [11] = IDE  [1] = Machine Learing  [5] = Report Bug  [9] = Reset  [8] = SContribute  [7] = Sudo Placement  [4] = Videos  [0] = Web TechnologyProgram 2:<?php// PHP program to ilustrate// asort() function// Input differet array elements$arr = array(\"a\" => 11,            \"b\" => 22,            \"d\" => 33,            \"n\" => 44,            \"o\" => 55,            \"p\" => 66,            \"r\" => 77,            \"s\" => 2,            \"q\" => -11,            \"t\" => 3,            \"u\" => 1000,            \"z\" => 1,        );// Implementation of asort()asort($arr);// for-Loop for displaying resultforeach ($arr as $key => $val) {    echo \"[$key] = $val\";    echo\"\\n\";}?>Output:  [q] = -11  [z] = 1  [s] = 2  [t] = 3  [a] = 11  [b] = 22  [d] = 33  [n] = 44  [o] = 55  [p] = 66  [r] = 77  [u] = 1000Related Articles:");create(getIdByTitle(this.context,"Arrays"),"PHP | compact() Function","The compact() function is an inbuilt function in PHP and it is used to create an array using variables. This function is opposite of extract() function. It creates an associative array whose keys are variable names and their corresponding values are array values.Syntax:  array compact(\"variable 1\", \"variable 2\"...)Parameters: This function accepts a variable number of arguments separated by comma operator (‘,’). These arguments are of string data type and specify the name of variables which we want to use to create the array. We can also pass an array as an argument to this function, in that case, all of the elements in the array passed as a parameter will be added to the output array.Return Value: This fuction returns an array with all the variables added to it.Note: Any string passed as a parameter which does not match with a valid variable name will be skipped and will not be added to the array.Examples:  Input : $AS=\"ASSAM\", $OR=\"ORISSA\", $KR=\"KERELA\"          compact(\"AS\", \"OR\", \"KR\");  Output :  Array  (      [AS] => ASSAM      [OR] => ORISSA      [KR] => KERELA  )Below program illustrate the working of compact() function in PHP:Example-1:<?php// PHP program to illustrate compact()// Function$AS = \"ASSAM\";$OR = \"ORISSA\";$KR = \"KERELA\";$stats = compact(\"AS\", \"OR\", \"KR\");print_r($states);?>Output:  Array  (      [AS] => ASSAM      [OR] => ORISSA      [KR] => KERELA  )Example-2:<?php// PHP program to illustrate compact()// function when an array is passed as// a parameter$username = \"max\";$password = \"many\";$age = \"31\";$NAME = array(\"username\", \"password\");$result = compact($NAME, \"age\");print_r($result);?>Output:  Array  (      [username] => max      [password] => many      [age] => 31  )");create(getIdByTitle(this.context,"Arrays"),"PHP | count() Function","This inbuilt function of PHP is used to count the current elements in the array. The function might return 0 for the variable that has been set to an empty array. Also for the variable which is not set the function returns 0.Syntax:count($array, mode)Parameters: The function generally takes one parameter that is the array for which the elements is needed to be counted. But in addition, the function can take a parameter mode which tells the function to count element in which normal or recursive mode.$array (mandatory) : Refers to the array, whose elements are needed to be counted.mode (optional) : This is used to set the mode of the function. The parameter can take two possible values, either 0 or 1. 1 generally indicates to count the values of the array recursively. This helps in counting the multidimensional array. The default value is 0 or False.Return Values: The function returns the number of elements in an array.Below programs will help in understanding the working of count() function.Program 1: Counting normally, that is passing mode as 0 or not passing the parameter mode.<?php// PHP programme to illustrate working of count()$array = array(\"Aakash\", \"Ravi\", \"Prashant\", \"49\", \"50\");print_r(count($array));?>Output:5Program 2: Counting recursively or passing mode as 1.<?php// PHP program to illustrate working of count()$array = array(\'names\' => array(\'Aakash\', \'Ravi\', \'Prashant\'),               \'rollno\' => array(\'5\', \'10\', \'15\'));// recursive count - mode as 1echo(\"Recursive count: \".count($array,1).\"\\n\");// normal count - mode as 0echo(\"Normal count: \".count($array,0).\"\\n\");?>Output:  Recursive count: 8  Normal count: 2");create(getIdByTitle(this.context,"Arrays"),"PHP | current() Function","The current() function is an inbuilt function in PHP.It is used to return the value of the element in an array which the internal pointer is currently pointing to.The current() function does not increment or decrement the internal pointer after returning the value.In PHP, all arrays have an internal pointer. This internal pointer points to some element in that array which is called as the current element of the array.Usually, the current element is the first inserted element in the array.Syntax:current($rray)Parameters: The current() function accepts a single parameter $array. It is the array of which we want to find the current element.Return Values: It returns the value of the element in the array which the internal pointer is currently pointing to. If the array is empty then the current() function returns FALSE.Examples:  Input : current(array(\"John\", \"b\", \"c\", \"d\"))  Output : John  Explanation : Here as we see that input array contains   many elements and the ouput is \"John\" because first   element is John and current() function returns   the element to which internal pointer is currently  pointing.    Input: current(array(\"abc\", \"123\", \"7\"))  Output: abcBelow programs illustrate the pos() function in PHP:Program 1:<?php// input array$arr = array(\"Ram\", \"Shita\", \"Geeta\");// Here current function returns the//  first element of the array.echo current($a);?>Output:  RamProgram 2:<?php$arr = array(\'Sham\', \'Mac\', \'Jhon\', \'Adwin\');// Here current element is Sham.echo current($arr).\"\\n\";// increment internal pointer to point// to next element i.e, Macecho next($arr).\"\\n\";// printing the current element as// for now current element is Mac.echo current($arr).\"\\n\";// increment internal pointer to point// to next element i.e, Jhon.echo next($arr).\"\\n\";// increment internal pointer to point// to next element i.e, Adwin.echo next($arr).\"\\n\";// printing the current element as for// now current element is Adwin.echo current($arr).\"\\n\";?>Output:  Sham  Mac  Mac  Jhon  Adwin  AdwinNote: The current() function returns False when array is empty i.e, do not contain any elements and also it return false when internal pointer go out of the bound i.e beyond the end of the last element.");create(getIdByTitle(this.context,"Arrays"),"PHP | end() Function","The end() function is an inbuilt function in PHP and is used to find the last element of the given array. The end() function changes the internal pointer of an array to point to the last element and returns the value of the last element.Syntax:end($array)Parameters: This function accepts a single parameter $array. It is the array of which the last element we want to find.Return Value: It returns the value of the last element of the array on success but FALSE on failure i.e, when the array is empty.Examples:  Input: array(\'Ram\', \'Shita\', \'Geeta\')  Output: Geeta  Explanation: Here input array contain many   elements but output is Geeta i.e, last element   of the array as the end() function returns the  last element of an array.Below programs illustrate the end() function in PHP:Program 1:<?php// input array$arr = array(\'Ram\', \'Shita\', \'Geeta\');// end function print the last// element of the array.echo end($arr);?>Output:  GeetaProgram 2:<?php// input array$arr = array(\'1\', \'3\', \'P\');// end function print the last// element of the array.echo end($arr).\"\\n\";// end() updates the internal pointer// to point to last element as the// current() function will now also// return last elementecho current($arr);?>Output:  P  P");create(getIdByTitle(this.context,"Arrays"),"PHP | extract() Function","The extract() Function is an inbuilt function in PHP. The extract() function does array to variable conversion. That is it converts array keys into variable names and array values into variable value. In other words, we can say that the extract() function imports variables from an array to the symbol table.Syntax:  int extract($input_array, $extract_rule, $prefix)Parameters: The extract() function accepts three parameters, out of which one is compulsory and other two are optional. All three parameters are described below:$input_array: This parameter is required. This specifies the array to use.$extract_rule: This parameter is optional. The extract() function checks for invalid variable names and collisions with existing variable names. This parameter specifies how invalid and colliding names will be treated. This parameter can take the following values:EXTR_OVERWRITE: This rule tells that if there is a collision, overwrite the existing variable.EXTR_SKIP: This rule tells that if there is a collision, don’t overwrite the existing variable.EXTR_PREFIX_SAME: This rule tells that if there is a collision then prefix the variable name according to $prefix parameter.EXTR_PREFIX_ALL: This rule tells that prefix all variable names accoring to $prefix parameter.EXTR_PREFIX_INVALID: This rule tells that only prefix invalid/numeric variable names according to parameter $prefix.EXTR_IF_EXISTS: This rule tells that to overwrite the variable only if it already exists in the current symbol table, otherwise do nothing.EXTR_PREFIX_IF_EXISTS: This rule tells to create prefixed variable names only if the non-prefixed version of the same variable exists in the current symbol table.$prefix: This parameter is optional. This parameter specifies the prefix. The prefix is automatically separated from the array key by an underscore character. Also this parameter is required only when the parameter $extract_rule is set to EXTR_PREFIX_SAME, EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID or EXTR_PREFIX_IF_EXISTS.Return Value: The return value of extract() function is an integer and it represents the number of variables successfully extracted or imported from the array.Examples:  Input : array(\"a\" => \"one\", \"b\" => \"two\", \"c\" => \"three\")  Output :$a = \"one\" , $b = \"two\" , $c = \"three\"  Explanation: The keys in the input array will become the   variable names and their values will be assigned to these  new variables.Below programs illustrates working of extract() in PHP:Example-1:<?php    // input array    $state = array(\"AS\"=>\"ASSAM\", \"OR\"=>\"ORRISA\", \"KR\"=>\"KERELA\");    extract($state);    // after using extract() function    echo\"\\$AS is $AS\\n\\$KR is $KR\\n\\$OR is $OR\";?>Output:  $AS is ASSAM  $KR is KERELA  $OR is ORRISAExample-2:<?php    $AS=\"Original\";    $state = array(\"AS\"=>\"ASSAM\", \"OR\"=>\"ORRISA\", \"KR\"=>\"KERELA\");    // handling collisions with extract() function    extract($state, EXTR_PREFIX_SAME, \"dup\");    echo\"\\$AS is $AS\\n\\$KR is $KR\\n\\$OR if $OR \\n\\$dup_AS = $dup_AS\";?>Output:  $AS is Original  $KR is KERELA  $OR is ORRISA   $dup_AS = ASSAM");create(getIdByTitle(this.context,"Arrays"),"PHP | in_array() Function","The in_array() function is an inbuilt function in PHP. The in_array() function is used to check whether a given value exists in an array or not. It returns TRUE if the given value is found in the given array, and FALSE otherwise.syntax:bool in_array ( $val, $array_name ,$mode )Parameters: The in_array() function accepts three parameters, out of which two are compulsory and other one is optional. All three parameters are described below:$val: This is a required parameter which specifies the element or value to be searched in the given array. This parameter can be of mixed type i.e, it can be of string type or integer type or any other type. If this parameter is of string type then the search will be performed in case-sensitive manner.$array_name: This is a required parameter and it specifies the array in which we want to search.$mode: This is an optional parameter and is of boolean type. This parameter specifies the mode in which we want to perform the search. If it is set to TRUE, then the in_array() function searches for the value with the same type of value as specified by $val parameter. The default value of this parameter is FALSE.Return Value: The in_array() function returns a boolean value i.e, TRUE if the value $val is found in the array otherwise it returns FALSE.Below programs illustrate The in_array() function in PHP:Program 1: The below program performes the search using in_search() function in non-strict mode. That is, the last parameter $mode is set to false which is it’s default value. The value to be searched is of string type whereas this value in the array is of integer type still the in_array() function returns true as the search is in non-strict mode.<?php$marks = array(100, 65, 70, 87);if (in_array(\"100\", $marks))  {  echo \"found\";  }else  {  echo \"not found\";  }?>Output:foundProgram 2: The below program performes the search using in_array() function in strict mode. That is, the last parameter $mode is set to true and the function will now also check the type of values.<?php$name = array(\"ravi\", \"ram\", \"rani\", 87);if (in_array(\"ravi\", $name, TRUE))  {  echo \"found \\n\";  }else  {  echo \"not found \\n\";  }if (in_array(87, $name, TRUE))  {  echo \"found \\n\";  }else  {  echo \"not found \\n\";  }if (in_array(\"87\", $name, TRUE))  {  echo \"found \\n\";  }else  {  echo \"not found \\n\";  }?>Output:found  found  not found");create(getIdByTitle(this.context,"Arrays"),"PHP | key() Function","The key() function is an inbuilt function in PHP which is used to return the index of the element of a given array to which the internal pointer is currently pointing. The current element may be starting or next element which depends on the cursor position. By default cursor position is at zero index i.e, at starting element of the given array.Syntax:key($array)Parameters: This function accepts a single parameter $array. It is the array for which we want to find the current element pointed by the internal pointer.Return Value: It returns the index of current element of the given array. If the input array is empty then the key() function will return NULL.Below programs illustrate the key() function in PHP:Program 1:<?php// input array$arr = array(\"Ram\", \"Geeta\", \"Shita\", \"Ramu\");// Here key function prints the index of// current element of the array.echo \"The index of the current element of\".                    \" the array is: \" . key($arr);?>Output:  The index of the current element of the array is: 0Program 2:<?php// input array$arr=array(\"Ram\", \"Geeta\", \"Shita\", \"Ramu\");// next function increase the internal pointer// to point next to the current element.next($arr);// Here key function prints the index of// the current element of the array.echo \"The index of the current element of\".                \" the array is: \" . key($arr);?>Output:  The index of the current element of the array is: 1Progam 3:<?php// input array$arr = array(\"0\", \"F\", \"D\", \"4\");// using next() function to increment// internal pointer two timesnext($arr);next($arr);// Here key function prints the index of// element of the current array position.echo \"The index of the current element of\".                \" the array is: \" . key($arr);?>Output:  The index of the current element of the array is: 2");create(getIdByTitle(this.context,"Arrays"),"PHP | krsort() Function","The krsort() function is an inbuilt function in PHP which is used to sort an array by key in reverse order according to its index values. It sorts in a way that relation between indices and values is maintained.Syntax:bool krsort( $array, $sorting_type )Parameters: This function accepts two parameters as mentioned above and described below:$array: This parameter specifies the array which to be sort. It is a mandatory parameter.$sorting_type: This is an optional parameter. There are different sorting types which are discussed below:SORT_REGULAR: The value of $sorting_type is SORT_REGULAR then items are compare normally.SORT_NUMERIC: The value of $sorting_type is SORT_NUMERIC then items are compares numerically.SORT_STRING: The value of $sorting_type is SORT_STRING then items are compares as string.SORT_LOCALE_STRING: The value of $sorting_type is SORT_STRING then items are compares as string, based on current locale.Return Value: This function returns True on success or False on failure.Below programs illustrate the krsort() function in PHP.Program 1:<?php// PHP program to ilustrate// krsort()function// Input differet array elements$arr = array(\"0\" =>\"Technology\",             \"1\" =>\"Machine\",             \"2\" =>\"GeeksforGeeks\",             \"3\" =>\"Graphics\",             \"4\" =>\"Videos\",             \"5\" =>\"Report\",             \"6\" =>\"Article\",             \"7\" =>\"Placement\",             \"8\" =>\"Contribute\",             \"9\" =>\"Reset\",             \"10\" =>\"Copy\",        );// Implementation of krsort()krsort($arr);// for-Loop for displaying resultforeach ($arr as $key => $val) {    echo \"[$key] = $val\";    echo\"\\n\";}?>Output:  [10] = Copy  [9] = Reset  [8] = Contribute  [7] = Placement  [6] = Article  [5] = Report  [4] = Videos  [3] = Graphics  [2] = GeeksforGeeks  [1] = Machine  [0] = TechnologyProgram 2:<?php// PHP program to ilustrate// krsort function// Input differet array elements$arr = array(\"a\" => 11,             \"b\" => 22,             \"d\" => 33,             \"n\" => 44,             \"o\" => 55,             \"p\" => 66,             \"r\" => 77,             \"s\" => 2,             \"q\" => -11,             \"t\" => 3,             \"u\" => 1000,             \"z\" => 1,        );// Implementation of krsortkrsort($arr);// for-Loop for displaying resultforeach ($arr as $key => $val) {    echo \"[$key] = $val\";    echo\"\\n\";}?>Output:  [z] = 1  [u] = 1000  [t] = 3  [s] = 2  [r] = 77  [q] = -11  [p] = 66  [o] = 55  [n] = 44  [d] = 33  [b] = 22  [a] = 11Related Articles:");create(getIdByTitle(this.context,"Arrays"),"PHP | ksort() Function","The ksort() function is an inbuilt function in PHP which is used to sort an array in ascending order according to its key values. It sorts in a way that relation between indices and values is maintained.Syntax:bool ksort( $array, $sorting_type )Parameters: This function accepts two parameters as mentioned above and described below:$array: This parameter specifies the array which needs to be sorted. It is a mandatory parameter.$sorting_type: This is an optional parameter. There are different sorting types which are discussed below:SORT_REGULAR: The value of $sorting_type is SORT_REGULAR then items are compare normally.SORT_NUMERIC: The value of $sorting_type is SORT_NUMERIC then items are compared numerically.SORT_STRING: The value of $sorting_type is SORT_STRING then items are compared as a string.SORT_LOCALE_STRING: The value of $sorting_type is SORT_STRING then items are compares as string, based on current locale.Return Value: This function returns True on success or False on failure.Below programs illustrate the ksort() function in PHP.Program 1:<?php// PHP program to illustrate// ksort()function// Input differet array elements$arr = array(\"13\" =>\"ASP.Net\",             \"12\" =>\"C#\",             \"11\" =>\"Graphics\",             \"4\" =>\"Video Editing\",             \"5\" =>\"Photoshop\",             \"6\" =>\"Article\",             \"4\" =>\"Placement\",             \"8\" =>\"C++\",             \"7\" =>\"XML\",             \"10\" =>\"Android\",             \"1\" =>\"SQL\",             \"2\" =>\"PL/Sql\",             \"3\" =>\"End\",             \"0\" =>\"Java\",        );// Implementation of ksort()ksort($arr);// for-Loop for displaying resultforeach ($arr as $key => $val) {    echo \"[$key] = $val\";    echo\"\\n\";}?>Output:  [0] = Java  [1] = SQL  [2] = PL/Sql  [3] = End  [4] = Placement  [5] = Photoshop  [6] = Article  [7] = XML  [8] = C++  [10] = Android  [11] = Graphics  [12] = C#  [13] = ASP.NetProgram 2:<?php// PHP program to illustrate// ksort function// Input differet array elements$arr = array(\"z\" => 11,             \"y\" => 22,             \"x\" => 33,             \"n\" => 44,             \"o\" => 55,             \"b\" => 66,             \"a\" => 77,             \"m\" => 2,             \"q\" => -11,             \"i\" => 3,             \"e\" => 56,             \"d\" => 1,        );// Implementation of ksortksort($arr);// for-Loop for displaying resultforeach ($arr as $key => $val) {    echo \"[$key] = $val\";    echo\"\\n\";}?>Output:  [a] = 77  [b] = 66  [d] = 1  [e] = 56  [i] = 3  [m] = 2  [n] = 44  [o] = 55  [q] = -11  [x] = 33  [y] = 22  [z] = 11Related Articles:");create(getIdByTitle(this.context,"Arrays"),"PHP | list() Function","The list() function is an inbuilt function in PHP which is used to assign array values to multiple variables at a time. This function will only work on numerical arrays. When the array is assigned to multiple values, then the first element in the array is assigned to the first variable, second to the second variable and so on, till the number of variables. The number of variables cannot exceed the length of the numerical array.Syntax:list($variable1, $variable2....)Parameter: It accepts a list of variables separated by spaces. These variables are assigned values. The first variable is mandatory.Return Value: The function returns the assigned array to the multiple variables passed. It does not assign a value to the $variableM if m>n, where n is the length of the array.Below programs illustrate the list() function in PHP:Program 1: Program to demonstrate the use of list() function.<?php// PHP program to demonstrate the use of list() function$array = array(1, 2, 3, 4);// assign array values to variableslist($a, $b, $c) = $array;// print all assigned valuesecho \"a =\", ($a), \"\\n\";echo \" b =\", ($b), \"\\n\";echo \" c =\", ($c), \"\\n\";// perform multiplication of// those assigned numbersecho \"a*b*c =\", ($a*$b*$c);?>Output: a =1   b =2   c =3  a*b*c =6Program 2: Program to demonstrate the runtime error of list() function.<?php// PHP program to demonstrate the// runtime error of list() function$array = array(1, 2, 3, 4);// assign array values to variableslist($a, $b, $c, $d, $e) = $array;?>Output:  PHP Notice:  Undefined offset: 4 in   /home/619f1441636b952bbd400f1e9e8e3d0c.php on line 6");create(getIdByTitle(this.context,"Arrays"),"PHP | natcasesort() Function","The natcasesort() function is an inbuilt function in PHP which is used to sort an array by using a “natural order” algorithm. The natural order tells the order to be used as a normal human being would use. That is, it does not check the type of value for comparison. For example, in string representation 30 is less than 7 according to the standard sorting algorithm as 3 comes before 7 lexicographically. But in natural order 30 is greater than 7. Also, the natcasesort() function is case insensitive.Syntax:bool natcasesort($array )Parameters: This function accepts a single parameter $array. It is the array which natcasesort() function is going to sort.Return Value It returns a boolean value i.e., TRUE on success and FALSE on failure.Below programs illustrate the natcasesort() function in PHP:Program 1:<?php// input array$arr1 = array(\"Gfg12.jpeg\", \"gfg10.jpeg\", \"Gfg2.jpeg\", \"gfg1.jpeg\");$arr2 = $arr1;// sorting using sort function.sort($arr1);echo \"Standard sorting\\n\";print_r($arr1);// Sorting using natcasesort() function.natcasesort($arr2);echo \"Natural order case insensitve: \";print_r($arr2);?>Output:  Standard sorting:  Array  (      [0] => Gfg12.jpeg      [2] => Gfg2.jpeg      [3] => gfg1.jpeg      [1] => gfg10.jpeg  )    Natural order case insensitve:   Array  (      [3] => gfg1.jpeg      [2] => Gfg2.jpeg      [1] => gfg10.jpeg      [0] => Gfg12.jpeg  )Program 2:<?php// input array$arr = array(\"Gfg15.jpeg\", \"gfg10.jpeg\", \"Gfg1.jpeg\",                        \"gfg22.jpeg\", \"Gfg2.jpeg\");// Sorting using natcasesort() function.natcasesort($arr);print_r($arr);?>Output:  Array  (      [2] => Gfg1.jpeg      [4] => Gfg2.jpeg      [1] => gfg10.jpeg      [0] => Gfg15.jpeg      [3] => gfg22.jpeg  )");create(getIdByTitle(this.context,"Arrays"),"PHP | natsort() Function","The natsort() function is an inbuilt function in PHP which is used to sort an array by using a “natural order” algorithm. The natural order tells the order to be used as a normal human being would use. That is, it does not check the type of value for comparison. For example, in string representation 30 is less than 7 according to the standard sorting algorithm as 3 comes before 7 lexicographically. But in natural order 30 is greater than 7.Syntax:bool natsort(array)Parameters: This function accepts a single parameter $array. It is the array which natsort() function is going to sort.Return Value: It returns a boolean value i.e., TRUE on success and FALSE on failure.Below programs illustrate the natsort() function in PHP:Program 1:<?php// input array$arr1 = array(\"12.jpeg\", \"10.jpeg\", \"2.jpeg\", \"1.jpeg\");$arr2 = $arr1;// sorting using sort function.sort($arr1);// printing sorted element.echo \"Standard sorting\\n\";print_r($arr1);// sorting using natsort() function.natsort($arr2);// printing sorted element.echo \"\\nNatural order sorting\\n\";print_r($arr2);?>Output:  Standard sorting  Array  (      [3] => 1.jpeg      [1] => 10.jpeg      [0] => 12.jpeg      [2] => 2.jpeg  )    Natural order sorting  Array  (      [3] => 1.jpeg      [2] => 2.jpeg      [1] => 10.jpeg      [0] => 12.jpeg  )Program 2:<?php// input array$arr = array(\"gfg15.jpeg\", \"gfg10.jpeg\", \"gfg1.jpeg\",                           \"gfg22.jpeg\", \"gfg2.jpeg\");// sorting using natsort() function.natsort($arr);// printing sorted element.echo \"\\nNatural order sorting\\n\";print_r($arr);?>Output:  Natural order sorting  Array  (      [2] => gfg1.jpeg      [4] => gfg2.jpeg      [1] => gfg10.jpeg      [0] => gfg15.jpeg      [3] => gfg22.jpeg  )");create(getIdByTitle(this.context,"Arrays"),"PHP | next() Function","The next() function is an inbuilt function in PHP and does the following operations:It is used to return the value of the next element in an array which the internal pointer is currently pointing to. We can know the current element by function.The next() function increments the internal pointer after returning the value.In PHP, all arrays have an internal pointer. This internal pointer points to some element in that array which is called as the current element of the array.Usually, the next element at the beginning is the second inserted element in the array.Syntax:next($array)Parameter: It accepts only one parameter $array. This parameter is mandatory. It is the array in which we need to find the next element.Return Value: The function returns the value of the next element in an array of which the internal pointer is currently pointing to. It returns FALSE if there is no element at next. Initially the next() function returns the second inserted element.Examples:  Input : array = [1, 2, 3, 4]   Output : 2     Input : array = [1, 2, 3, 4], next() function executed two times        Output : 2           3Below programs illustrate the next() function in PHP:Program 1:<?php// PHP Program to demonstrate the// first position of next() function$array = array(\"geeks\", \"Raj\", \"striver\",                         \"coding\", \"RAj\");echo next($array);?>Output:RajProgram 2:<?php// PHP Program to demonstrate the// working of next() function$array = array(\"geeks\", \"Raj\", \"striver\", \"coding\", \"RAj\");// prints the initial current element (geeks)echo current($array), \"\\n\";// prints the initial next element (Raj)// moves the pointer forwardecho next($array), \"\\n\";// prints the  current element (Raj)echo current($array), \"\\n\";// prints the  next element (striver)// moves the pointer forwardecho next($array), \"\\n\";// prints the  current element (striver)echo current($array), \"\\n\";// prints the  next element (coding)// moves the pointer forwardecho next($array), \"\\n\";// prints the  current element (coding)echo current($array), \"\\n\";?>Output:  geeks  Raj  Raj  striver  striver  coding  coding");create(getIdByTitle(this.context,"Arrays"),"PHP | pos() Function","The pos() is an inbuilt function in PHP which is used to return the value of the element in an array which the internal pointer is currently pointing to. The pos() function does not increment or decrement the internal pointer after returning the value. In PHP all arrays have an internal pointer. This internal pointer points to some element in that array which is called as the current element of the array. Usually, the current element is the first inserted element in the array.Syntax:pos($array)Parameters: The pos() function accepts a single parameter $array. It is the array of which we want to find the current element.Return Value: It returns the value of the element in the array which the internal pointer is currently pointing to. If the array is empty then the pos() function returns FALSE.Below programs illustrate the pos() function in PHP:Program 1:<?php    // input array    $arr = array(\"Ram\", \"Shyam\", \"Geeta\", \"Rita\");    // Here pos() function returns current element.    echo pos($arr).\"\\n\";    // next() function increments internal pointer    // to point to next element i.e, Shyam.    echo next($arr).\"\\n\";    // Printing current position element.    echo pos($arr).\"\\n\";    // Printing previous element of the current one.    echo prev($arr).\"\\n\";    // Printing end element of the array    echo end($arr).\"\\n\";    // Printing current position element.    echo pos($arr).\"\\n\";?>Output:  Ram  Shyam  Shyam  Ram  Rita  RitaProgram 2:<?php    // input array    $arr = array(\"P\", \"6\", \"M\", \"F\");    // Here pos() function returns current element.    echo pos($arr).\"\\n\";    // next() function increments internal pointer    // to point to next element i.e, 6.    echo next($arr).\"\\n\";    // Printing current position element.    echo pos($arr).\"\\n\";    // Printing previous element of the current one.    echo prev($arr).\"\\n\";    // Printing end element of the array    echo end($arr).\"\\n\";    // Printing current position element.    echo pos($arr).\"\\n\";?>Output:  P  6  6  P  F  F");create(getIdByTitle(this.context,"Arrays"),"PHP | prev() Function","The prev() function is an inbuilt function in PHP.It is used to return the immediate previous element from an array of the element which is currently pointed by the internal pointer.We have already discussed function in PHP.The current() function is used to return the value of the element which is currently pointed by the internal pointer whereas the prev() function decrements or make the internal pointer to point to the previous element of the currently pointed element.Syntax:prev($array)Parameters: This function accepts a single parameter $array. It is the array of which we want to find the current element.Return Value: It returns the value of the element in the array which is just before the element which the internal pointer is currently pointing to. If the array is empty then the prev() function returns FALSE.Below programs illustrate the prev() function in PHP:Program 1:<?php// input array$arr = array(\"Ram\", \"Shita\", \"Geeta\", \"Shyam\");// current function print the// 1st element of the array.echo current($arr) .\"\\n\";// next function prints the next// element of the current one.echo next($arr).\"\\n\";// prev function will print the previous element// of the current one. As right now current element// is Shita so the previous element will be Ramecho prev($arr);?>Output:  Ram  Shita  RamProgram 2:<?php// input array$arr = array(\'a\', \'2\', \'z\', \'8\');// current function print the// 1st element of the array.echo current($arr) .\"\\n\";// next function print the next// element of the current one.echo next($arr).\"\\n\";// again next function print the// next element of the current one.echo next($arr).\"\\n\";// prev function will print the previous element// of the current one. As right now current// element is \'z\' so the previous element will be \'2\'echo prev($arr);?>Output:  a  2  z  2");create(getIdByTitle(this.context,"Arrays"),"PHP | range() Function","The range() function is an inbuilt function in PHP which is used to create an array of elements of any kind such as integer, alphabets within a given range(from low to high) i.e, list’s first element is considered as low and last one is considered as high.Syntax:array range(low, high, step)Parameters: This function accepts three parameters as described below:low: It will be the first value in the array generated by range() function.high: It will be the last value in the array generated by range() function.step: It is used when the increment used in the range and it’s default value is 1.Return Value: It returns an array of elements from low to high.Examples:  Input : range(0, 6)  Output : 0, 1, 2, 3, 4, 5, 6  Explanation: Here range() function print 0 to   6 because the parameter of range function is 0   as low and 6 as high. As the parameter step is   not passed, values in the array are incremented   by 1.    Input : range(0, 100, 10)  Output : 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100  Explanation: Here range() function accepts   parameters as 0, 100, 10 which are values of low,   high, step respectively so it returns an array with   elements starting from 0 to 100 incremented by 10.Below programs illustrate range() function in PHP:Program 1:<?php// creating array with elements from 0 to 6// using range function$arr = range(0,6);// printing elements of arrayforeach ($arr as $a) {    echo \"$a \";}?>Output:0 1 2 3 4 5 6Program 2:<?php// creating array with elements from 0 to 100// with difference of 20 between consecutive// elements using range function$arr = range(0,100,20);// printing elements of arrayforeach ($arr as $a) {    echo \"$a \";}?>Output:0 20 40 60 80 100Program 3:<?php// creating array with elements from a to j// using range function$arr = range(\'a\',\'j\');// printing elements of arrayforeach ($arr as $a) {    echo \"$a \";}?>Output:a b c d e f g h i jProgram 4:<?php// creating array with elements from p to a// in reverse order using range function$arr = range(\'p\',\'a\');// printing elements of arrayforeach ($arr as $a) {    echo \"$a \";}?>Output:p o n m l k j i h g f e d c b a");create(getIdByTitle(this.context,"Arrays"),"PHP | reset() Function","The reset() function is an inbuilt function in PHP.This function is used to move any array’s internal pointer to the first element of that array.While working with arrays, it may happen that we modify the internal pointer of an array using different functions like , , etc.The reset() function resets the internal pointer to point to the first element of the array.Syntax:reset($array)Parameters: This function accepts a single parameter $array. It is the array for which we want to reset the internal pointer to point to the first element again.Return Value: It returns the first element of the array on success, or FALSE if the array is empty i.e, the array does not contain any element.Below programs illustrate the reset() function in PHP:Program 1:<?php// input array$arr = array(\'Ram\', \'Rahim\', \'Geeta\', \'Shita\');// here reset() function Moves the internal pointer to the// first element of the array, which is Ram and also returns// the first element$res = reset($arr);print \"$res\";?>Output:RamProgram 2:<?php// Input array$arr = array(\'Delhi\', \'Kolkata\', \'London\');// getting current element using current()// functionprint current($arr).\"\\n\";// move internal pointer to next elementnext($arr);print current($arr).\"\\n\";// now reset() is called so that the internal pointer// moves to the first element again i.e, Delhi.reset($arr);print current($arr);?>Output:  Delhi  Kolkata  Delhi");create(getIdByTitle(this.context,"Arrays"),"PHP | rsort() Function","The rsort() is an inbuilt function in PHP and is used to sort the array in descending order i.e, greatest to smallest. It sorts the actual array and hence changes are reflected in the array itself. The function provides us with 6 sorting types, according to which the array can be sorted.Syntax:rsort($array, sorting_type)Parameters:$array: This parameter specifies the array which we want ot sort.sorting_type: This is an optional parameter. This parameter specifies the mode in which the sort operation will be performed on the input array. There are 6 sorting types which are described below:SORT_REGULAR – When we pass 0 or SORT_REGULAR in the sorting_type parameter, the items in the array are compared normallySORT_NUMERIC – When we pass 1 or SORT_NUMERIC in the sorting_type parameter, the items in the array are compared numericallySORT_STRING – When we pass 2 or SORT_STRING in the sorting_type parameter, the items in the array are compared string-wiseSORT_LOCALE_STRING – When we pass 3 or SORT_LOCALE_STRING in the sorting_type parameter, the items in the array are compared as string based on current localeSORT_NATURAL – When we pass 4 or SORT_NATURAL in the sorting_type parameter, the items in the array are compared as string using natural orderingSORT_FLAG_CASE – When we pass 5 or SORT_FLAG_CASE in the sorting_type parameter, the items in the array are compared as strings. The items are treated as case-insensitive and then compared. It can be used using | (bitwise operator) with SORT_NATURAL or SORT_STRING.Return Value: It returns a boolean value, TRUE on success and False in failure. It sorts the original array in descending which is passed as a parameter to it.Examples:  Input : $array = [3, 4, 1, 2]   Output :   Array  (      [0] => 4      [1] => 3      [2] => 2      [3] => 1  )      Input : $array = [\"geeks2\", \"raj1\", \"striver3\", \"coding4\"]  Output :  Array  (      [0] => striver3       [1] => raj1       [2] => geeks2       [3] => coding4  )Below programs illsutrate the rsort() function in PHP:Program 1: Program to demonstrate the use of rsort() function in descending order.<?php// PHP program to demonstrate the use of rsort() function$array = array(3, 4, 2, 1);// sorting fucntion usedrsort($array);//prints the sorted arrayprint_r($array);?>Output:Array  (      [0] => 4      [1] => 3      [2] => 2      [3] => 1  )Program 2: Program to demonstrate the use of rsort() function to sort the string case-sensitively in descending order.<?php// PHP program to demonstrate the use of rsort() function// sorts the string case-sensitively$array = array(\"geeks\", \"Raj\", \"striver\", \"coding\", \"RAj\");// sorting fucntion used, sorts the string case-sensitivelyrsort($array, SORT_STRING);// prints the sorted arrayprint_r($array);?>Output:Array  (      [0] => striver      [1] => Raj      [2] => RAj      [3] => geeks      [4] => coding  )Program 3 : Program to demonstrate the use of rsort() function to sort the string case-insensitively in descending order.<?php// PHP program to demonstrate the use of sort() function// sorts the string case-insensitively$array = array(\"geeks\", \"Raj\", \"striver\", \"coding\", \"RAj\");// sorting fucntion used, sorts the// string case-insensitivelyrsort($array, SORT_STRING | SORT_FLAG_CASE);// prints the sorted arrayprint_r($array);?>Output:Array  (      [0] => striver      [1] => Raj      [2] => RAj      [3] => geeks      [4] => coding  )");create(getIdByTitle(this.context,"Arrays"),"PHP | shuffle() Function","The shuffle() Function is a builtin function in PHP and is used to shuffle or randomize the order of the elements in an array. This function assigns new keys for the elements in the array. It will also remove any existing keys, rather than just reordering the keys and assigns numeric keys starting from zero.Syntax:  boolean shuffle($array)Parameter: This function accepts a single parameter $array. It specifies the array we want to shuffle.Return Value: This function returns a boolean value i.e., either True or False. It returns TRUE on success and FALSE on failure.Note: This function will work for PHP version 4+.Examples:  Input:- array(\"a\"=>\"Ram\",                 \"b\"=>\"Shita\",                 \"c\"=>\"Geeta\",                 \"d\"=>\"geeksforgeeks\" )  Output:- array( [0] => Geeta,                  [1] => Shita,                  [2] => Ram,                  [3] => geeksforgeeks )  Explanation: Here as we can see that input contain elemets                in a order but in output order become suffled.Below programs illustrates working of shuffle() in PHP:When the input array is an associative array, then the shuffle() function will randomize the order of elements as well as assigns new keys to the elements starting from zero (0).<?php// input array contain some elements which// need to be shuffled.$a = array     (        \"a\"=>\"Ram\",        \"b\"=>\"Shita\",        \"c\"=>\"Geeta\",        \"d\"=>\"geeksforgeeks\"     );shuffle($a);print_r($a);?>Output:  Array  (      [0] => geeksforgeeks      [1] => Shita      [2] => Ram      [3] => Geeta  )When the input array is not associative then the shuffle() function will randmize the order and covert the array to an associative array with keys starting from zero (0).<?php// input array contain some elements// which need to be shuffled.$a = array     (        \"ram\",        \"geeta\",        \"blue\",        \"red\",        \"shyam\"     );shuffle($a);print_r($a);?>Output:  Array  (      [0] => red      [1] => geeta      [2] => ram      [3] => shyam      [4] => blue  )");create(getIdByTitle(this.context,"Arrays"),"PHP | sizeof() Function","The sizeof() function is a builtin function in PHP and is used to count the number of elements present in an array or any other countable object.Syntax:  int sizeof(array, mode);Parameter: This function accepts two parameters as shown in the syntax above and described below:array: This parameter represents the array containing elements which we need to count.mode: This is an optional parameter and specifies the mode of the function. It can take two different values as shown below:0: It is default, does not count all elements of multidimensional arrays1: It Counts the array recursively (counts all the elements of multidimensional arrays)Return Value: This function returns an integer value as shown in the syntax which represents the number of elements present in the array.Examples:  Input: array(1,2,3,4,5,6)  Output: 6    Input: array(1,2,5,6)  Output: 4Below programs illustrates the sizeof() funtion in PHP:Count number of elements in one dimensional array:<?php   // input array   $a=array(1,2,3,4,5,6);   // getting total number of elements   // present in the array.   $result = sizeof($a);   print($result);?>Output:6Counting number of elements in multi-dimensional array:<?php$array = array(\'name\' => array(\'Geeks\', \'For\', \'Geeks\'),              \'article\' => array(\'sizeof\', \'function\', \'PHP\'));// recursive countecho sizeof($array, 1); // output 8// normal countecho sizeof($array); // output 2?>Output:  8  2");create(getIdByTitle(this.context,"Arrays"),"PHP | sort() Function","The sort() function is an inbuilt function in PHP and is used to sort an array in ascending order i.e, smaller to greater. It sorts the actual array and hence changes are reflected in the original array itself. The function provides us with 6 sorting types, according to which the array can be sorted.Syntax:bool sort($array, sorting_type)Parameters:$array – The parameter specifies the array which we want to sort. It is a mandatory parametersorting_type – This is an optional parameter. There are 6 sorting types which are described below:SORT_REGULAR – When we pass 0 or SORT_REGULAR in the sorting_type parameter, the items in the array are compared normally.SORT_NUMERIC – When we pass 1 or SORT_NUMERIC in the sorting_type parameter, the items in the array are compared numericallySORT_STRING – When we pass 2 or SORT_STRING in the sorting_type parameter, the items in the array are compared string-wiseSORT_LOCALE_STRING – When we pass 3 or SORT_LOCALE_STRING in the sorting_type parameter, the items in the array are compared as string based on current localeSORT_NATURAL – When we pass 4 or SORT_NATURAL in the sorting_type parameter, the items in the array are compared as string using natural orderingSORT_FLAG_CASE – When we pass 5 or SORT_FLAG_CASE in the sorting_type parameter, the items in the array are compared as strings. The items are treated as case-insensitive and then compared. It can be used using | (bitwise operator) with SORT_NATURAL or SORT_STRING.Return Value: It returns a boolean value, TRUE on success and False in failure. It sorts the original array in ascending order which is passed as a parameter.Examples:  Input : $array = [3, 4, 1, 2]   Output :   Array  (      [0] => 1      [1] => 2      [2] => 3      [3] => 4  )    Input : $array = [\"geeks2\", \"raj1\", \"striver3\", \"coding4\"]  Output :  Array  (      [0] => coding4      [1] => geeks2      [2] => raj1      [3] => striver3  )Below programs illustrate the sort() function in PHP:Program 1: Program to demonstrate the use of sort() function.<?php// PHP program to demonstrate the use of sort() function$array = array(3, 4, 2, 1);// sort fucntionsort($array);// prints the sorted arrayprint_r($array);?>Output:Array  (      [0] => 1      [1] => 2      [2] => 3      [3] => 4  )Program 2 : Program to demonstrate the use of sort() function to sort the string case-sensitively.<?php// PHP program to demonstrate the use of sort() function// sorts the string case-sensitively$array = array(\"geeks\", \"Raj\", \"striver\", \"coding\", \"RAj\");// sort fucntion, sorts the string case-sensitivelysort($array, SORT_STRING);// prints the sorted arrayprint_r($array);?>Output:Array  (      [0] => RAj      [1] => Raj      [2] => coding      [3] => geeks      [4] => striver  )Program 3 : Program to demonstrate the use of sort() function to sort the string case-insensitively.<?php// PHP program to demonstrate the use// of sort() function sorts the string// case-insensitively$array = array(\"geeks\", \"Raj\", \"striver\", \"coding\", \"RAj\");// sort fucntion, sorts the// string case-insensitivelysort($array, SORT_STRING | SORT_FLAG_CASE);// prints the sorted arrayprint_r($array);?>Output:Array  (      [0] => coding      [1] => geeks      [2] => Raj      [3] => RAj      [4] => striver  )");create(getIdByTitle(this.context,"Arrays"),"PHP | uasort() Function","The uasort() function is a builtin function in PHP and is used to sort an array such that array indices maintain their correlation with the array elements they are associated with, using a user-defined comparison function.Syntax:  boolean uasort(array_name, user_defined_function);Parameter: This function accepts two parameters and are described below:array_name: This parameter represents the array which we need to sort.user_defined_function: This is a comparator function and is used to compare values and sort the array. This function returns three types of values described below:It return 0 when a=bIt return 1 when a>b and we want to sort input array in ascending order otherwise it will return -1 if we want to sort input array in descending order.It return -1 when a<b and we want to sort input array in ascending order otherwise it will return 1 if we want to sort input array in descending order.Return Value: It returns a boolean value, i.e. either TRUE on success and FALSE on failure.Examples:  Input: array         (              \"a\" => 4,              \"b\" => 2,              \"g\" => 8,              \"d\" => 6,              \"e\" => 1,              \"f\" => 9         )  Output: Array           (               [e] => 1               [b] => 2               [a] => 4               [d] => 6               [g] => 8               [f] => 9           )Below programs illustrates the uasort() function in PHP:Sorting in ascending order: To sort the input array in ascending order, in the comparator function we will return 1 when a>b or -1 when a<b. Below program illustrates this:<?php// PHP program to sort in ascending// order using uasort() function// user_defined comparator functionfunction sorting($a,$b){    if ($a==$b) return 0;        return ($a<$b)?-1:1;}// input array$arr=array(\"a\"=>4,\"b\"=>2,\"g\"=>8,\"d\"=>6,\"e\"=>1,\"f\"=>9);uasort($arr,\"sorting\");// printing sorted array.print_r($arr);?>Output:  Array  (      [e] => 1      [b] => 2      [a] => 4      [d] => 6      [g] => 8      [f] => 9  )Sorting in descending order: To sort the input array in descending order, in the comparator function we will return -1 when a>b or 1 when a<b. Below program illustrates this:<?php// PHP program to sort in descending// order using uasort() function// user_defined comparator functionfunction sorting($a, $b){    if ($a == $b) return 0;        return ($a > $b) ? -1 : 1;}// input array$input = array(\"d\"=>\"R\", \"a\"=>\"G\", \"b\"=>\"X\", \"f\"=>\"Z\" );uasort($input, \"sorting\");// printing sorted array.print_r($input);?>Output:  Array  (      [f] => Z      [b] => X      [d] => R      [a] => G  )");create(getIdByTitle(this.context,"Arrays"),"PHP | uksort() Function","The uksort() function is a built-in function in PHP and is used to sort an array according to the keys and not values using a user-defined comparison function.Syntax:  boolean uksort($array, myFunction);Parameter: This function accepts two parameters and are described below:$array: This parameter specifies an array which we need to sort.myFunction: This parameter specifies name of a user-defined function which will be used to sort the keys of array $array. This comparison function must return an integer.Return value: This function returns a boolean value. It returns TRUE on success or FALSE on failure.Below programs illustrate the uksort() function in PHP:Program 1:<?php// user-defined comparison functionfunction my_sort($x, $y){    if ($x == $y)        return 0;    return ($x > $y) ? -1 : 1;}// Input array$names = array(                \"10\" => \"javascript\",                \"20\" => \"php\",                \"60\" => \"vbscript\",                \"40\" => \"jsp\"              );uksort($names, \"my_sort\");// printing sorted arrayprint_r ($names);?>Output:  Array  (      [60] => vbscript      [40] => jsp      [20] => php      [10] => javascript  )Program 2:<?php// user-defined comparison functionfunction my_sort($x, $y){    if ($x == $y)        return 0;    return ($x > $y) ? 1 : -1;}// Input array$names = array(                \"10\" => \"javascript\",                \"20\" => \"php\",                \"60\" => \"vbscript\",                \"40\" => \"jsp\"              );uksort($names, \"my_sort\");// printing sorted arrayprint_r ($names);?>Output:  Array  (      [10] => javascript      [20] => php      [40] => jsp      [60] => vbscript  )Note: If two values are compared as equal according to the user-defined comparison function then their order in the output array will be undefined.");create(getIdByTitle(this.context,"Arrays"),"PHP | usort() Function","PHP comes with a number of built-in functions which is used to sort arrays in an easier way. Here, we are going to discuss a new function usort(). The usort() function in PHP sorts a given array by using user-defined comparison function. This function is useful in case if we want to sort the array in a new manner. This function assigns new integral keys starting from zero to elements present in the array and the old keys are lost.Syntax:  boolean usort( $array, \"function_name\");Parameters: This function accepts two parameters as shown in the above syntax and are described below:$array: This parameter specifies the array which u want to sort.function_name : This parameter specifies the name of a user-defined function which compares the values and sort the array specified by the parameter $array. This function returns an integer value based on the following conditions. If two argument are equal then it returns 0, If first argument is greater than second, it returns 1 and if first argument is smaller than second, it returns -1.Return Value: This function returns boolean type of value. It returns TRUE in case of success and FALSE in case of failure.Below program illustrate the usort() function in PHP:<?php    // PHP program to ilustrate usort() function    // This is the user-defined function used to compare    // values to sort the input array    function comparatorFunc( $x, $y)    {        // If $x is equal to $y it returns 0        if ($x== $y)            return 0;        // if x is less than y then it returns -1        // else it returns 1        if ($x < $y)            return -1;        else            return 1;    }    // Input array    $arr= array(2, 9, 1, 3, 5);    usort($arr, \"comparatorFunc\");    print_r($arr);?>Output:  Array  (      [0] => 1      [1] => 2      [2] => 3      [3] => 5      [4] => 9  )");create(getIdByTitle(this.context,"Arrays"),"PHP | each() Function","The each() function is an inbuilt function in PHP and is used to get the current element key-value pair of the given array to which the internal pointer is currently pointing. After returning the key and value of the current element the internal pointer is incremented by one in the array.Note: You can use reset() function if you want to traverse the array again using each().Syntax:  each($array)Parameter: This function accepts a single parameter $array which is the input array in which we want to find the current key-value pair to which the internal pointer is currently pointing.Return Value: This function returns the key-value pair of the current element of the input array $array. The key-value pair is returned in the form of a new array containing four elements. The first two elements with keys(1 and Value) are for the current element’s value, and next two elements with keys (0 and Key) are for the current element’s key. If the input array is empty or if the internal pointer has reached the end of the array then this function returns FALSE.Examples:  Input : each(array(\'Ram\', \'Shita\', \'Geeta\'))  Output :  Array  (      [1] => Ram      [value] => Ram      [0] => 0      [key] => 0  )  Explanation: Here input array contain many elements  but ram is the current element so the output contains  its key and value pair.Below programs illustrate the each() function in PHP:Program 1:<?php$arr = array(\'maya\', \'Sham\', \'Geet\');print_r (each($arr));?>Output:  Array  (      [1] => maya      [value] => maya      [0] => 0      [key] => 0  )Program 2:<?php$arr = array(\'a\' => \'anny\', \'b\' => \'bunny\',                           \'c\' => \'chinky\');reset($arr);while (list($key, $val) = each($arr))  {      echo \"$key => $val \\n\";  }?>Output:  a => anny   b => bunny   c => chinky");
    }

    private void stringArticles()
    {
        create(getIdByTitle(this.context,"Strings"),"PHP | strtoupper() Function","The strtoupper() function is used to convert a string into uppercase. This function takes a string as parameter and converts all the lowercase english alphabets present in the string to uppercase. All other numeric characters or special characters in the string remains unchanged.Syntax:  string strtoupper ( $string )Parameter: The only parameter to this function is a string that is to be converted to upper case.Return value: This function returns a string in which all the alphabets are uppercase.Examples:  Input : $str  = \"GeeksForGeeks\"          strtoupper($str)  Output: GEEKSFORGEEKS    Input : $str  = \"going BACK he SAW THIS 123$#%\"          strtoupper($str)  Output: GOING BACK HE SAW THIS 123$#%Below programs illustrate the strtoupper() function in PHP:Program 1<?php// original string$str = \"GeeksForGeeks\";// string converted to upper case$resStr = strtoupper($str);print_r($resStr);?>Output:  GEEKSFORGEEKSProgram 2<?php// original string$str = \"going BACK he SAW THIS 123$#%\";// string to upper case$resStr = strtoupper($str);print_r($resStr);?>Output:  GOING BACK HE SAW THIS 123$#%");create(getIdByTitle(this.context,"Strings"),"PHP | str_split() Function","The str_split() is an inbuilt function in PHP and is used to convert the given string into an array. This function basically splits the given string into smaller strings of length specified by the user and stores them in an array and returns the array.Syntax:array str_split($org_string, $splitting_length)Parameters:The function accepts two parameters and are described below:$org_string (mandatory): This refers to the original string that the user needs to split into an array.$splitting_length (optional): This refers to the length of each array element, we wish to split our string into. By default the function accepts the value as 1.Return Values: The function returns an array. If the length parameter exceeds the length of the original string, then the whole string is returned as a single element. If the length parameter is less than 1, then False is returned. By default length is equal to 1.Examples:  Input: \"Hello\"  Output:  Array  (      [0] => H      [1] => e      [2] => l      [3] => l      [4] => o  )The below program will explain the working of the str_split() function.<?php// PHP program to display the working of str_split()$string = \"Geeks\";// Since second argument is not passed,// string is split into substrings of size 1.print_r(str_split($string));$string = \"GeeksforGeeks\";// Splits string into substrings of size 4// and returns array of substrings.print_r(str_split($string, 4))?>Output:Array  (      [0] => G      [1] => e      [2] => e      [3] => k      [4] => s  )  Array  (      [0] => Geek      [1] => sfor      [2] => Geek      [3] => s  )");create(getIdByTitle(this.context,"Strings"),"PHP | str_repeat() Function","The str_repeat() function is a built-in function in PHP and is used to create a new string by repeating a given string fixed number of times. It takes a string and an integer as arguments and returns a new string which is generated by repeating the string passed as an argument by the number of times defined by the integer passed as an argument to this function.Syntax:  string str_repeat ( $string, $no_of_times )Parameters: This function accepts two parameters and both of them are mandatory to be passed.$string: This parameter represents the string to be repeated$no_of_times: This parameter represents a number denoting the number of times the parameter $string is to be repeated. This parameter should be greater than or equals to zero.Return Value: This function returns a new string made up by repeating the given string $string given number of times. If the parameter $no_of_times passed to the function is equals to 0, then the function returns an empty string.Examples:  Input : $str = \\\'GeeksForGeeks\\\';          print_r(str_repeat($str, 2));  Output :GeeksForGeeksGeeksForGeeks    Input : $str = \\\' Run\\\';          print_r(str_repeat($str, 7));  Output : Run Run Run Run Run Run RunBelow programs illustrate the str_repeat() function in PHP:Program – 1:<?php// Input string$str = \'GeeksForGeeks\';// Repeated stringprint_r(str_repeat($str, 2));?>Output:  GeeksForGeeksGeeksForGeeksProgram – 2:<?php// Input string$str = \' Run\';// Repeated stringprint_r(str_repeat($str, 7));?>Output:   Run Run Run Run Run Run Run");create(getIdByTitle(this.context,"Strings"),"PHP | str_replace() Function","The str_replace() is a built-in function in PHP and is used to replace all the occurrences of the search string or array of search strings by replacement string or array of replacement strings in the given string or array respectively.Syntax:  str_replace ( $searchVal, $replaceVal, $subjectVal, $count )Parameters: This function accepts four parameters out of which 3 are mandatory and 1 is optional. All of these parameters are described below:$searchVal: This parameter can be of both string and array types. This parameter specifies the string to be searched and replaced.$replaceVal: This parameter can be of both string and array types. This parameter specifies the string with which we want to replace the $searchVal string.$subjectVal: This parameter can be of both string and array types. This parameter specifies the string or array of strings which we want to search for $searchVal and replace with $replaceVal.$count: This parameter is optional and if passed, it’s value will be set to the total number of replacement operations performed on the string $subjectVal.If the $searchVal and the $replaceVal arguments are arrays, then all the elements of the $searchVal argument are searched in the $subjectVal string and replaced by the corresponding elements in the $replaceVal argument. If number of elements in $replaceVal is less than that in $searchVal array, then if there are any occurences of the additional elements of $searchVal argument in the $subjectVal argument then they will be replaced by an empty string. If the $subjectVal parameter is also an array instead of string then all of the elements of $subjectVal will be searched.Return Value: This function returns a string or an array based on the $subjectVal parameter with replaced values.Examples:  Input:  $subjectVal  = \"It was nice meeting you. May you shine brightly.\"          str_replace(\'you\', \'him\', $subjectVal)  Output: It was nice meeting him. May him shine brightly.    Input:  $subjectVal  = \"You eat fruits, vegetables, fiber every day.\"          $searchVal = array(\"fruits\", \"vegetables\", \"fiber\")          $replaceVal = array(\"pizza\", \"beer\", \"ice cream\")          str_replace($array1, $array2, $str)  Output: You eat pizza, beer, ice cream every day.In the first example every occurrence of you is replaced with him. In the second example since both the arguments are arrays, therefore, every element from the first argument is replaced with the corresponding element from the second argument as explained above.Below programs illustate the str_replace() function in PHP:Example – 1:<?php// Input string$subjectVal = \"It was nice meeting you. May you shine bright.\";// using str_replace() function$resStr = str_replace(\'you\', \'him\', $subjectVal);print_r($resStr);?>Output:  It was nice meeting him. May him shine bright.Example – 2:<?php// Input string$str  = \"You eat fruits, vegetables, fiber every day.\";// Array containing search string$searchVal = array(\"fruits\", \"vegetables\", \"fiber\");// Array containing replace string from  search string$replaceVal = array(\"pizza\", \"beer\", \"ice cream\");// Function to replace string$res = str_replace($searchVal, $replaceVal, $str);print_r($res);?>Output:  You eat pizza, beer, ice cream every day.");create(getIdByTitle(this.context,"Strings"),"PHP | str_shuffle() Function","The str_shuffle() function is an inbuilt function in PHP and is used to randomly shuffle all the characters of a string passed to the function as a parameter. When a number is passed, it treats the number as the string and shuffles it. This function does not make any change in the original string or the number passed to it as a parameter. Instead, it returns a new string which is one of the possible permutations of the string passed to it in the parameter.Syntax:str_shuffle($string)Parameter: This function accepts a single parameter $string. The parameter $string specifies the string whose characters are needed to be shuffled. In place of a string, a number can also be passed. If a number is passed instead of a string as a parameter then this function will treat that number as a string.Return Value: The function returns a string of the same length but with shuffled characters within itself. Every time the program is executed, it displays a different output since shuffling of characters is different every time. The original string or the number can be the return value on some occasions.Examples:  Input : $string = \"raj\"   Output : jar     Input : $string = \"geeks\"   Output : eeksg     Input : $string = 142   Output : 412     Note: The output will be different on every execution.Below programs illustrate the str_shuffle() function:Program 1: Program to demonstrate the str_shuffle() fucntion when a string is passed.<?php// PHP program to demonstrate the str_shuffle()// fucntion when a string is passed$string = \"geeks\";// prints the shuffled stringecho str_shuffle($string);?>Output:keegsProgram 2: Program to demonstrate the str_shuffle() fucntion when a number is passed.<?php// PHP program to demonstrate the str_shuffle()// fucntion when a number is passed$string = 142;// prints the shuffled stringecho str_shuffle($string);?>Output:124");create(getIdByTitle(this.context,"Strings"),"PHP | strcmp() Function","Comparing two strings is one of the most commonly used string operation in programming and web development practices. The strcmp() is an inbuilt function in PHP and is used to compare two strings. This function is case-sensitive which points that capital and small cases will be treated differently, during comparison. This function compares two strings and tells us that whether the first string is greater or smaller than the second string or equals to the second string.Syntax:strcmp($string1, $string2)Parameters: This function accepts two parameters which are described below:$string1 (mandatory): This parameter refers to the first string to be used in the comparison$string2 (mandatory): This parameter refers to the second string to be used in the comparison.Return Values: The function returns a random integer value depending on the condition of match, which is given by:Returns 0 if the strings are equal.Returns a negative value (<0), if $string2 is greater than $string1.Returns a positive value (>0) if $string1 is greater than $string2.In this code we will try to understand the working of strcmp() function:<?php// PHP program to illustrate the working of strcmp()$string1 = \"Welcome to GFG\";$string2 = \"Welcome to GeeksforGeeks\";$string3 = \"Welcome to GFG\";// In this case both the strings are equalprint_r(strcmp($string1, $string3));echo \"\\n\";// In this case the first is greaterprint_r(strcmp($string2, $string1));echo \"\\n\";// In this case the second is greaterprint_r(strcmp($string3, $string2))?>Output:0  31  -31");create(getIdByTitle(this.context,"Strings"),"PHP | ctype_alnum() (Check for Alphanumeric)","A ctype_alnum() function in PHP used to check all characters of given string/text are alphanumeric or not. If all characters are alphanumeric then return TRUE, otherwise return FALSE.Syntax: bool ctype_alnum ($text)Parameters Used:$text : It is a mandatory parameter which specifies the string.Examples:  Input  : Geeks  Output : Yes  Explanation : String \"Geeks\" is alphanumeric.                Note: Read Standard c local letter.          Input  : \'%%%Contribute_article on GFG!!!\'  Output : No             Explanation : String contains Special characters.Note: Except string or digit, if we input anything then it will return FALSE.Below programs illustrate the ctype_alnum() function.Program :1Drive a code ctype_alnum()() function for better understand.<?php// PHP program to check given string is// all characters are alphanumeric$string = \'GeeksforGeeks\';    if ( ctype_alnum($string))        echo \"Yes\\n\";    else        echo \"No\\n\";?>Output:  YesProgram: 2 Drive a code of ctype_alnum() function where input will be a array of string integers, string with special symbols.<?php// PHP program to check given string is// all characters are alphanumeric$strings = array(    \'Geeks\',    \'geek@gmail.com\',    \'2018\',    \'GFG2018\',    \'a b c \',    \'@!$%^&*()|2018\');// Checking above given four strings// by used of  ctype_alnum() function .foreach ($strings as $test) {    if (ctype_alnum($test))        echo \"Yes\\n\";    else        echo \"No\\n\";}?>Output:  Yes  No  Yes  Yes  No  No");create(getIdByTitle(this.context,"Strings"),"PHP | ctype_digit() (Checks for numeric value)","A ctype_digit() function in PHP used to check each and every character of text are numeric or not. It returns TRUE if all characters of the string are numeric otherwise return FALSE.Syntax :  ctype_digit(string text)Parameter Used:The ctype_digit() function in PHP accepts only one parameter.text : Its mandatory parameter which specifies the tested string.Return Values:It returns TRUE if all characters of the string are numeric otherwise return FALSE.Errors and Exceptions:Gives Expected result when passing string not gives desired output when passing an integer.The function returns true on empty string previous versions of PHP 5.1.0Examples:  Input  :789495001  Output : Yes  Explanation : All digits, return True    Input  : 789.0877  Output : No  Explanation: String contains floating point,   return false.Below programs illustrate the ctype_digit() function.Program: 1 Checking ctype_digit() function for a single string which contains all digits.<?php// PHP program to check given string is// control character$string = \'123456789\';    // Checking above given string    // by using of ctype_digit() function.    if ( ctype_digit($string)) {        // if true then return Yes        echo \"Yes\\n\";    } else {        // if False then return No        echo \"No\\n\";    }?>Output:  YesProgram: 2Drive a code ctype_digit() function where input will be array of string which contains special characters, integers, strings.<?php// PHP program to check is given string// contains all digits using ctype_digit$strings = array(    \'Geeks-2018\',    \'geek@yahoo.com\',    \'10.99999Fe\',    \'12345\',    \'geeksforgeeks.org\');// Checking above given strings//by used of ctype_digit() function .foreach ($strings as $testcase) {    if (ctype_digit($testcase)) {        // if true then return Yes        echo \"Yes\\n\";    } else {        // if False then return No        echo \"No\\n\";    }}?>Output:  No  No  No  Yes  Noctype_digit() vs is_int()ctype_digit() is basically for string type and is_int() for integer types. ctype_digit() traverses through all characters and checks if every character is digit or not. For example,<?php// PHP code to demonstrate difference between// ctype_digit() and is_int().$x = \"-123\";if (ctype_digit($x))   echo \"Yes\\n\";else   echo \"No\\n\";$x = -123;if (is_int($x))   echo \"Yes\";else   echo \"No\";?>Output:  No  Yes");create(getIdByTitle(this.context,"Strings"),"PHP | ctype_xdigit() Function","The ctype_xdigit() function in PHP used to check each and every character of string/text are hexadecimal digit or not. It return TRUE if all characters are hexadecimal otherwise return FALSE .Syntax :  ctype_xdigit(string text)Parameters Used:text : It is mandatory parameter which specifies the tested string.Return Values:It returns TRUE if all characters of the string are hexadecimal otherwise return FALSE.Examples:  Input  :  ABCDEF0123  Output :  Yes    Input  : GFG2018  Output : NoNote :  It checking decimal digit or a character from [A-F, a-f].Below programs illustrate the ctype_xdigit() function.Program: 1<?php// PHP program to check given string is// Hexadecimal character or not$string = \'ABab012\';// Checking above string by using// of ctype_xdigit() function.if ( ctype_xdigit($string)) {    // if true then return Yes    echo \"Yes \\n\";} else {    // if False then return No    echo \"No \\n\";}?>Output:  YesProgram: 2Take one more example ctype_xdigit() function to check how it work when input contains uppercase lowercase and symbol character by using input as array of string.<?php// PHP program to check given string is//Hexadecimal character or not$strings = array(    \'ABCDEF\',    \'abcdef\',    \'0123456789X\',    \'0123456789\',    \'Gg@(*&)\',    \'GFG\');// Checking above given strings//by used of ctype_xdigit() function .foreach ($strings as $test) {    if (ctype_xdigit($test)) {         echo \"Yes \\n\";    } else {         echo \"No \\n\";    }}?>Output:  Yes   Yes   No   Yes   No   No");create(getIdByTitle(this.context,"Strings"),"PHP | strtr() for replacing substrings","It replaces given substring in a string with another given string. We can also use it to do multiple replacements by passing an array of pairs.Examples:  Input : $str = \"Hmrrb GmmksfbrGmmks\";          $from = \"rbm\";          $to = \"loe\";  Output : Hello GeeksforGeeks    Input : $str = \"Hello world\";          $arr = array(\"Hello\" => \"I Love\", \"world\" => \"GeeksforGeeks\");  Output : I Love GeeksforGeeksSyntax :  string strtr ( string $string, string $from, string $to)    OR    string strtr (string $string, array $from_to_pairs)Parameters :This function accepts three/two parameters and all of them are mandatory to be passed.   Syntax 1 :      1. $string: This parameter represents the given input string.      2. $from: This parameter represents the sub string that is to be translated.      3. $to: This parameter represents the translated sub string of “from” sub string.   Syntax 2 :      1. $string: This parameter represents the given input string.      2. $translating_pairs: This parameter represents the array containing respective From-to pairs.Return Value :This function returns a string in which all the characters of from sub string are replaced by to sub string in the given string.Note that, if from and to have different lengths, then output will be co-related with that of the shortest.Below programs illustrates the strtr() function in PHP:Program 1 :<?php// original string$str = \"GzzksworGzzks is zverything.\";// from and to terms$from = \"zw\";$to = \"ef\";// calling strtr() function$resStr = strtr($str, $from, $to);print_r($resStr);?>Output :  GeeksforGeeks is everything.Program 2 :<?php// original string$str = \"Hi there\";// array declaring from-to pairs$arr = array(\"Hi\" => \"Be\", \"there\" => \"Happy\");// calling strtr() function$resStr = strtr($str, $arr);print_r($resStr);?>Output :  Be HappyReference : http://php.net/manual/en/function.strtr.php");create(getIdByTitle(this.context,"Strings"),"PHP | strtok() for tokening string","Like C strtok(), PHP strtok() is used to tokenize a string into smaller parts on the basis of given delimiters It takes input String as a argument along with delimiters (as second argument).Syntax :  string strtok ( string $string, string $delimiters )Parameters :This function accepts two parameters and both of them are mandatory to be passed.      1. $string: This parameter represents the given input string.      2. $delimiters: This parameter represents the delimiting characters (split characters).Return Value :This function returns a string or series of strings separated by given delimiters. Series of strings can be found by using strtok() in while loop.Examples:  Input : $str = \"I love GeeksForGeeks\"          $delimiters = \" \"  Output :           I          love          GeeksForGeeks    Input : $str = \"Hi,GeeksforGeeks Practice\"          $delimiters = \",\"  Output :          Hi          GeeksforGeeks          PracticeNote that, Only first call needs string argument, after that only delimiters are required because it automatically keeps the status of current string.Below programs illustrates the strtok() function in PHP:Program 1 :<?php// original string$str = \"Geeks for Geeks\";// declaring delimiters$del = \" \";//calling strtok() function$token = strtok($str, $del);// while loop to get all tokenswhile ($token !== false){    echo \"$token \\n\";    $token = strtok($del);}?>Output:  Geeks   for   GeeksProgram 2 :<?php// original string$str = \"Hi,GeeksforGeeks Practice\";// declaring delimiters$del = \", \";// calling strtok() function$token = strtok($str, $del);// while loop to get all tokenswhile ($token !== false){    echo \"$token \\n\";    $token = strtok($del);}?>Output:  Hi   GeeksforGeeks   PracticeReference : http://php.net/manual/en/function.strtok.php");create(getIdByTitle(this.context,"Strings"),"PHP | soundex() Function","The soundex() function is a built-in function in PHP and is used to calculate the Soundex key of a given string.The soudex key is a four character long alphanumeric string(starting with a letter) which represents the English pronunciation of the given string.Syntax:  string soundex($str);Parameters: This function accepts a single parameter $str which represents the string for which we want to find the Soundex key.Return Value: It returns the soundex key as a string.Below programs illustrate the soundex() function in PHP:Program 1: In the below program, the soudex() function generates the soundex key of the string “geeksforgeeks”.<?php$str = \"geeksforgeeks\";echo soundex($str);?>Output:  G216Program 2: In the below program, we will see that two words having same pronunciation produce similar Soundex key.<?php$str1 = \"hair\";$str2 = \"heir\";echo soundex($str1).\"\\n\";echo soundex($str2);?>Output:  H600  H600");create(getIdByTitle(this.context,"Strings"),"PHP | strtolower() Function","The strtolower() function is used to convert a string into lowercase. This function takes a string as parameter and converts all the uppercase english alphabets present in the string to lowercase. All other numeric characters or special characters in the string remains unchanged.Syntax:  string strtolower( $string )Parameter: The only parameter to this function is a string that is to be converted to lower case.Return value: This function returns a string in which all the alphabets are lower case.Examples:  Input : $str  = \"GeeksForGeeks\"          strtolower($str)  Output: geeksforgeeks    Input : $str  = \"going BACK he SAW THIS 123$#%\"          strtolower($str)  Output: going back he saw this 123$#%Below programs illustrate the strtolower() function in PHP:Program 1:<?php// original string$str = \"GeeksForGeeks\";// string converted to lower case$resStr = strtolower($str);print_r($resStr);?>Output:  geeksforgeeksProgram 2:<?php// original string$str = \"going BACK he SAW THIS 123$#%\";// string converted to lower case$resStr = strtolower($str);print_r($resStr);?>Output:  going back he saw this 123$#%");create(getIdByTitle(this.context,"Strings"),"PHP | strcasecmp() Function","The strcasecmp() function is a built-in function in PHP and is used to compare two given strings. It is case-insensitive. This function is similar to strncasecmp(), the only difference is that the strncasecmp() provides the provision to specify the number of characters to be used from each string for the comparison.Syntax:strcasecmp($string1, $string2)Parameters: This function accepts two mandatory parameters as shown in the above syntax and are described below:$string1, $string2: These parameters specify the strings to be compared.Return Value:This function returns an integer based on the conditions as described below:strcasecmp() returns 0 – if the two strings are equal.strcasecmp() returns < 0 – if string1 is less than string2strcasecmp() returns > 0 – if string1 is greater than string2Examples:  Input : $str1 = \"Geeks for Geeks \"          $str2 = \"Geeks for Geeks \"  Output : 0    Input : $str1 = \"Geeks for Geeks\"          $str2 = \"Hello Geek!\"  Output : -1Below programs illustrate the strcasecmp() function in PHP:Program 1: When the two strings are identical:<?php// PHP program to demonstrate the use// of strcasecmp() function$str1 = \"Geeks for Geeks \";$str2 = \"Geeks for Geeks \";// Both the strings are equal$test=strcasecmp($str1, $str2);echo \"$test\";?>Output:0Program 2: When the two strings are not identical:<?php// PHP program to demonstrate the use// of strcasecmp() function$str1 = \"Geeks for Geeks\";$str2 = \"Hello Geek!\";// Both the strings are not equal//  str1 < str2$test = strcasecmp($str1, $str2);echo \"$test\";?>Output:-1Program 3: When the two strings are not identical:<?php// PHP program to demonstrate the use// of strcasecmp() function$str1 = \"Hello Geek!\";$str2 = \"Geeks for Geeks\";// Both the strings are not equal//  str1 > str2$test = strcasecmp($str1, $str2);echo \"$test\";?>Output:1");create(getIdByTitle(this.context,"Strings"),"PHP | strncasecmp() Function","The strncasecmp() function is a built-in function in PHP and is used to compare two given strings. It is case-insensitive. This function is similar to strcasecmp(), the only difference is the provision to specify the number of characters to be used from each string for the comparison.Syntax:strncasecmp($string1, $string2, $length)Parameters: This function accepts two parameters as shown in the above syntax and are described below:$string1, $string2: These parameters specifies the strings to be compared.$length: It specifies the number of characters from each string to be used in the comparison. This parameter is mandatoryReturn Value: This function returns an integer based on the conditions as described below:strncasecmp() returns 0 – if the two strings are equal.strncasecmp() returns <0 – if string1 is less than string2strncasecmp() returns >0 – if string1 is greater than string2Examples:  Input : string1 = \"Hello\", string2 = \"hEllo\", length = 6  Output : 0    Input : string1 = \"Geeks\", string2 = \"Gfg\", length = 3  Output : -1    Input : string1 = \"Nerd\", string2 = \"Geeks\", length = 4  Output : 7Below programs illustrate the strncasecmp() function in PHP:Program 1: When the two strings are identical:<?php$str1 = \"Geeks for Geeks \";$str2 = \"Geeks for Geeks \";// Both the strings are equal$test=strncasecmp($str1, $str2, 16 );echo \"$test\";?>Output :0Program 2 : When first string greater than the second string:<?php// Input strings$str1 = \"Geeks for Geeks \";$str2 = \"Geeks for \";$test=strncasecmp($str1, $str2, 16 );// In this case the second string is smallerecho \"$test\";?>Output:6Program 3: First string is smaller than the second string:<?php// Input Strings$str1 = \"Geeks for \";$str2 = \"Geeks for Geeks \";$test=strncasecmp($str1, $str2, 16 );// In this case the first string is smallerecho \"$test\";?>Output:-6Program 4: This program illustrates the case-insensitivity of the function:<?php// Input Strings$str1 = \"GEEKS FOR GEEKS \";$str2 = \"Geeks for Geeks \";// Both the strings are equal$test=strncasecmp($str1, $str2, 16 );echo \"$test\";?>Output:0Program 5: Two strings are of equal length but contain a different character. In such a case the difference between ASCII value of the two characters is displayed. The function returns a positive value if the character in string1 has a greater ASCII value and negative if the character in string2 has a greater ASCII value.<?php// Input Strings$str1 = \"Good\";$str2 = \"Goon\";$test1 = strncasecmp($str1, $str2, 4 );// Second string has a character// with higher ASCII valueecho \"$test1\";echo \"\\n\";$test2 = strncasecmp($str2, $str1, 4 );// First string has a character// with higher ASCII valueecho \"$test2\";?>Output:  -10  10");create(getIdByTitle(this.context,"Strings"),"PHP | strrchr Function","The strrchr() function is a built-in function in PHP. This function takes two arguments a string and a character. This function searches the given character in the given string and returns the portion of string starting from the last occurrence of the given character in that string.Syntax:  strrchr($string, $key)Parameters: This function accepts two parameters. Both of the parameters are mandatory and are described below:$string: This is the input string in which we want to search the given key.$key: This parameter represents a character to be searched in the given string $string. If this parameter contains more than one character then only the first character of this parameter will be searched in $string.Return Value: This function returns the portion of $string starting from the last occurrence of the given $key in that string.Examples:  Input : $string = \"Hello|welcome|to|gfg\"  $key = \'|\'  Output : |gfg    Input :  $string = \"Welcome\\nto\\ngfg\"  $key = \'\\n\'  Output : gfgBelow programs illustrate the strrchr() function in PHP:Program 1:<?php// Input string$string = \"Hello|welcome|to|gfg\";// key to be searched$key = \"|\";echo strrchr($string, $key);?>Output:  |gfgProgram 2: When $key contains escape sequence.<?php// Input string$string = \"Hello\\nwelcome\\nto\\ngfg\";// key to be searched$key = \"\\n\";echo strrchr($string, $key);?>Output:    gfgProgram 3: When $key contains more than one character.<?php// Input string$string = \"Hello|welcome|to|gfg\";// key to be searched$key = \"|welcome\";echo strrchr($string, $key);?>Output:  |gfg");create(getIdByTitle(this.context,"Strings"),"PHP | strstr() Function","The strstr() function is a built-in function in PHP. It searches for the first occurrence of a string inside another string and displays the portion of the latter starting from the first occurrence of the former in the latter (before if specified). This function is case-sensitive.Syntax :strstr( $string, $search, $before )Parameters : This function accepts three parameters as shown in the above syntax out of which the first two parameters must be supplied and the third one is optional. All of these parameters are described below:$string : It is a mandatory parameter which specifies the string in which we want to perform the search.$search : It is a mandatory parameter which specifies the string to search for. If this parameter is a number, it will search for the character matching the ASCII value of the number$before : It is an optional parameter. It specifies a boolean value whose default is false. If set to true, it returns the part of the $string before the first occurrence of the $search parameter.Return Value : The function returns the rest of the string (from the matching point), or FALSE, if the string to search for is not found.Examples:  Input : $string = \"Hello world!\", $search = \"world\"  Output : world!    Input : $string = \"Geeks for Geeks!\", $search = \"k\"  Output : ks for Geeks!Below programs illustrate the strstr() function in PHP :Program 1: In this program we will display the portion of $string from the first occurrence of $search.<?phpecho strstr(\"Geeks for Geeks!\", \"k\");?>Output:ks for Geeks!Program 2: In this program we will display the portion of $string before the first occurrence of $search.<?phpecho stristr(\"Geeks for Geeks!\", \"k\", true);?>Output:GeeProgram 3: In this program we will pass an integer as $search.<?php  $string = \"Geeks\";  echo stristr($string, 101); // 101 is ASCII value of lowercase e?>Output:eeks");create(getIdByTitle(this.context,"Strings"),"PHP | str_rot13() Function","The function str_rot13() is a built-in function in php. This function accepts a string and shifts every alphabet present in the string by 13 places in the alphabet. The function leaves numeric and non-alphabetical characters untouched. By passing an encoded string as argument, the function will return the original string.Syntax:str_rot13 ( $string )Parameter: This function accepts only a string parameter which can be observed from the above syntax. The description of the parameter is as follows.$string : This is the only mandatory parameter of the function. This parameter passes a string to the function which needs to be encoded.Return Value: The function returns the encoded string.Examples:  Input : $string = \"Geeks for Geeks\"  Output : Trrxf sbe Trrxf    Input : $string = \"Trrxf sbe Trrxf\"  Output : Geeks for GeeksBelow program illustrate the str_rot13() function in PHP:<?phpecho str_rot13(\"Geeks for Geeks\");echo \"\\n\";echo str_rot13(\"Trrxf sbe Trrxf\");?>Output:Trrxf sbe Trrxf  Geeks for Geeks");create(getIdByTitle(this.context,"Strings"),"PHP | strcoll() Function","The strcoll() is an inbuilt function in PHP and is used to compare two strings. This function is case-sensitive which points that capital and small cases will be treated differently, during a comparison. This function compares two strings and tells us that whether the first string is greater or smaller than the second string or equals to the second string.Syntax:strcoll($string1, $string2)Parameters:The function accepts two mandatory string parameters which are described below.$string1: This parameter refers to the first string to be used in the comparison.$string2: This parameter refers to the second string to be used in the comparison.Return Value: The function returns a random integer value depending on the condition of match, which is given by:Returns 0 if the strings are equal.Returns a negative value (<0), if $string1 is lesser than $string2.Returns a positive value (>0) if $string2 is lesser than $string1.Examples:  Input : $string1 = \"geeks for geeks\" $string2=\"geeks for geeks\"  Output : 0     Input : $string1 = \"striver\" $string2=\"raj\"   Output : 1Below programs illustrate the use of strcoll() fucntion:Program 1: The below program demonstrates the return value when two equal strings are passed<?php    //PHP program to compare two strings using    // strcoll() function (two strings are equal)    $string1 = \"geeks for geeks\";    $string2 = \"geeks for geeks\";    // prints 0 as two strings are equal    echo strcoll($string1, $string2);?>Output:0Program 2: The below program demonstrates the return value when string1 is greater than string2<?php    //PHP program to compare two strings using    // strcoll() function (string1>string2)    $string1 = \"striver\";    $string2 = \"raj\";    // prints > 0    echo strcoll($string1, $string2);?>Output:1Program 3: The below program demonstrates the return value when string2 is greater than string1<?php    //PHP program to compare two strings using    // strcoll() function (string2>string1)    $string1 = \"CPP\";    $string2 = \"PHP\";    // prints <0    echo strcoll($string1, $string2);?>Output:-13");create(getIdByTitle(this.context,"Strings"),"PHP | strcspn() Function","The strcspn() function is an in-built function in PHP which returns the number of characters present in a string before any part of the specified characters to be searched are found. This function is case-sensitive.Syntax :strcspn( $string, $charlist, $start, $length)Parameters : This function accepts four parameters as shown in the above syntax. First two parameters are mandatory and must be supplied while the remaining two parameters are optional. All of these parameters are described below:$string : This mandatory parameter specifies the string to search$charlist : This mandatory parameter specifies the list of characters to be searched in the given $string.$start : This optional parameter specifies the index from where to start searching in the string.If $start is given and is non-negative, then strcspn() will begin examining $string from that position.If $start is given and is negative, then strcspn() will begin examining $string from that position from the end of $string.$length : It specifies the number of characters of $string which are needed to be searched. Its default value is till the end of the $string.If $length is given and is non-negative, then $string will be examined for $length characters from the starting position.If $length is given and is negative, then $string will be examined from the starting position up to $length characters from the end of $string.Return Value: Returns the number of characters from the starting position (including whitespaces) present in the string before any of the characters from the $charlist parameter is found in the string.Examples:  Input : $string = \"Geeks for Geeks\", $charlist = \"mnopqr\"  Output : 7    Input : $string = \"Geeks for Geeks\", $charlist = \"for\"  Output : 6Below programs will illustrate the use of strcspn() function :Program 1 : This program shows simple use of strcspn() function.<?php// Output is 6 because the input string// contains 6 characters \"Geeks \" before// the first character \'f\' from the list// \"for\" is found in the string.echo strcspn(\"Geeks for Geeks\", \"for\");?>Output:6Program 2 : This program shows case-sensitivity of strcspn() function.<?php// Output is 7 because the input string// does not contain \'F\' as specified in the list \"For\".// Hence the first character from the// list that is present in the string is \'o\'echo strcspn(\"Geeks for Geeks\", \"For\");?>Output:7Program 3: This program shows use of strcspn() function with $start parameter.<?php// Searches from index 5 till// the end of the stringecho strcspn(\"Geeks for Geeks\", \"G\", 5);?>Output:5Program 4: This program illustrates the use of strspn() function with negative $length parameter.<?php// Searches from index 5 till 5-th position// from end. Output is 0 since the character// at $start (i.e. 5) is present in the// specified list of charactersecho strcspn(\"Geeks for Geeks\", \" for\", 5, -5);?>Output:0Program 5: This program shows use of strcspn() function with negative $start parameter.<?php// Searches from 5th index from the end of the string// Output is 0 as the character \'G\' in the// specified starting index is present in the// given list of characters to be checked.echo strcspn(\"Geeks for Geeks\", \"Geek\", -5);?>Output:0");create(getIdByTitle(this.context,"Strings"),"PHP | strspn() Function","The strspn() function is an in-built function in PHP which finds the length of the initial segment of a string consisting entirely of characters contained within a given list of characters passed as a parameter to the function.Syntax :strspn( $string, $charlist, $start, $length)Parameters : This function accepts four parameters as shown in the above syntax. First two parameters are mandatory and must be supplied while the remaining two parameters are optional. All of these parameters are described below:$string : This mandatory parameter specifies the string to search.$charlist : This mandatory parameter specifies the list of characters to be searched in the given $string.$start : This optional parameter specifies the index from where we want to start searching in the string.If $start is given and is non-negative, then strspn() will begin examining $string from that position.If $start is given and is negative, then strspn() will begin examining $string from that position from the end of $string.$length : It specifies the number of characters of $string which are needed to be searched. Its default value is till the end of the $string.If $length is given and is non-negative, then $string will be examined for $length characters from the starting position.If $length is given and is negative, then $string will be examined from the starting position up to $length characters from the end of $string.Return Value: This function returns the number of characters found in the string that contains only characters from the charlist parameter.Examples:  Input : $string = \"abcdefghijk\", $charlist = \"abcjkl\"  Output : 3    Input : $string = \"Geeks for Geeks\", $charlist = \"Geeksfor \"  Output : 15Below programs illustrate the strspn() function:Program 1:<?php// Output is 15 because whole input string// contains all characters from given char list// \"Geeksfor \"echo strspn(\"Geeks for Geeks\", \"Geeksfor \");?>Output:15Program 2: This program illustrates the case-sensitivity of strspn() function.<?php// Output is 0 because there is no substring// which contains all characters of given char// list.echo strspn(\"Geeks for Geeks\", \"geeks\");?>Output:0Program 3: This program illustrates the use of strspn() function with $start and $length parameters.<?php// Searches substring starting from index 5// and length 9 with all characters in char// list \" for\"echo strspn(\"Geeks for Geeks\", \" for\", 5, 9);?>Output:5Program 4: This program illustrates the use of strspn() function with negative $length parameter.<?php// Searches from index 5 till 5-th position from// end.echo strspn(\"Geeks for Geeks\", \" for\", 5, -5);?>Output:5Program 5: This program illustrates the use of strspn() function with a negative $start parameter.<?php// Searches from 5-th index from endecho strspn(\"Geeks for Geeks\", \"for\", -5);?>Output:0");create(getIdByTitle(this.context,"Strings"),"PHP | stristr() Function","The stristr() function is a built-in function in PHP. It searches for the first occurrence of a string inside another string and displays the portion of the latter starting from the first occurrence of the former in the latter (before if specified). This function is case-insensitive.Syntax :stristr( $string, $search, $before )Parameters : This function accepts three parameters as shown in the above syntax out of which the first two parameters must be supplied and the third one is optional. All of these parameters are described below:$string : It is a mandatory parameter which specifies the string to be searched.$search : It is a mandatory parameter which specifies the string to search for. If this parameter is a number, it will search for the character matching the ASCII value of the number$before : It is an optional parameter. It specifies a boolean value whose default is false. If set to true, it returns the part of the string before the first occurrence of the search parameter.Return Value : The function returns the rest of the string (from the matching point), or FALSE, if the string to search for is not found.Examples:  Input : $string = \"Hello world!\", $search = \"WORLD\"  Output : world!    Input : $string = \"Geeks for Geeks!\", $search = \"K\"  Output : ks for Geeks!Below programs illustrate the stristr() function in PHP :Program 1: In this program we will display the portion of $string from the first occurrence of $search.<?phpecho stristr(\"Geeks for Geeks!\", \"K\");?>Output:ks for Geeks!Program 2: In this program we will display the portion of $string before the first occurrence of $search.<?phpecho stristr(\"Geeks for Geeks!\", \"K\", true);?>Output:GeeProgram 3: In this program we will pass an integer as $search.<?php  $string = \"Geeks\";  echo stristr($string, 101); // 101 is ASCII value of lowercase e?>Output:eeks");create(getIdByTitle(this.context,"Strings"),"PHP | strpbrk() Function","The strpbrk() function is an in-built function in PHP which searches a string for any of the specified characters. This function returns the rest of the string from where it found the first occurrence of any of the specified character. In case if none of the characters are found, it returns false. This function is case-sensitive.Syntax:strpbrk( $string, $charlist)Parameters: This function accepts two parameters as shown in the above syntax. Both the parameters are mandatory and must be supplied. All of these parameters are described below:$string: This parameter specifies the string to be searched.$charlist: This parameter specifies the characters to find.Return Values: This function returns a string starting from the character found, or false if it is not found.Examples:  Input : $string = \"Geeks for Geeks!\", $charlist = \"ef\"  Output : eeks for Geeks!  Explanation : \'e\' is the first occurrence of the specified   characters. This function will, therefore, output \"eeks for Geeks!\",   because it returns the rest of the string from where it found  the first occurrence of \'e\'.      Input : $string = \"A Computer Science portal\", $charlist = \"tue\"  Output : uter Science portalBelow programs will illustrate the strpbrk() function in PHP :Program 1:<?phpecho strpbrk(\"Geeks for Geeks!\", \"ef\");?>Output:eeks for Geeks!Program 2:<?phpecho strpbrk(\"A Computer Science portal\", \"tue\");?>Output:uter Science portalProgram 3: This program will illustrate the case-sensitivity of the function.<?phpecho strpbrk(\"A Computer Science portal\", \"c\");?>Output:cience portal");create(getIdByTitle(this.context,"Strings"),"PHP | strtr() Function","The strtr() is an inbuilt function in PHP which is used to replace a substring in a string to a given string of characters. It also has the option to change a particular word to a different word in a string. The function is case sensitive.Syntax:  strtr($string, $string1, $string2)     or,    strtr($string, $arr)Paramaters: This function accepts three parameters as shown in the above syntax and described below:$string: It specifies the string in which replacement is to be done. It is a mandatory parameter.$string1: It specifies the string of characters which has to be replaced if present in the $string. This is a mandatory parameter if array is not used.$string2: It specifies the string of characters to which the characters of $string1 are to be changed. This is a mandatory parameter if array is not used.$arr: We can pass either of ($string1 and $string2) or $array as parameter. Array is passed as the parameter when we want to change any particular substring. The $array contains the string to be changed and the string to which it is changed.Note: When $string1 and $string2 are of different length, then the longer string will be formatted to the length of the shorter one.Return Value: The return value of this function depends on two cases:When $string1 and $string2 are passed as parameters, it returns the translated string by changing the $string1 characters to $string2 characters.If an $array is passed as parameter, it returns the translated string by changing the key string to the value strings. If any of the key is passed as “”, then it returns false as output.Examples:  Input : $string = \"gieuz foh geeks\",           $string1 = \"iuzh\"   ,    $string2=\"eksr\"  Output : geeks for geeks  Explanation : i replaced by e   u replaced by k   z replaced by s   h replaced by r     Input : $string = \"gieuz foh geeks\",          $string1 = \"iuzh\"   ,   $string2 = \"eks\"  Output : geeks foh geeks   Explanation: \"iuzh\" was reduced to \"iuz\" and then   replacement was done.      Input: $string = \"giiks in giiks\",         $arr = array(\"giiks\" => \"geeks\", \"in\" => \"for\")  Output: geeks for geeks    Explanation: \"giiks\" was replaced by \"geeks\" and   \"in\" by \"for\"Below programs illustrate the strtr() function in PHP:Program 1: Program to demonsrate the strtr() function when same length string1 and string2 is passed.<?php// PHP program to demonsrate the strtr() function// when same length string1 and string2 is passed$string = \"gieuz foh geeks\" ;$string1 = \"iuzh\";$string2 = \"eksr\";// replacement is doneecho strtr($string, $string1, $string2);?>Output:geeks for geeksProgram 2: Program to demonsrate the strtr() function when different length string1 and string2 is passed.<?php// PHP program to demonsrate the strtr() function// when different length string1 and string2 is passed$string = \"gieuz foh geeks\" ;$string1 = \"iuzh\";$string2 = \"eks\";// replacement is doneecho strtr($string, $string1, $string2);?>Output:geeks foh geeksProgram 3: Program to demonsrate the strtr() function which replaces at all positions where characters are present.<?php// PHP program to demonsrate the strtr() function// which replaces at all positions where// characters are present$string = \"giiks for giiks\" ;$string1 = \"i\";$string2 = \"e\";// replacement is doneecho strtr($string, $string1, $string2);?>Output:geeks for geeksProgram 4: Program to demonsrate the strtr() function when array is passed as the parameter.<?php// PHP program to demonsrate the strtr() function// when array is passed as the parameter$string = \"giiks in giiks\" ;$arr = array(\"giiks\" => \"geeks\", \"in\" => \"for\");// replacement is doneecho strtr($string, $arr);?>Output:geeks for geeksProgram 5: Program to demonsrate the strtr() function when one key in array is passed as “”.<?php// PHP program to demonsrate the strtr() function// when one key in array is passed as \"\"$string = \"giiks in giiks\" ;$arr = array(\"giiks\" => \"geeks\", \"\" => \"for\");// replacement is doneecho strtr($string, $arr);?>Output:No Output");create(getIdByTitle(this.context,"Strings"),"PHP | strrev() Function","Reversing a string is one of the most basic string operations and is used very frequently by developers and programmers. PHP comes with a built-in function to reverse strings.The strrev() function is a built-in function in PHP and is used to reverse a string. This function does not make any change in the original string passed to it as a parameter.Synatx:string strrev($inpString)Parameter: This function accepts a single parameter $inpString. This parameter is a string and it specifies the string which we want to reverse. If a number is passed to it instead of a string, it will also reverse that number.Return Value: The strrev() function returns the reversed string or the number. It does not make any change to the original string or number passed in the parameter.Examples:  Input : $string = \"geeks\"   Output : skeeg     Input : $string = 143   Output : 341Below programs illustrate the strrev() function in PHP:Program 1: PHP program to demonstrate the strrev() function when a string is passed.<?php// PHP program to demonstrate the// strrev() function when a string is passed$str = \"geeks\";// prints the reversed stringecho strrev($str);?>Output:  skeegProgram 2: PHP program to demonstrate the strrev() function when a number is passed.<?php// PHP program to demonstrate the// strrev() function when a number is passed// passing number instead of string$num = 134;// prints the reversed numberecho strrev($num);?>Output:431");create(getIdByTitle(this.context,"Strings"),"PHP | strchr() Function","The strchr() function is a built-in function in PHP and is used to search for the first occurrence of a given string(say searchStr) in another string(say originalStr) and returns the rest of the string from originalStr starting from the first occurrence of searchStr in orignalStr.Note: The strchr() function is case sensitive.Syntax:strchr($originalStr, $searchStr, $before_searchParameter:$originalStr: This parameter specifies the string in which the word is to be searched. It is mandatory$searchStr: It specifies the word to be searched in the given $originalStr, it can be a character or a number also, if a number is passed, it searches for the equivalent ASCII value character in the $originalStr. It is mandatory.$before_search: This is an optional parameter which when set to True returns the part of $originalStr before the first occurrence of $searchStr. It is set to false by default.Return Value: It returns a string depending on the below three cases:It returns the string starting from the first occurence of the $searchStr in $originalStr to the end of the $originalStr when the $searchStr is found.It returns nothing when the $searchStr is not present in the given $originalStr.It returns the part of string before the first occurence of the $searchStr when $before_search is set to TRUE.Examples:  Input : $originalStr = \"geeks for geeks\"           $searchStr = \"geeks\"   Output : geeks for geeks     Input : $originalStr = \"geeks for geeks\"           $searchStr = \"for\"   Output : for geeks     Input : $originalStr = \"striver has published 180 articles\"          $searchStr = \"has\"    $before_search = TRUE  Output :  striver     Input: $originalStr = \"geeks for geeks\" $searchStr = \"gfg\"   Output: No outputBelow programs illustrate the strchr() function in PHP:Program 1: Program to demonstrate strchr() fucntion when word is found.<?php// Program to demonstrate the chr()// function when word is found$originalStr = \"geeks for geeks\";$searchStr = \"geeks\" ;// prints the string from the// first occurence of the $searchStrecho strchr($originalStr, $searchStr);?>Output:geeks for geeksProgram 2: Program to demonstrate strchr() fucntion when word is not found.<?php// Program to demonstrate the chr()// function when word is not found$originalStr = \"geeks for geeks\";$searchStr = \"gfg\" ;// prints the string from the// first occurence of the $searchStrecho strchr($originalStr, $searchStr);?>Output:No OutputProgram 3: Program to demonstrate strchr() fucntion when word is found and $before_search is set to true.<?php// Program to demonstrate the chr()// function when word is found and// $before_search is set to true$originalStr = \"geeks for geeks\";$searchStr = \"for\" ;// prints the string from the// first occurence of the wordecho strchr($originalStr, $searchStr, true);?>Output:  geeksProgram 4: Program to demonstrate strchr() fucntion when a part of word is passed and found.<?php// Program to demonstrate the chr()// function when a part of word is passed and found$originalStr = \"geeks for geeks\";$searchStr = \"eks\" ;// prints the string from the// first occurence of the wordecho strchr($originalStr, $searchStr);?>Output:eks for geeksProgram 5: Program to demonstrate strchr() fucntion when a number is passed and its equivalent ASCII character is searched.<?php// Program to demonstrate the chr()// function when a number is passed and its equivalent// ASCII character is searched$originalStr = \"geeks for geeks\";// 101 is the ASCII value of e$searchStr = 101 ;echo strchr($originalStr, $searchStr);?>Output:eeks for geeks");create(getIdByTitle(this.context,"Strings"),"PHP | str_ireplace() Function","The str_ireplace() is a built-in function in PHP and is used to replace all the occurrences of the search string or array of search strings by replacement string or array of replacement strings in the given string or array respectively. This function performs the search in a case-insensitive manner. This function is similar to str_replace() function. The difference is that the str_replace() function is case-sensitive whereas str_ireplace() is not.Syntax:str_ireplace ( $searchVal, $replaceVal, $subjectVal, $count )Parameters: This function accepts four parameters out of which 3 are mandatory and 1 is optional. All of these parameters are described below:$searchVal: This parameter can be of both string and array types. This parameter specifies the string to be searched and replaced.$replaceVal: This parameter can be of both string and array types. This parameter specifies the string with which we want to replace the $searchVal string.$subjectVal: This parameter can be of both string and array types. This parameter specifies the string or array of strings which we want to search for $searchVal and replace with $replaceVal.$count: This parameter is optional and if passed, it’s value will be set to the total number of replacement operations performed on the string $subjectVal.If the $searchVal and the $replaceVal arguments are arrays, then all the elements of the $searchVal argument are searched in the $subjectVal string and replaced by the corresponding elements in the $replaceVal argument. If number of elements in $replaceVal is less than that in $searchVal array, then if there are any occurences of the additional elements of $searchVal argument in the $subjectVal argument then they will be replaced by an empty string. If the $subjectVal parameter is also an array instead of string then all of the elements of $subjectVal will be searched.Return Value: This function returns a string or an array based on the $subjectVal parameter with replaced values.Examples:  Input : $subjectVal = \"How ARE you\", $searcVal = \"are\"          $replaceVal = \"is\"          str_ireplace($searchVal,$replaceVal,$subjectVal);  Output : How is you     Input : $subjectVal = \"Geeks are Geeks\", $searcVal = \"are\"          $replaceVal = \"for\"          str_ireplace($searchVal,$replaceVal,$subjectVal);  Output : Geeks for GeeksBelow programs illustrate the str_ireplace() function in PHP:Program 1: This program shows that the str_ireplace() function is case-insensitive.<?php// Input string$subjectVal=\"how are you\";// using str_ireplace() function$res = str_ireplace(\"are\", \"is\", $subjectVal);echo $res;?>Output:how is youProgram 2:<?php// Input string$subjectVal=\"Geeks are Geeks\";// using str_ireplace() function$res = str_ireplace(\"are\", \"for\", $subjectVal);echo $res;?>Output:Geeks for Geeks");create(getIdByTitle(this.context,"Strings"),"PHP | substr() function","The substr() is a built-in function in PHP that is used to extract a part of string.Syntax:substr(string_name, start_position, string_length_to_cut)Parameters:The substr() function allows 3 parameters or arguments out of which two are mandatory and one is optional.string_name: In this parameter, we pass the original string or the string that needs to cut or modified. This is a mandatory parameterstart_position: This refers to the position of the original string from where the part needs to be extracted. In this, we pass an integer. If the integer is positive it refers to the start of the position in the string from the beginning. If the integer is negative then it refers to the start of the position from the end of the string. This is also a mandatory parameter.string_length_to_cut: This parameter is optional and of integer type. This refers to the length of the part of the string that needs to be cut from the original string. If the integer is positive, it refers to start from start_position and extract length from the beginning. If the integer is negative then it refers to start from start_position and extract length from the end of the string. If this parameter is not passed, then the substr() function will return the string starting from start_position till the end of string.Return Type:Returns the extracted part of the string if successful otherwise FALSE or an empty string on failure.Below is a program to illustrate working of substr() in PHP:<?php// PHP program to illustrate substr()function Substring($str){    $len = strlen($str);    echo substr($str, 8), \"\\n\";    echo substr($str, 5, $len), \"\\n\";    echo substr($str, -5, 10), \"\\n\";    echo substr($str,-8, -5), \"\\n\";}// Driver Code$str=\"GeeksforGeeks\";Substring($str);?>Output:  Geeks  forGeeks  Geeks  for");create(getIdByTitle(this.context,"Strings"),"PHP | substr_count() Function","The substr_count() is a built-in function in PHP and is used to count the number of times a substring occurs in a given string. The function also provides us with an option to search for the given substring in a given range of the index. It is case sensitive, i.e., “abc” substring is not present in the string “Abcab”. If the (start+length) value specified for search exceeds the size of the passed string, it returns a warning message to the user.Syntax:substr_count($string, $substring, $start, $length)Parameters: This function accepts four parameters as shown in the above syntax and described below.$string – The string passed in the parameter is the one in which the substring’s occurrence is counted. This parameter is mandatory to be supplied.$substring – The substring passed in the parameter is searched is the string and the occurrence count is returned. This parameter is mandatory to be supplied.$start – This parameter is optional. If this parameter is passed, then the search is done starting from the start position instead of searching the whole string for the occurrence of a substring.$length – This parameter is optional. The parameter is dependent on start. It limits the search operation from start to start+length position. If the value of start+length increases the length of the string, then a warning message is generatedReturn Value: This function can return different values as shown below in different cases.The number of times the given substring appears in the string if optional parameters are not passedThe number of times the substring appears in the string from the start to the end position when start is passed in parameterThe number of times the substring appears in the string from the start to the start+length position when start and length both parameters are passed.Examples:  Input: string= \"geeks for geeks\" substring=\"geeks\"   Output: 2  Explanation: \"geeks\" occurs two times in the given string     Input: string= \"geeks for geeks\" substring=\"geeks\" start=6   Output: 1   Explanation: \"geeks\" occurs one time in the given string, in   this case search for substring starts from 6th position i.e.,   the substring is searched in \"for geeks\".Below programs illustrate the substr_count() function:Program 1: When both optional parameters are not passed.<?php// PHP program to demonstrate the substr_count() function$str = \"geeks for geeks\";echo substr_count($str, \"geeks\");  // displays the count?>Output:2Program 2: When parameter $start is passed.<?php// PHP program to demonstrate the// substr_count() function// $start is passed$str = \"geeks for geeks\";echo substr_count($str, \"geeks\", 6);?>Output:1Program 3: When $start and $length both are passed.<?php// PHP program to demonstrate the// substr_count() function$str = \"geeks for geeks\";echo substr_count($str, \"geeks\", 6, 2);?>Output:0Program 4: Program to demonstrate the warning message when ($start+$length) exceeds the length of $string.<?php// PHP program to demonstrate the// substr_count() function$str = \"geeks for geeks\";// ($start + $length ) > length of $strecho substr_count($str, \"geeks\", 6, 14);?>Output:  PHP Warning:  substr_count(): Length value 14 exceeds string lengthProgram 5: Program to demonstrate the substr_count() when it does not count overlapped substring.<?php// PHP program to demonstrate the// substr_count() function$str = \"abcabcab\";echo substr_count($str, \"abcab\");?>Output:1");create(getIdByTitle(this.context,"Strings"),"PHP | substr_replace() Function","The substr_replace() function is a built-in function in PHP and is used to replace a part of a string with another string. The index in the original string from which the replacement is to be performed needs to be passed as a parameter. If desired, the length up to which the replacement is to be done can also be specified. An array of strings can be provided as a parameter to this function, in which case the replacements will occur on each string in turn.Syntax :substr_replace($string, $replacement, $start, $length)Parameters: This function accepts four parameters as shown in the above syntax out of which first three are mandatory and the last one is optional. All of these parameters are described below:$string : This parameter is mandatory. It specifies the input string in which the replacement is to be made.$replacement : This parameter is also mandatory. It specifies the string to be inserted in $string.$start : This parameter is also mandatory. It specifies the position from which the replacement needs to be initiated.If $start is a positive number, replacement starts at the specified position in the stringIf $start is a negative number, replacement starts at the specified position from the end of the stringIf $start is 0, replacement occurs from the first character of the string$length : This parameter is optional. It specifies how many characters should be replaced. In case $length is not specified, the replacement stops at the end of $stringIf $length is positive, it represents the length of the portion of $string which is to be replaced.If $length is negative, it represents the number of characters from the end of $string before which the replacement needs to be stopped.If $length is 0, insertion is done instead of replacement.Return Value: The string generated after replacement is returned. In case of an array of strings, the array is returned.Examples:  Input : $string = \"Geeks for Geeks\", $replacement = \"GFG\", $start = 0  Output : GFG    Input : $string = \"Hello World\", $replacement = \"Hello\", $start = 6  Output : Hello HelloBelow programs illustrate the substr_replace() function:Program 1: In this program we will use the substr_replace() function without any $length parameter. All the characters from $start to the end of $string will get replaced by $replacement.<?phpecho substr_replace(\"Hello World\", \"GFG\", 6);?>OutputHello GFGProgram 2: In this program we will use the substr_replace() function with $length set to 0. In this case, insertion will occur. No replacement will take place.<?phpecho substr_replace(\"Contribute GFG\", \"to \", 11, 0);?>OutputContribute to GFGProgram 3: In this program we will use the substr_replace() function with $length set to a positive value. In this case, the $replacement string will replace characters of $string up to $length from $start.<?phpecho substr_replace(\"alone\", \"ph\", 0, 2);?>OutputphoneProgram 4: In this program we will use the substr_replace() function with $length set to a negative value. In this case, the $replacement string will replace characters of $string from $start and stop before $length number of characters from the end of the string .<?phpecho substr_replace(\"alone\", \"ph\", 0, -3);?>OutputphoneProgram 5: In this program we will use the substr_replace() function without any $length parameter and $start set to a negative value. The replacement will start at the specified position from the end of the string.<?phpecho substr_replace(\"alpha\", \"one\", -3);?>OutputaloneReference : http://php.net/manual/en/function.substr-replace.php");create(getIdByTitle(this.context,"Strings"),"PHP | substr_compare() Function","The substr_compare() function is a built-in function in PHP and it helps to compare two strings from a specified start position upto a specified length.Syntax:  int substr_compare($str1, $str2, $startpos, $len, $caseInsensitive)Parameters: This function accepts a total of five parameters out of which first three are mandatory to be supplied and the rest two are optional. All of this parameters are described below:$str1(mandatory): This parameter represents the first string to compare.$str2(mandatory): This parameter represents the second string to compare.$startpos(mandatory): This parameter specifies where to start comparing in $str1. If startpos is negative then it starts comparing from the end of the string.$len(optional): This parameter specifies how much of $str1 to compare.$caseInsensitive(optional): This parameter represents a boolean value that specifies whether or not to perform a case-sensitive comparison. If it is set to FALSE then comparison will be Case-sensitive, If it is set to TRUE then comparison will be Case-insensitiveReturn Value: This function returns an integer value based on the below cases:Returns a value less than 0 if $str1 starting from position $startpos is less than str2.Returns a value greater than 0 if $str1 starting from position $startpos greater than string2.Returns 0 if $str1 and $str2 are equal.If $startpos is equal to or greater than the length of $str1, or the length $len is set and is less than 1 then substr_compare() function prints a warning and returns FALSE.Below program illustrate the substr_compare() Function in PHP:<?php// PHP program to illustrate the// substr_compare() functionecho substr_compare(\"geeks\", \"gfg\", 2).\"\\n\";echo substr_compare(\"geeksforgeeks\", \"gfg\", 2).\"\\n\";echo substr_compare(\"Geeks\", \"gfg\", 0, 1, true).\"\\n\";echo substr_compare(\"Geeks\", \"gfg\", 0, 3, true).\"\\n\";echo substr_compare(\"GeeksforGeeks\", \"geeksforgeeks\",                                    0, false).\"\\n\";?>Output:  -2  -2  0  -1  0");create(getIdByTitle(this.context,"Strings"),"PHP | convert_uuencode() Function","The convert_uuencode() is a built-in function in PHP. The convert_uuencode() function encodes a string using the uuencode algorithm.Uuencode encoding translates all strings (including binary data) into printable characters which makes them safe for network transmissions.Syntax:  String convert_uuencode($string)Parameters: This function accepts a single parameter $string which is the string, required to uuencode.Return value: This function returns a string which represents the uuencoded data.Examples:  Input : \"Good Morning...\"  Output : /1V]O9\"!-;W)N:6YG+BXN  `    Input : \"I love my india\"  Output : /22!L;W9E(&UY(&EN9&EA`Below program illustrate the convert_uuencode() function:<?php// PHP program illustrate the// convert_uuencode() function// Input String$str = \"geeks for geeks!\";// Encoding the string$encodeString = convert_uuencode($str);// printing encoded stringecho $encodeString . \"\\n\";// Decode the string$decodeString = convert_uudecode($encodeString);echo $decodeString;?>Output:  09V5E:W, @9F]R(&=E96MS(0``  geeks for geeks!");create(getIdByTitle(this.context,"Strings"),"PHP | strpos() and stripos() Functions","strpos() in PHPThis function helps us to find the position of the first occurrence of a string in another string. This returns an integer value of the position of the first occurrence of the string. This function is case-sensitive, which means that it treats upper-case and lower-case characters differently.Syntax:strpos(original_str, search_str, start_pos)Parameters used:Out of the three parameters specified in the syntax, two are mandatory and one is optional. The three parameters are described below:original_str (mandatory): This parameter refers to the original string in which we need to search the occurrence of required string.search_str (mandatory):This parameter refers to the string that we need to search.start_pos (optional): Refers to the position of the string from where the search must begin.Return Type: This function returns an integer value which represents the index of original_str where the string search_str first occurs.Example:<?php// PHP code to search for a specific string\'s position// first occurrence using strpos() case-sensitive functionfunction Search($search, $string){    $position = strpos($string, $search, 5);    if ($position == true){        return \"Found at position: \" . $position;    }    else{        return \"Not Found\";    }}// Driver Code$string = \"Welcome to GeeksforGeeks\";$search = \"Geeks\";echo Search($search, $string);?>Output:  Found at position 11stripos() in PHPThis function also helps us to find the position of the first occurrence of a string in another string. This returns an integer value of the position of the first occurrence of the string. This function is case-insensitive, which means it treats both upper-case and lower-case characters equally. This function works similarly as strpos() , the difference is that it is case in-sensitive where as strpos() is case sensitive.Syntax:stripos(original_str, search_str, start_pos)Parameters used:Out of the three parameters specified in the syntax, two are mandatory and one is optionaloriginal_str (mandatory): This parameter refers to the original string in which we need to search the occurrence of required string.search_str (mandatory): This parameter refers to the string that we need to find.start_pos (optional):This parameter refers to the position of the string from where the search must begin.Return Type: This function returns an integer value which represents the index of original_str where the string search_str first occurs.Example:<?php// PHP code to search for a specific string// first occurrence using stripos() case-insensitive functionfunction Search($search, $string){    $position = stripos($string, $search, 5);    if ($position == true){        return \"Found at posiion \" . $position;    }    else{        return \"Not Found\";    }}// Driver Code$string = \"Welcome to GeeksforGeeks\";$search = \"geeks\";echo Search($search, $string);?>Output:  Found at position 11");create(getIdByTitle(this.context,"Strings"),"PHP | strrpos() and strripos() Functions","We already have learned about strpos() and stripos() which helps to find the first occurrence of a string in another string. In this article we will learn about two other similar functions strrpos() and strripos().strrpos() in PHPUnlike strpos(), strrpos() function helps us to find the position of the last occurrence of a string in another string. This function returns an integer value corresponding to the position of the last occurrence of the string. This function is case-sensitive, which means it treats uppercase and lowercase characters differently.Syntax:strrpos(original_str, search_str, start_pos)ParametersOut of the three parameters specified in the syntax, two are mandatory and one is optional. The three parameters are described below:original_str (mandatory):This parameter refers to the original string in which we need to search the occurrence of required string.search_str (mandatory): This parameter refers to the string that we need to search.start_pos (optional): Refers to the position of the string from where the search must begin.Return Type: This function returns an integer value which represents the index of original_str where the string search_str last occurs.Example:<?php// PHP code to search for a specific string\'s position// last occurrence using strpos() case-sensitive functionfunction Search($search, $string){    $position = strrpos($string, $search, 5);    if ($position == true){        return \"Found at position \" . $position;    }    else{        return \"Not Found\";    }}// Driver Code$string = \"Welcome to GeeksforGeeks\";$search = \"Geeks\";echo Search($search, $string);?>Output:  Found at position 19strripos() in PHPUnlike stripos(), strripos() function helps us to find the position of the last occurrence of a string in another string. This function returns an integer value corresponding to the position of the last occurrence of the string. This function is case-insensitive, which means it treats uppercase and lowercase characters equally.Syntax:strrpos(original_str, search_str, start_pos)ParametersOut of the three parameters specified in the syntax, two are mandatory and one is optional. The three parameters are described below:original_str (mandatory):This parameter refers to the original string in which we need to search the occurrence of required string.search_str (mandatory): This parameter refers to the string that we need to search.start_pos (optional): Refers to the position of the string from where the search must begin.Return Type: This function returns an integer value which represents the index of original_str where the string search_str last occurs.Example:<?php// PHP code to search for a specific string// last occurrence using stripos() case-insensitive functionfunction Search($search, $string){    $position = strripos($string, $search, 5);    if ($position == true){        return \"Found at position \" . $position;    }    else{        return \"Not Found\";    }}// Driver Code$string = \"Welcome to GeeksforGeeks\";$search = \"geeks\";echo Search($search, $string);?>Output:  Found at position 19");create(getIdByTitle(this.context,"Strings"),"PHP | highlight_string() function","The highlight_string() function is an inbuilt function in PHP which is used to highlight the text string. It returns output in HTML text format.Syntax:highlight_string( $string, $return )Parameters: This function accepts two parameters as mentioned above and described below:$string: It is the required parameter which specifies the text to be highlighted.$return: It is the optional parameter. If it is True then it provides a highlighted code as a string, instead of printing it on the screen.Return Value: If it is True then it returns highlighted code as a string, otherwise false on failure.Below programs illustrate the highlight_string() function in PHP.Program 1:<?phphighlight_string(\'Welcome to Geeksforgeeks\');?>Output:  <code><span style=\"color: #000000\">  <span style=\"color: #0000BB\"><?php phpinfo</span><span style=\"color: #007700\">();   </span><span style=\"color: #0000BB\">?></span>  </span></code>Program 2:<?phphighlight_string(\'<?php// PHP Program to add two numbersfunction Add( $x, $y){    $sum = $x + $y;    return $sum;}    // Driver Code    echo Add(15, 32);?>\')?>Output:  <code><span style=\"color: #000000\">  <span style=\"color: #0000BB\">  <?php<br /></span><span style=\"color: #FF8000\">  // PHP Program to add two numbers<br /><br />  </span><span style=\"color: #007700\">function </span><span style=\"color: #0000BB\">  Add</span><span style=\"color: #007700\">( </span><span style=\"color: #0000BB\">  $x</span><span style=\"color: #007700\">, </span><span style=\"color: #0000BB\">  $y</span><span style=\"color: #007700\">)<br />{<br />    </span>  <span style=\"color: #0000BB\">$sum </span><span style=\"color: #007700\">= </span>  <span style=\"color: #0000BB\">$x </span><span style=\"color: #007700\">+ </span>  <span style=\"color: #0000BB\">$y</span><span style=\"color: #007700\">; <br />    <br />      return </span><span style=\"color: #0000BB\">$sum</span><span style=\"color: #007700\">;<br />  }<br /><br />    </span><span style=\"color: #FF8000\">  // Driver Code<br />    </span><span style=\"color: #007700\">echo </span>  <span style=\"color: #0000BB\">Add</span><span style=\"color: #007700\">  (</span><span style=\"color: #0000BB\">15</span><span style=\"color: #007700\">  , </span><span style=\"color: #0000BB\">32</span><span style=\"color: #007700\">  );<br /></span><span style=\"color: #0000BB\">?></span>  </span></code>");create(getIdByTitle(this.context,"Strings"),"PHP | iconv() Function","The iconv() function is an inbuilt function in PHP which is used to convert a string to requested character encoding. The iconv() is an international standard conversion application command-line programming interface which converts different character encodings to other encoding types with the help of Unicode conversion.The converted module string represented by a local character set or by another character set, which is Unicode character set or other supported character set depend on the iconv implementation on the system.Syntax:  string iconv ( string $input_charset, string $output_charset, string $str )Parameters: This function accepts three parameters as mentioned above and described below:$input_charset : It is mandatory parameter used to take input characters string set.$output_charset : If you append the string // TRANSLIT to out_charset transliteration is activated.This means that when a character can’t be represented in the target charset, it can be approximated through one or several similarly looking characters.If you append the string // IGNORE, characters that cannot be represented in the target charset are silently discarded. Otherwise, E_NOTICE is generated and the function will return FALSE.$str: The required string which to be converted.Return Value: If a string is successfully converted into requested character encoding then it returns the converted string, otherwise, return FALSE.Examples:  Input :  $str = \"EURO symbol \'€\'\";  Output : Original :EURO symbol \'€\'           TRANSLIT :EURO symbol \'EUR\'           IGNORE  :EURO symbol \'\'           PLAIN :    Input : $str = \"Indian Ruppes \'₹\'\";  Output : Original :Indian Ruppes \'₹\'            TRANSLIT :Indian Ruppes \'INR\'            IGNORE  :Indian Ruppes \'\'            PLAIN :Below programs illustrate the iconv() function in PHP:Program 1:<?php// Illustrate the iconv() function in php// Input string in Indian Ruppes Symbol$str = \"Indian Ruppes \'?\' \";// Print original stringecho \'Original :\', (\"$str\"), PHP_EOL;// Print translating stringecho \'TRANSLIT :\', iconv( \"UTF-8\",\"ISO-8859-1//TRANSLIT\", $str), PHP_EOL;// Print ignoring symbolecho \'IGNORE :\', iconv(\"UTF-8\",    \"ISO-8859-1//IGNORE\", $str), PHP_EOL;// Print plain symbolecho \'PLAIN :\', iconv(\"UTF-8\",         \"ISO-8859-1\", $str), PHP_EOL;?>Output  Original :Indian Ruppes \'₹\'   TRANSLIT :Indian Ruppes \'INR\'   IGNORE  :Indian Ruppes \'\'   PLAIN :Note: PHP Notice: iconv(): Detected an illegal character in input string in /home/90ff059987ef1d6be3414be3dfb0c043.php on line 19Program 2:<?php// Input Euro Symbol $str = \" EURO \'€\' \";// Print original stringecho \'Original :\', (\"$str\"), PHP_EOL;// Print translating stringecho \'TRANSLIT :\', iconv( \"UTF-8\",           \"ISO-8859-1//TRANSLIT\", $str), PHP_EOL;// Print ignoring symbolecho \'IGNORE :\', iconv(\"UTF-8\",            \"ISO-8859-1//IGNORE\", $str), PHP_EOL;// Print plain symbolecho \'Plain :\', iconv(\"UTF-8\",             \"ISO-8859-1\", $str), PHP_EOL;?>Output  Original : EURO \'€\'  TRANSLIT : EURO \'EUR\'  IGNORE : EURO \'\'  PLAIN :");create(getIdByTitle(this.context,"Strings"),"PHP | strncmp() Function","The strncmp() is an inbuilt function in PHP which is used to compare first n character of two strings. This function is case-sensitive which points that capital and small cases will be treated differently, during comparison. This function compares two strings with first n character and tells whether the first string is greater or smaller or equal to the second string.int strncmp( $str1, $str2, $len )Parameters: This function accepts three parameters as mentioned above and described below:$str1: It is mandatory parameter. This parameter refers to the first string to be used in the comparison.$str2: It is mandatory parameter. This parameter refers to the second string to be used in the comparison.$len: It is mandatory parameter which is used to define the first $len number of characters compared.Return Value: This function returns a random integer value depending on the comparison of string which is given below:Returns 0 if the first n character of both strings are equal.Returns a negative value ( < 0), if the first n character of $string2 is greater than $string1.Returns a positive value ( > 0), if the first n character of $string1 is greater than $string2.Below programs illustrate the strncmp() function in PHP.Program 1:<?php// PHP program to illustrate the working of strcmp()$str1 = \"Welcome to GFG\";$str2 = \"Welcome to GeeksforGeeks\";$str3 = \"Welcome\";// In this case both the strings are equalprint_r(strncmp($str1, $str3, 7));echo \"\\n\";// In this case the first is greaterprint_r(strncmp($str2, $str1, 14));echo \"\\n\";// In this case the second is greaterprint_r(strncmp($str3, $str2, 10))?>Output:  0  31  -3Program 2:<?php// PHP program to illustrate the working of strcmp()$str1 = \"GeeksforGeeks\";$str2 = \"geeksforgeeks\";// In this case both the strings are equalprint_r(strncmp($str1, $str2, 13));?>Output:  -32Related Articles:");create(getIdByTitle(this.context,"Strings"),"PHP | str_pad() Function","The str_pad() function is a built-in function in PHP and is used to pad a string to a given length. We can pad the input string by any other string up to a specified length. If we do not pass the other string to the str_pad() function then the input string will be padded by spaces.Syntax :string str_pad($string, $length, $pad_string, $pad_type)Parameters: This function accepts four parameters as shown in the above syntax out of which first two are mandatory to be supplied and rest two are optional. All of these parameters are described below:$string: This parameter is mandatory. It specifies the input string which is needed to be padded.$length: This parameter is also mandatory. It specifies the length of the new string that will be generated after padding the input string $string. If this length is less than or equals the length of input string then no padding will be done.$pad_string: This parameter is optional and its default value is whitespace ‘ ‘. It specifies the string to be used for padding.$pad_type: This parameter is also optional. It specifies which side of the string needs to be padded, i.e. left, right or both. By default it’s value is set to STR_PAD_RIGHT. If we want to pad the left side of the input string then we should set this parameter to STR_PAD_LEFT and if we want to pad both sides then this parameter should be set to STR_PAD_BOTH.Return Value: This parameter returns a new string obtained after padding the input string $string.Examples:  Input : $string = \"Hello World\", $length = 20,           $pad_string = \".\"  Output : Hello World........    Input : $string = \"Geeks for geeks\", $length = 18,          $pad_string = \")\"  Output : Geeks for geeks)))Below programs illustrate the str_pad() function in PHP:Program 1: In this program we will pad to both the sides of the input string by setting last parameter to STR_PAD_BOTH. If the padding length is not an even number, the right side gets the extra padding.<?php   $str = \"Geeks for geeks\";   echo str_pad($str, 21, \":-)\", STR_PAD_BOTH);?>Output:  :-)Geeks for geeks:-)Program 2: In this program we will pad to left side of the input string by setting last parameter to STR_PAD_LEFT.<?php   $str = \"Geeks for geeks\";   echo str_pad($str, 25, \"Contribute\", STR_PAD_LEFT);?>Output:  ContributeGeeks for geeksProgram 3: In this program we will pad to right side of the input string by setting last parameter to STR_PAD_RIGHT.<?php   $str = \"Geeks for geeks\";   echo str_pad($str, 26, \" Contribute\", STR_PAD_RIGHT);?>Output:  Geeks for geeks Contribute");create(getIdByTitle(this.context,"Strings"),"How to get the last n characters of a PHP string?","Write a PHP program to get last n characters of a given string.Examples:  Input : $str = \"GeeksforGeeks!\"          $n = 6   Output : Geeks!    Input : $str = \"GeeksforGeeks!\"          $n = 9  Output : forGeeks!Method 1: Tn this method, traverse the last N characters of the string and keep appending them in a new string.Example:<?php$str = \"GeeksforGeeks!\";$n = 6;// Starting index of the string// where the new string begins$start = strlen($str) - $n;// New string$str1 = \'\';for ($x = $start; $x < strlen($str); $x++) {    // Appending characters to the new string    $str1 .= $str[$x];}// Print new stringecho $str1;?>Output:  Geeks!Method 2: Another way to do this use inbuilt library function substr with parameters as the name of the string.Example:<?php$str = \"GeeksforGeeks!\";$n = 6;$start = strlen($str) - $n;// substr returns the new string.$str1 = substr($str, $start);echo $str1;?>Output:  Geeks!Note: In above example, $start can also take -N to create a sub-string of last n characters");create(getIdByTitle(this.context,"Strings"),"PHP | ctype_space() Function","A ctype_space() function in PHP is used to check whether each and every character of a string is whitespace character or not. It returns True if the all characters are white space, else returns False.Syntax :  ctype_space(string text)Parameter Used:text :- It is a mandatory parameter which specifies the string.Return Value:Returns TRUE if every character in text contains white space, return false otherwise. the blank character this also includes tab, carriage, vertical tab, line feed, and form feed characters.Examples:  Input  : \\r     Output : Yes  Explanation: \\r is create white space      Input  : abc\\r  Output : No     Explanation: characters \"abc\" are not white spaceBelow programs illustrate the ctype_space() function.Program 1: taking a single string<?php// PHP program to check given string is// whitespace character or not$string = \"/n/t/r\";if (ctype_space($string))   echo \"Yes \\n\";else   echo \"No \\n\";?>Output:  NoProgram: 2 Taking an array of string and checking for whitespace using ctype_space() function<?php// PHP program to check given string is// whitespace  character or not$strings = array(\'\\n\\y\\t\\x\\u\\o\', \"\\ngfg\\n\", \"\\t\");// Checking above given strings//by used of ctype_space()function .foreach ($strings as $testcase) {    if (ctype_space($testcase)) {        echo \"Yes \\n\";    } else {        echo \"No \\n\";    }}?>Output:  No   No   YesProgram: 3Takes an example ctype_space() function how to work string in both single quotes ‘ ‘ and double quotes ” ” symbol.<?php// PHP program to check given string is// whitespace  character or not$strings = array(\'\\n\', \"\\n\", \'\\t\', \"\\t\");// Checking above given strings// by used of ctype_space()function .foreach ($strings as $testcase) {    if (ctype_space($testcase)) {        echo \"Yes \\n\";    } else {        echo \"No \\n\";    }}?>Output:  No   Yes   No   Yes");create(getIdByTitle(this.context,"Strings"),"PHP | ctype_upper() Function","The ctype_upper() function in PHP used to check each and every character of a given string is in uppercase or not. If the string in upper case then it returns TRUE otherwise returns False.Syntax:  ctype_upper (string text)Parameter Used:-$text : The tested string.Return Value:Function returns True if each character of text in Upper Case or False if text is not in upper case.Examples:  Input  : GEEKSFORGEEKS  Output : Yes  Explanation: All characters of  \"GEEKSFORGEEKS\"                in UPPERCASE.    Input  : GFG2018  Output : No  Explanation : In text \"GFG2018\",  \'2\', \'0\', \'1\', \'8\'                are not in UPPERCASE.    Input : GFG INDIA  Output : No  Explanation : In String \"GFG INDIA\" a special character [space]                 between GFG and INDIA. so answer will be No.Note: Except string, if we input anything then it will return FALSE.Below program illustrates the ctype_upper() function in PHP:Program: 1<?php// PHP program to check given string is// all characters -Uppercase characters$string1 = \'GEEKSFORGEEKS\';   if (ctype_upper($string1)) {        // if true then return Yes        echo \"Yes\\n\";    } else {        // if False then return No        echo \"No\\n\";    }?>Output:  YesProgram: 2 passing array of string as text and print result for individual values.<?php// PHP program to check given string is// all characters -Uppercase characters$strings = array(\'GEEKSFORGEEKS\', \'First\',                \'PROGRAMAT2018\', \'ARTICLE\');// Checking above given four strings//by used of ctype_upper() function .foreach ($strings as $test) {    if (ctype_upper($test)) {        // if true then return Yes        echo \"Yes\\n\";    } else {        // if False then return No        echo \"No\\n\";    }}?>Output:  Yes  No  No  YesProgram: 3 Drive a code ctype_upper() function where input will be space, special symbol, returns False.<?php// PHP program to check given string is// all characters -Uppercase characters$strings = array(\'GEEK @ . com\');// Checking above given four strings//by used of ctype_upper() function .foreach ($strings as $test) {    if (ctype_upper($test)) {        // if true then return Yes        echo \"Yes\\n\";    } else {        // if False then return No        echo \"No\\n\";    }}?>Output:  No");create(getIdByTitle(this.context,"Strings"),"PHP | ctype_print() Function","The ctype_print() Function in PHP used to check each and every character of a string are visible or not. If all characters of string are visible then returns TRUE , else if there are any control character then return FALSE.Control Character: A character that does not represent a printable character but serves to initiate a particular action. for example ‘\\n’ is a control character which is not printable but perform action “Next Line”Syntax:  ctype_print(string text)Parameter Used:$text : The tested string. Its a mandatory parameter.Return Values:This function return TRUE if all characters of string are printable(not containing any control character). And return FALSE if string contains any control character.Examples:  Input  : Geeks for geeks article  Output : Geeks for geeks article -->Yes visible    Explanation : The string contains three blank space                and the function returns TRUE.     Input  : \\tgfg\\n  Output :     gfg  --> No visible    Explanation : \'\\t\' and \'\\n\' are control character .              Then the function returns False.Program: 1<?php// PHP program to illustrate// ctype_print() function$string = \'GFG A Computer Science Portal\';// Checking above given strings// by used of ctype_print() function .if (ctype_print($string)) {    // if true then return Yes    echo \"$string: Yes visible\\n\";} else {    // if False then return No    echo \"$string: Not visible\\n\";}?>Output:  GFG A Computer Science Portal: Yes visibleProgram: 2 Drive a code of ctype_print() function where input will be integer, symbols in array of strings.<?php// PHP program to illustrate// ctype_print() function$strings = array(    \"GeeksforGeeks\",    \"GFG2018\",    \"\\nComputerScience\",    \"G 4 G\",    \"@#$$.&*()_+;?~\",    \"78 96 . 90\");// Checking above array of strings// by used of ctype_print() function.foreach ($strings as $str) {    if (ctype_print($str)) {        // if true then return Yes        echo \"$str:   (Yes visible)\\n\";    } else {        // if False then return No        echo \"$str:   (No visible)\\n\";    }}?>Output:  GeeksforGeeks:   (Yes visible)  GFG2018:   (Yes visible)    ComputerScience:   (No visible)  G 4 G:   (Yes visible)  @#$$.&*()_+;?~:   (Yes visible)  78 96 . 90:   (Yes visible)");create(getIdByTitle(this.context,"Strings"),"PHP | strval() Function","The strval() function is an inbuilt function in PHP and is used to convert any scalar value (string, integer, or double) to a string. We cannot use strval() on arrays or on object, if applied then this function only returns the type name of the value being converted.Syntax:strval( $variable )Parameter: This function accepts a single parameter $variable. This parameter represents the value which we want to convert to stringReturn value: This function returns a string. This string is generated by typecasting the value of the variable passed to it as a parameter.Below programs illustrate the strval() function.Program 1:<?php$var_name = 32.360;// prints the value of above variable// as a stringecho strval($var_name);?>Output:  32.36Program 2:<?phpclass geeksforgeeks{    public function __toString()    {        // returns the class name        return __CLASS__;    }}// prints the name of above class as// a stringecho strval(new geeksforgeeks);?>Output:  geeksforgeeksProgram 3:<?php// Program to illustrate the strval() function// when an array is passed as parameter// Input array$arr = array(1,2,3,4,5);// This will print only the type of value// being converted i.e. \'Array\'echo strval($arr);?>Refrence:http://php.net/manual/en/function.strval.php");create(getIdByTitle(this.context,"Strings"),"PHP | trim() Function","The trim() function in PHP is an inbuilt function which removes whitespaces and also the predefined characters from both sides of a string that is left and right.Related Functions:Syntax:  trim($string, $charlist)Parameters:The function accepts one mandatory parameter and one optional parameter as shown in the above syntax and described below.$string: This parameter specifies the string from which the whitespace and predefined characters from left and right are to be removed$charlist: This is an optional parameter which specifies the characters that are to be removed from the string. If this is not mentioned then all of the following characters will be removed:“\\0” – NULL“\\t” – tab“\\n” – new line“\\x0B” – vertical tab“\\r” – carriage return” ” – ordinary white spaceReturn Value: It returns the modified string by removing the whitespace and also the predefined characters from both sides of a string that is left and right.Below programs illustrate the trim() function:Program 1:<?php// PHP program to demonstrate the use of trim()// function when second parameter is present// removes the predefined characters from// front and back$str = \"Hello World!\";echo trim($str, \"Hell!\");?>Output:  o WorldProgram 2:<?php// PHP program to demonstrate the use of trim()// function when second parameter is absent$str = \"  geeks for geeks \";// removes all leading and trailing whitespacesecho trim($str);?>Output:geeks for geeks");create(getIdByTitle(this.context,"Strings"),"PHP | crc32() Function","The crc32() function helps us to calculate a 32-bit crc or cyclic redundancy checksum polynomial for a string. The function uses the CRC32 algorithm.This function can be used to validate data integrity.However, to ensure that we get the correct string representation from the crc32() function, we need to use the %u formatter of the printf() or sprintf() function. If the %u formatter is not used, the result may display incorrect and negative numbers.Syntax:  crc32($string)Parameter:$string: This parameter specifies the string for which we want to find the crc32 polynomial.Return Value : The crc32() function returns the crc32 checksum of the given string as an integer.Examples:  Input : Hello world.  Output : 2335835140    Input : Geeks For Geeks.  Output : 2551101144Below programs illustrate the crc32() function.Program 1 : This program helps us to calculate a 32-bit CRC for the string “Hello World”, both with %u and without %u.<?php// PHP program illustrate the// crc32() function$str1 = crc32(\"Hello world.\");// print without %uecho \'Without %u: \'.$str1.\"\\n\";// print with %uecho \'With %u: \';printf(\"%u\\n\", $str1);?>Output:  Without %u: 2335835140  With %u: 2335835140Program 2 : This program helps us to calculate a 32-bit CRC for the string “GeeksforGeeks.”, both with %u and without %u.<?php$str2 = crc32(\"GeeksforGeeks.\");// print without %uecho \'Without %u: \'.$str2.\"\\n\";// print with %uecho \'With %u: \';printf(\"%u\\n\", $str2);?>Output:  Without %u: 3055367324  With %u: 3055367324Program 3 : This program helps us to calculate a 32-bit CRC for the string “Computer Science.”, both with %u and without %u.<?php$str3 = crc32(\"Computer Science.\");// print without %uecho \'Without %u: \'.$str3.\"\\n\";// print with %uecho \'With %u: \';printf(\"%u\\n\", $str3);?>Output:  Without %u: 3212073516  With %u: 3212073516");create(getIdByTitle(this.context,"Strings"),"PHP | ucfirst() Function","The ucfirst() function is a built-in function in PHP which takes a string as an argument and returns the string with the first character in Upper Case and all other characters remain unchanged.Syntax:ucfirst($string)Parameter: The function accepts only one parameter $string which is mandatory. This parameter represents the string whose first character will be changed to uppercase.Return Value: The function returns the same string only by changing the first character to upper case of the passed argument $string.Examples:  Input : \"geeks for geeks\"  Output : Geeks for geeks    Input : \"Chetna Agarwal\"  Output : Chetna AgarwalBelow programs illustrate the ucfirst() function in PHP:Program 1: The program below demonstrates the use of ucfirst() function.<?php    // PHP program that demonstrates the    // use of ucfirst() function    $str = \"geeks for geeks\";    // converts the first case to upper case    // and prints the string    echo(ucfirst($str));?>Output:Geeks for geeksProgram 2: The program below demonstrates the use of ucfirst() function when the starting character is in upper-case.<?php    // PHP program that demonstrates the    // use of ucfirst() function when    // the first case is already in uppercase    $str = \"Chetna Agarwal\";    // already the first character is in upper case    // so prints the same string only    echo(ucfirst($str));?>Output:Chetna Agarwal");create(getIdByTitle(this.context,"Strings"),"PHP | ucwords() Function","The ucwords() function is a built-in function in PHP and is used to convert the first character of every word in a string to upper-case.Syntax:  string ucwords ( $string, $separator )Parameter: This function accepts two parameters out of which first is compulsory and second is optional. Both of the parameters are explained below:$string: This is the input string of which you want to convert the first character of every word to uppercase.$separator: This is an optional parameter. This parameter specifies a character which will be used a separator for the words in the input string. For example, if the separator character is ‘|’ and the input string is “Hello|world” then it means that the string contains two words “Hello” and “world”.Return value: This function returns a string with the first character of every word in uppercase.Examples:  Input : $str  = \"Geeks for geeks\"          ucwords($str)  Output: Geeks For Geeks    Input : $str  = \"going BACK he SAW THIS\"          ucwords($str)  Output: Going BACK He SAW THISBelow programs illustrate the ucwords() function in PHP:Program 1:<?php// original string$str  = \"Geeks for geeks\";// string after converting first character// of every word to uppercase$resStr = ucwords($str);print_r($resStr);?>Output:  Geeks For GeeksProgram 2:<?php// original string$str = \"Geeks#for#geeks #PHP #tutorials\";$separator = \'#\';// string after converting first character// of every word to uppercase$resStr = ucwords($str, $separator);print_r($resStr);?>Output:  Geeks#For#Geeks #PHP #TutorialsNote: You should not use the character ‘$’ as a separator because any name in PHP that starts with $ is considered as a variable name. So, your program may give an error that variable not found.");create(getIdByTitle(this.context,"Strings"),"PHP | lcfirst() Function","The lcfirst() function is a built-in function in PHP which takes a string as an argument and returns the string with the first character in Lower Case and all other characters remain unchanged.Syntax:lcfirst($string)Parameter: The function accepts only one parameter $string which is mandatory. This parameter represents the input string whose first character will be changed to lowercase.Return Value: The function returns the same string only by changing the first character to lower case of the passed argument $string.Examples:  Input : \"Geeks for geeks\"  Output : geeks for geeks    Input : \"chetna agarwal\"  Output : chetna agarwalBelow programs illustrate the lcfirst() function in PHP:Program 1:<?php    // PHP program to demonstrates the    // use of lcfirst() function    $str = \"Geeks for geeks\";    // converts the first character to    // lower case and prints the string    echo(lcfirst($str));?>Output:geeks for geeksProgram 2: The program below demonstrates the use of lcfirst() function when the starting character is already in lower-case.<?php    // PHP program that demonstrates the    // use of lcfirst() function when    // the first case is already in lowercase    $str = \"chetna agarwal\";    // already the first character is in lower case    // so prints the same string only    echo(lcfirst($str));?>Output:chetna agarwal");create(getIdByTitle(this.context,"Strings"),"PHP | strlen() Function","The strlen() is a built-in function in PHP which returns the length of a given string. It takes a string as a parameter and returns its length. It calculates the length of the string including all the whitespaces and special characters.Syntax:strlen($string)Parameters: The strlen() fucntion accepts only one parameter $string which is mandatory. This parameter represents the string whose length is needed to be returned.Return Value: The fucntion returns the length of the $string including all the whitespaces and special characters.Examples:  Input : \"abc\"  Output : 3    Input : \"\\n chetna ;\"  Output : 10  Explanation : \'\\n\' is considered as a single character                as it is an escape sequence.    Input : \"geeks for geeks\"   Output :15Below programs illustrate the strlen() function in PHP:Program 1: The below program demonstrates the use of strlen() function in PHP.<?php    // PHP program to find the    // length of a given string    $str = \"geeks for geeks\";    // prints the length of the string    // including the space    echo strlen($str);?>Output:15Program 2: The below program demonstrates the use of strlen() function in PHP where the string has special characters and escape sequences.<?php    // PHP program to find the    // length of a given string which has    // special characters    $str = \"\\n chetna ;\";    // here \'\\n\' has been counted as 1    echo strlen($str);?>Output:10");create(getIdByTitle(this.context,"Strings"),"PHP | quotemeta() Function","The quotemeta() function is an inbuilt function in PHP which accepts a string as an argument and returns a string which has backslashes added in front of some predefined characters in a string.The predefined characters are:period (.)backslash (\\)plus sign (+)asterisk (*)question mark (?)brackets ([])caret (^)dollar sign ($)parenthesis (())Syntax: quotemeta($string)Parameter: This function accepts only one parameter $string which is mandatory. This parameter specifies the string in which we want to add backslashes in front of the above mentioned predefined characters.Return Value: It returns a string by adding backslashes in front of the predefined characters in the $string argument.Examples:  Input:  $str = \"geek$ for geeks?\"  Output: geek\\$ for geeks\\?    Input: $str = \"+geek* for geeks.\"  Output: \\+geek\\* for geeks\\.Below programs illustrate the quotemeta() function in PHP:Program 1: When string has ‘?’ and ‘$’ predefined characters<?php// PHP program to demonstrate the// working of quotemeta() function$str = \"geek$ for geeks?\";// prints the string by adding backslashes// in front of the predefined characters// \'$\' and \'?\'echo(quotemeta($str));?>Output:geek\\$ for geeks\\?Program 2: When string has ‘*’, ‘.’ and ‘+’ predefined characters<?php// PHP program to demonstrate the// working of quotemeta() function$str = \"+geek* for geeks.\";// prints the string by adding backslashes// in front of the predefined charactersecho(quotemeta($str));?>Output:\\+geek\\* for geeks\\.Program 3: When string has brackets and paranthesis as predefined characters.<?php// PHP program to demonstrate the// working of quotemeta() function$str = \"[]geek for geeks()\";// prints the string by adding backslashes// in front of the predefined characters// brackets and paranthesisecho(quotemeta($str));?>Output:\\[\\]geek for geeks\\(\\)Program 4: When string has caret (^) as predefined character.<?php// PHP program to demonstrate the// working of quotemeta() function$str = \"2 ^ 2 = 4\";// prints the string by adding backslashes// in front of the predefined characters// caret (^)echo(quotemeta($str));?>Output:2 \\^ 2 = 4");create(getIdByTitle(this.context,"Strings"),"PHP | ltrim() Function","The ltrim() function is a built-in function in PHP which removes whitespaces or other characters (if specified) from the left side of a string.Syntax:ltrim( $string, $charlist )Parameters: The function ltrim() accepts two parameters as shown in the above syntax. Out of these two parameters, one is mandatory while the other one is optional. They are discussed in details below:$string : This mandatory parameter specifies the string to be checked.$charlist : This optional parameter specifies which characters are to be removed from the string.In case, this parameter is not provided, the following characters are removed :“\\0” – NULL“\\t” – tab“\\n” – new line“\\x0B” – vertical tab“\\r” – carriage return” “ – ordinary white spaceReturn Value: Returns the modified string.Examples:  Input : $string = \"            Geeks for Geeks\"  Output : Geeks for Geeks    Input : $string = \"!!! (( !!)) Geeks for Geeks\", $charlist = \"! ()\"  Output : Geeks for GeeksBelow programs illustrate the ltrim() function :Program 1 : This program shows the use of ltrim() function without any specified list of characters to be removed.<?php$string = \"            Geeks for Geeks\";echo \"Contribute to \".ltrim($string);?>Output:Contribute to Geeks for GeeksProgram 2: This program shows the use of ltrim() function with a specified list of characters to be removed.<?php$string = \"!!! (( !!)) Geeks for Geeks\";// The characters \'!\', \'(\', \')\', \' \' have// been specified to remove from the// beginning of the stringecho ltrim($string, \"! ()\");?>Output:Geeks for Geeks");create(getIdByTitle(this.context,"Strings"),"PHP | rtrim() Function","The rtrim() function is a built-in function in PHP which removes whitespaces or other characters (if specified) from the right side of a string.Syntax:rtrim( $string, $charlist )Parameters: The function rtrim() accepts two parameters as shown in the above syntax. Out of these two parameters, one is mandatory while the other one is optional. They are discussed in details below :$string: This mandatory parameter specifies the string to be checked.$charlist: This optional parameter specifies which characters are to be removed from the string.In case, this parameter is not provided, the following characters are removed :“\\0” – NULL“\\t” – tab“\\n” – new line“\\x0B” – vertical tab“\\r” – carriage return” “ – ordinary white spaceReturn Value: Returns the modified string.Examples:  Input : $string = \"Geeks for Geeks    \"  Output : Geeks for Geeks    Input : $string = \"Geeks for !!! (( !!))\", $charlist = \"! ()\"  Output : Geeks forBelow programs will illustrate rtrim() function :Program 1: This program shows the use of rtrim() function without any specified list of characters to be removed.<?php$string = \"Geeks for    \";echo rtrim($string).\" Geeks\";?>Output:Geeks for GeeksProgram 2: This program shows the use of rtrim() function with a specified list of characters to be removed.<?php$string = \"Geeks for !!! (( !!))\";// The characters \'!\', \'(\', \')\', \' \' have been specified// to remove from the end of the stringecho rtrim($string, \"! ()\").\" Geeks\";?>Output:Geeks for Geeks");create(getIdByTitle(this.context,"Strings"),"PHP | str_word_count() Function","The str_word_count() function is a built-in function in PHP and is used to return information about words used in a string like total number word in the string, positions of the words in the string etc.Syntax:str_word_count ( $string , $returnVal, $chars )Parameters Used:$string:This parameter specifies the string whose words the user intends to count.This is not an optional parameter.$returnVal:The return value of str_word_count() function is specified by the $returnVal parameter. It is an optional parameter and its default value is 0.The parameter can take below values as required:0 :It returns the number of words in the string $string.1 :It returns an array containing all of the words which are found in the string.2 :It returns an associative array with key-value pairs, where the key deifnes the position of the word in the string and the value is the word itself.$chars:This is an optional parameter which specifies a list of additional characters which shall be considered as a ‘word’.Return Type: The return type of function depends on the parameter $returnVal and return the values as described above.Below programs explain the working of str_word_count() function:Calculating the number of words in a string: To Display only the number of words in a string,the str_word_count() function should be executed in the following way:<?php$mystring = \"Twinkle twinkl4e little star\";print_r(str_word_count($mystring));?>Output:5Find the words in a string: To return an array containing the words in a string,the str_word_count() function should be executed in the following way:<?php$mystring = \"Twinkle twinkl4e little star\";print_r(str_word_count($mystring, 1));?>Output:Array ( [0] => Twinkle [1] => twinkl [2] => e [3] => little [4] => star )Find words in a string along with numeric position of the words: To return an array containing the words in a string along with numeric position of the words,the str_word_count() function should be executed in the following way:<?php$mystring = \"Twinkle twinkl4e little star\";print_r(str_word_count($mystring, 2));?>Output:Array ( [0] => Twinkle [8] => twinkl [15] => e [17] => little [24] => star )Find words in a string when some special character are considered as word: To return an array containing the words in a string where a character shall be considered as a word, the str_word_count() function should be executed in the following way:<?php$mystring = \"Twinkle twinkl4e little star\";print_r(str_word_count($mystring, 2 ,4));?>Output:Array ( [0] => Twinkle [8] => twinkl4e [17] => little [24] => star )");create(getIdByTitle(this.context,"Strings"),"PHP | strnatcasecmp() Function","The strnatcasecmp() function is a built-in function in PHP which compares this string using “natural order” algorithm. This function accepts two strings as parameter and returns an integer value (positive, negative or zero ). This function is similiar to strnatcmp() with the only difference being the case-insensitivity of the function.Syntax:strnatcasecmp( $string1, $string2 )Parameters: The function accepts two mandatory string parameters as shown in the above syntax. These parameters are defined below :$string1: This parameter specifies the first string to be compared.$string2: This parameter specifies the second string to be compared.Return Values: This function returns a positive integer, negative or 0 based on the below conditions:Returns 0 if the two strings are equalReturns a positive value (>0) if the $string1 is greater than $string2.Returns a negative value (<0) if the $string1 is less than $string2.Examples:  Input : $string = \"Geek\", $string2 = \"GEEK\"  Output : 0    Input : $string = \"Geeks\", $string2 = \"Geek\"  Output : 1Below programs illustrate the strnatcasecmp() function:Program 1: This program illustrates simple use of the strnatcasecmp() function.<?phpecho strnatcasecmp(\"Geeks\", \"Geek\");?>Output1Program 2: This program illustrates case-insensitivity of the strnatcasecmp() function.<?php// Case-insensitive strnatcasecmp() functionecho strnatcasecmp(\"Geeks\", \"GEEKS\");echo \"\\n\";// Case-sensitive strnatcmp() functionecho strnatcmp(\"Geeks\", \"GEEKS\");?>Output0  1");create(getIdByTitle(this.context,"Strings"),"PHP | strnatcmp() function","The strnatcmp() is a built-in function on PHP. This function compares two strings using a “natural order” algorithm and return a positive integer, negative or zero. This function is case-sensitive.Syntax:strnatcmp( $string1, $string2 )Parameters: The functions accepts two mandatory string parameters for comparison as shown in the above syntax.$string1: This parameter specifies the first string to compare.$string 2: This parameter specifies the first string to compare.Return Value: This function returns an integer value based on the following criteria:The function returns 0 if both the strings are equal.The function returns a negative value(<0) if $string1 is less than $string2.The function returns a positive value(>0) if $string2 is less than $string1.Examples:  Input : $string1 = \"Hello\", $string2 = \"HEllo\"  Output : 1    Input : $string1 = \"Geek\", $string2 = \"Geeks\"  Output : -1Below programs illustrate the strnatcmp() function in PHP :Program 1: This program shows simple use of the strnatcmp() function.<?php    echo strnatcmp(\"Geek\", \"Geeks\");?>Output:-1Program 2: This program shows case-sensitivity of the strnatcmp() function.<?php    echo strnatcmp(\"Geeks\", \"GEEks\");?>Output:1Program 3: This program illustrates the difference between strcmp() and strnatcmp() functions.<?php    echo strnatcmp(\"Geek of month 2\", \"Geek of month 10\");    echo \"\\n\";    echo strcmp(\"Geek of month 2\", \"Geek of month 10\");?>Output:-1  256Explanation : In a natural algorithm, the number 2 is less than the number 10 whereas in computer sorting, 10 is considered to be less than 2 as the first number in “10” is less than 2.");create(getIdByTitle(this.context,"Strings"),"PHP | addcslashes() Function","The addcslashes() function is a built-in function in PHP. The addcslashes() function is used to add backslashes before some specified characters in a given string.Syntax:  string addcslashes($string, $characters)Parameters: This function accepts two parameters as shown in the above syntax and are described below:$string: This parameter specifies the input string which is needed to be escaped. Or we can also say that the string in which we want to add backslashes before some specified characters.$characters: This parameter specifies a character or sequence of characters which we want to escape in the input string by adding backslashes before them. We can specify a range of characters as ‘a..z’. That is the start character of the range followed by two dots and the ending character.Note: Please use characters like a,b,n,t etc carefully as this parameter as \\a,\\b,\\n,\\t are predefined escape sequences and have some special meaning. So, we might not get the desired result.Return Value: This function returns a escaped string which is the input string $string with backslashes added before $characters.Examples:  Input: $string = \"GeeksforGeeks\"  $characters = \'e\'  Output: G\\e\\eksforG\\e\\eks    Input: $string = \"GeeksforGeeks\" $characters = \'a..k\'  Output: G\\e\\e\\ksnG\\e\\e\\ksBelow programs illustrate the addcslashes() function in PHP:Program 1:<?php// PHP program to illustrate addcslashes()// function$str = \"GeeksforGeeks\";$resStr = addcslashes($str, \'e\');echo $resStr;?>Output:  G\\e\\eksforG\\e\\eksProgram 2:<?php// PHP program to illustrate addcslashes()// function$str = \"GeeksnGeeks\";$resStr = addcslashes($str, \'a..k\');echo $resStr;?>Output:  G\\e\\e\\ksnG\\e\\e\\ks");create(getIdByTitle(this.context,"Strings"),"PHP | addslashes() Function","The addslashes() function is an inbuilt function in PHP and it returns a string with backslashes in front of predefined characters. It does not take any specified characters in the parameter.The predefined characters are:single quote (‘)double quote (“)backslash (\\)NULLNote: The addslashes() function is different from addcslashes() function accepts specified characters before which be want to add slashes but the addslashes() function doesnot accepts any character in parameters, rather it adds slashes before some specified characters.Syntax:  addslashes($string)Parameters: The addslashes() function accepts only one parameter $string which specifies the input string which is needed to be escaped. We can also say that this parameter specifies a string in which we want to add backslashes before the pre-defined characters.Return value: It returns the escaped string with backslashes in front of the pre-defined characters which is passed in the parameter.Examples:  Input : $string = \"Geek\'s\"  Output : Geek\\\'s    Input : $string=\'twinkle loves \"coding\"\'  Output : twinkle loves \\\"coding\\\"Below programs illustrate the addslashes() function in PHP:Program 1:<?php// PHP program to demonstrate the// working of addslashes() function// Input String$str = addslashes(\'twinkle loves \"coding\"\');// prints the escaped stringecho($str);?>Output:  twinkle loves \\\"coding\\\"Program 2:<?php// PHP program to demonstrate the// working of addslashes() function// Input String$str = addslashes(\"Geek\'s\");// prints the escaped stringecho($str);?>Output:Geek\\\'s");create(getIdByTitle(this.context,"Strings"),"PHP | stripslashes() Function","The stripslashes() function is a built-in function in PHP. This function removes backslashes in a string.Syntax:stripslashes(string)Parameter: This function accepts only one parameter as shown in the above syntax. It is described below:string: This is the only parameter required which specifies the string on which the function will operate.Return Values: This function returns a string with backslashes stripped off.Examples:  Input : \"Geeks for\\ Geeks\"  Output : Geeks for Geeks    Input : \"A\\ Computer \\Science \\Portal\"  Output : A Computer Science PortalBelow programs illustrate the stripslashes() function in PHP:Program 1:<?php    //code    $str = \"Geeks for\\ Geeks\";    echo stripslashes($str);?>Output:Geeks for GeeksProgram 2: In this program we will see the array implementation of stripslashes() function. stripslashes() is not recursive. In order to apply this function to an array, a recursive function is required.<?phpfunction stripslashes_arr($value){    $value = is_array($value) ?                array_map(\'stripslashes_arr\', $value) :                stripslashes($value);    return $value;}$array = array(\"Gee\\\\ks \", \"fo\\\\r\", \" \\\\Geeks\");$array = stripslashes_arr($array);print_r($array);?>Output:Array  (      [0] => Geeks       [1] => for      [2] =>  Geeks  )");create(getIdByTitle(this.context,"Strings"),"PHP | bin2hex() Function","The bin2hex() function in PHP converts a string to hexadecimal values. The conversion is done byte-wise with the high-nibble first.Note: It is not for converting strings representing binary digits into hexadecimal.Syntax:bin2hex($string)Parameters: This function accepts a single parameter $string. This is the string that will be converted to hexadecimal values.Return Value: The function returns the hexadecimal value of the string passed in the parameter.Examples:  Input : string = \"geeks\"  Output : 6765656b73    Input : string = \"1111\"  Output : 31313131   Explanation: \"1111\" is converted to its hexadecimal   values, it is not treated as a binary string, else the   answer would have been F which is not in this case.Below programs illustrate the bin2hex() function in PHP:Program 1:<?php// PHP program to demonstrate// the bin2hex() fucntion$str = \"geeks\";echo bin2hex($str);?>Output:6765656b73Program 2:<?php// PHP program to demonstrate// the bin2hex() fucntion$str = \"1111\";echo bin2hex($str);?>Output:31313131");create(getIdByTitle(this.context,"Strings"),"PHP | similar_text() Function","The similar_text() function is a built-in function in PHP. This function calculates the similarity of two strings and returns the number of matching characters in the two strings. The function operates by finding the longest first common sub-string, and repeating this for the prefixes and the suffixes, recursively. The sum of lengths of all the common sub-strings is returned.It can also calculate the similarity of the two strings in percent. The function calculates the similarity in percent, by dividing the result by the average of the lengths of the given strings times 100.Syntax :similar_text( $string1, $string2, $percent)Parameters: This function accepts three parameters as shown in the above syntax out of which first two must be supplied and last one is optional. All of these parameters are described below:$string1, $string2 : These mandatory parameters specify the two strings to be compared$percent : This parameter is optional. It specifies a variable name for storing the similarity in percent. By passing a reference as third argument, the function will calculate the similarity in percentage.Return Value : It returns the number of matching characters between the two strings.Examples:  Input : $string1 = \"code\", $string2 = \"coders\"  Output : 4 (80 %)    Input : $string1 = \"hackers\", $string2 = \"hackathons\"  Output : 5 (58.823529411765 %)Below programs illustrate the similar_text() function:Program 1 :<?php$sim = similar_text(\"hackers\", \"hackathons\", $percent);// To display the number of matching charactersecho \"Number of similar characters : $sim\\n\";// To display the percentage of matching charactersecho \"Percentage of similar characters : $percent\\n\";?>Output  Number of similar characters : 5  Percentage of similar characters : 58.823529411765>Program 2 : This program will highlight the case-sensitivity of the function.<?php$output = similar_text(\"geeks for geeks\",                 \"Geeks for Geeks\",  $percent);// To display the number of matching charactersecho \"Number of similar characters : $output\\n\";// To display the percentage of matching charactersecho \"Percentage of similar characters : $percent\\n\";?>Output:  Number of similar characters : 13  Percentage of similar characters : 86.666666666667Program 3: The order of passing the strings is very important. Altering the variables will give a different result.<?php$output1 = similar_text(\"with mysql\", \"php is best\");// To display the number of matching charactersecho \"Number of similar characters : $output1\\n\";$output2 = similar_text( \"php is best\", \"with mysql\");// To display the number of matching charactersecho \"Number of similar characters : $output2\\n\";?>Output:  Number of similar characters : 2  Number of similar characters : 3");create(getIdByTitle(this.context,"Strings"),"PHP | ord() Function","The ord() function is a inbuilt function in PHP that returns the ASCII value of the first character of a string. This function takes a character string as a parameter and returns the ASCII value of the first character of this string.Syntax:int ord($string)Parameter: This function accepts a single parameter $string. This is a mandatory parameter from which we get an ASCII value.Return value: This function returns an integer value which represents the ASCII value of the first character in the string passed to this function as a parameter.Examples:  Input : Geeksforgeeks  Output : 71  Explanation: The ASCII value of G is 71    Input : twinkle  Output : 116  Explanation: The ASCII value of t is 116Below programs illustrate the ord() function in PHP:Program 1:<?php// PHP program to illustrate the ord() function// ASCII value of \'t\' is printed.echo ord(\"twinkle\");?>Output:  116Program 2:<?php// PHP program to illustrate the ord() function// ASCII value of \'G\' is printedecho ord(\"Geeksforgeeks\");?>Output:71");create(getIdByTitle(this.context,"Strings"),"PHP | chunk_split() Function","The chunk_split() function is a built-in function in PHP. The chunk_split() function is used to split a string into smaller chunks of specific length.Syntax:  string chunk_split($string, $length, $end)Parameters: This function accepts three parameters as shown in the above syntax and are described below:$string: This parameter specifies a string which is needed to be chunked.$length: This parameter specifies an integer which specifies the chunk length. That is the length of the chunked parts.$end: This parameter specifies the line ending sequence.Return value: This function returns the string spllited into smaller chunks.Examples:  Input : string = \"geeksforgeeks\"           length = 4          end = \".\"  Output: Geek.sfor.Geek.s.       Input: string = \"Twinkle bajaj\"          length = 2          end = \"*\"   Output: Tw*in*kl*e *ba*ja*j*Below programs illustrate the chunk_split() function in PHP:Program 1:<?php// PHP program to illustrate the// chunk_split function$str = \"Twinkle bajaj\";echo chunk_split($str, 2, \"*\");?>Output:  Tw*in*kl*e *ba*ja*j*Program 2:<?php// PHP program to illustrate the// chunk_split function$str = \"geeksforgeeks\";// Returns a string with a \'.\'// placed after every four characters.echo chunk_split($str, 4, \".\");?>Output:  geek.sfor.geek.s.Program 4:<?php// PHP program to illustrate the// chunk_split function$str = \"abcd\";echo chunk_split($str, 4, \"@@\");?>Output:  abcd@@Program 5:<?php// PHP program to illustrate the// chunk_split function// If specified length is more than// string length, then added at the// end.$str = \"abcd\";echo chunk_split($str, 10, \"@@\");?>Output:  abcd@@");create(getIdByTitle(this.context,"Strings"),"PHP | wordwrap() Function","The wordwrap() function is a built-in function in PHP. This function wraps a given string to a given number of characters using a string break character.Syntax:  string wordwrap ($str, $width, $break, $cut )Parameters : The function accepts 4 parameters as shown in the above syntax and are described below:$str: This parameter specifies the input string which is needed to break up into lines.$width: This parameter specifies the number of characters at which the string will be wrapped. That is number of characters after whih the string will break.$break: This is an optional parameter and if specified appends the value at the point of breaking the string.$cut: It is a boolean parameter, if this parameter is set to TRUE, then the string is always wrapped at or before the specified width. That is it will also break a word from between if it comes in middle of the constraint specified by the parameter $width. When this parameter is set to FALSE the function does not split the word even if the width is smaller than the word width.Return Value: The function returns a string wrapped upto specified length i.e. the string broken into lines on success, or FALSE on failure.Below programs illustrate the wordwrap() function in PHP :Program 1 :<?php// Input string$str = \"keep practicing at geeksforgeeks\";// prints the wrapped stringecho wordwrap($str, 15, \"\\n\", TRUE);?>Output:  keep practicing  at  geeksforgeeksProgram 2 :<?php// Input String$text = \"Be a part of geeksforgeeks.\";// Wrapped string$newtext = wordwrap($text, 8, \"\\n\", TRUE);echo \"$newtext\\n\";?>Output:  Be a  part of  geeksfor  geeks.");create(getIdByTitle(this.context,"Strings"),"PHP | chop() Function","The chop() in PHP is used to remove white spaces or any other specified characters from the end of a string.Syntax:  string chop($string, $character)Parameters: This function accepts two parameters as shown in the above syntax and are described below:$string : It is used to specify the string which is needed to be checked.$character : It specifies the character which is needed to be removed from the given string. If this parameter is not specified then NULL, tab, newline, vertical tab, carriage return and ordinary white space are removed automatically.Return Value: The return type of the chop() function is string. It returns the string after removing the specified characters from the end.Program 1: In the below program a string is initialized as hello geeks!, by using chop() function the characters – ‘s’ and ‘!’ are removed from the end of the string.<?php$s= \"Hello Geeks!\";echo $s. \"\\n\";echo chop($s, \"s!\");?>Output:  Hello Geeks!  Hello GeekProgram 2: In the below program, since no character parameter is mentioned. Then automatically the newlines will be removed from the given string.<?php$s= \"Hello Geeks! \\n best wishes \\n \\n\";echo $s;echo chop($s);echo $s;?>Output:  Hello Geeks!    best wishes      Hello Geeks!    best wishesHello Geeks!    best wishes");create(getIdByTitle(this.context,"Strings"),"PHP | simplexml_load_string() Function","Sometimes there is a need of parsing XML data in PHP. There are a handful of methods available to parse XML data. SimpleXML is one of them. Parsing an XML document means that navigating through the XML document and return the relevant pieces of information. Nowadays, a few APIs return data in JSON format but there are still a large number of websites which returns data in XML format. So we have to master in parsing an XML document if we want to feast on APIs available.PHP SimpleXML was introduced back in PHP 5.0. The simplexml_load_string() function in PHP is used to interpret an XML string into an object.Syntax:simplexml_load_string($data, $classname, $options, $ns, $is_prefix);Parameters: This function accepts five parameters as shown in the above syntax. All of these parameters are described below:$data : A well-formed XML string.$classname : Class of the new object.$options : Additional Libxml parameters is set by specifying the option and 1 or 0.$ns : TRUE if ns is a prefix. FALSE if ns is a URI. Default is FALSE$is_prefix : TRUE if ns is a prefix. FALSE if ns is a URI. Default is FALSEPossible Values for the parameter $options are as follows:LIBXML_COMPACT : Activate nodes allocation optimization.LIBXML_DTDATTR : Set default DTD attributesLIBXML_DTDLOAD : Load external subsetLIBXML_DTDVALID : Validate with the DTDLIBXML_NOBLANKS : Remove blank nodesLIBXML_NOCDATA : Merge CDATA as text nodesLIBXML_NOEMPTYTAG : Expand empty tagsLIBXML_NOENT : Substitute entitiesLIBXML_NOERROR : Do not show error reports<LIBXML_NONET : Disable network access while loading documentsLIBXML_NOWARNING : Do not show warning reportsLIBXML_NOXMLDECL : Drop the XML declaration when saving a documentLIBXML_NSCLEAN : Remove redundant namespace declarationsLIBXML_PARSEHUGE : Sets XML_PARSE_HUGE flagLIBXML_XINCLUDE : Implement XInclude substitutionLIBXML_ERR_ERROR : Get recoverable errorsLIBXML_ERR_FATAL : Get fatal errorsLIBXML_ERR_NONE : Get no errorsLIBXML_ERR_WARNING : Get simple warningsLIBXML_VERSION : Get libxml versionLIBXML_DOTTED_VERSION : Get dotted libxml versionReturn Value This function returns a SimpleXMLElement object on success and FALSE on failure.Below programs illustrate the simplexml_load_string() function:Program 1:<?php$note=<<<XML<note>  <to>User 1</to>  <from>User 2</from>  <heading>Reminder</heading>  <body>Don\'t forget me this weekend!</body></note>XML;$xml = simplexml_load_string($note);echo $xml->to . \"<br>\";echo $xml->from . \"<br>\";echo $xml->heading . \"<br>\";echo $xml->body;?>Output:  User 1  User 2  Reminder  Don\'t forget me this weekend!Program 2:<?php$note=<<<XML<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><book>    <name>PHP</name>    <name>Java</name>    <name>C++</name>    <name>Python</name></book>XML;$xml=simplexml_load_string($note);echo $xml->getName() . \"\\n\";foreach($xml->children() as $child){   echo $child->getName() . \": \" . $child . \"\\n\";}?>Output:  book  name : PHP  name : Java  name : C++  name : PythonReference :http://php.net/manual/en/function.simplexml-load-string.php");create(getIdByTitle(this.context,"Strings"),"PHP | imagestring() Function","The imagestring() function is an inbuilt function in PHP which is used to draw the string horizontally. This function draws the string at given position.Syntax:bool imagestring( $image, $font, $x, $y, $string, $color )Parameters: This function accepts six parameters as mentioned above and described below:$image: The imagecreatetruecolor() function is used to create a blank image in a given size.$font: This parameter is used to set the font size. Inbuilt font in latin2 encoding can be 1, 2, 3, 4, 5 or other font identifiers registered with imageloadfont() function.$x: This parameter is used to hold the x-coordinate of the upper left corner.$y: This parameter is used to hold the y-coordinate of the upper left corner.$string: This parameter is used to hold the string to be written.$color: This parameter is used to hold the color of image.Return Value: This function returns TRUE on success or FALSE on failure.Below programs illustrate the imagestring() function in PHP.Program 1:<?php// Create the size of image or blank image$image = imagecreate(500, 300);// Set the background color of image$background_color = imagecolorallocate($image, 0, 153, 0);// Set the text color of image$text_color = imagecolorallocate($image, 255, 255, 255);// Function to create image which contains string.imagestring($image, 5, 180, 100,  \"GeeksforGeeks\", $text_color);imagestring($image, 3, 160, 120,  \"A computer science portal\", $text_color);header(\"Content-Type: image/png\");imagepng($image);imagedestroy($image);?>Output:Program 2:<?php// Create the size of image or blank image$image = imagecreate(500, 300);// Set the background color of image$background_color = imagecolorallocate($image, 255, 255, 255);// Set the text color of image$text_color = imagecolorallocate($image, 0, 153, 0);// Function to create image which contains string.imagestring($image, 5, 50, 100,     \"GeeksforGeeks: A computer science portal\", $text_color);header(\"Content-Type: image/png\");imagepng($image);imagedestroy($image);?>Output:Related Articles:");create(getIdByTitle(this.context,"Strings"),"PHP | levenshtein() Function","The levenshtein() function is an inbuilt function in PHP. The levenshtein() function is used to calculate the levenshtein distance between two strings. The Levenshtein distance between two strings is defined as the minimum number of characters needed to insert, delete or replace in a given string $string1 to transform it to a string $string2.Syntax:int levenshtein($str1, $str2)Example:  Input: $str1 = \'GeeksforGeeks\', $str2 = \'Geeksfor\'  Output: 5    Input: $str1 = \'Computer Science Portal\', $str2 = \'Computer Portal\'  Output: 8Parameters: The levenshtein() function accepts two parameters, both of the parameters are compulsory:$str1: This is a required parameter which specifies the string to be transformed to another.$str2: This is also a required parameter which specifies the string in which the first string($str1) needed to be trasformed.Return Value: The levenshtein() function returns an integral value which is the levenshtein distance otherwise -1, if one of the arguments exceeds the limit of 255 characters.Below programs illustrate The levenshtein() function in PHP:Program 1:<?php    // PHP code to find levenshtein distance    // between $str1 and $str2    $str1 = \'abc\';    $str2 = \'aef\';    print_r(levenshtein($str1, $str2));?>Output:2Program 2:<?php    // PHP code to find levenshtein distance    // between $str1 and $str2    $str1 = \'Hello World\';    $str2 = \'Hello d\';    print_r(levenshtein($str1, $str2));?>Output:4Program 3:<?php    // PHP code to find levenshtein distance    // between $str1 and $str2    $str1 = \'Computer Science Portal\';    $str2 = \'Computer Portal\';    print_r(levenshtein($str1, $str2));?>Output:8");create(getIdByTitle(this.context,"Strings"),"PHP | Palindrome Check","In this article, we will learn how to check whether a number and a string is a palindrome or not in PHP. A number or string is said to be a palindrome if it remains same even after reversing the digits or letters respectively.Examples for Palindrome Number:  Input : 1441  Output : Palindrome  Explanation: Reversing 1441 will also get 1441    Input : 12521  Output : Palindrome  Explanation remains sameRecommended: Please try your approach on {IDE} first, before moving on to the solution.Check for Palindrome numberHere we have simply used the iterative way to check for the palindrome number. Each digit is extracted in an iteration and formed the reverse number and finally, it is checked, whether it is same as the original number.<?php// PHP code to check for Palindrome number in PHP// Function to check for Palindromefunction Palindrome($number){    $temp = $number;    $new = 0;    while (floor($temp)) {        $d = $temp % 10;        $new = $new * 10 + $d;        $temp = $temp/10;    }    if ($new == $number){        return 1;    }    else{        return 0;    }}// Driver Code$original = 1441;if (Palindrome($original)){    echo \"Palindrome\";}else {echo \"Not a Palindrome\";}?>Output:  PalindromeCheck for Palindrome StringExamples for Palindrome String:  Input : \"MALAYALAM\"  Output : Palindrome  Explanation: Reversing \"MALAYALAM\" will also get \"MALAYALAM\"    Input : \"14441\"  Output : Palindrome  Explanation remains sameMethod 1: Using strrev()The strrev() function is used in PHP to reverse a string. We can simply use this method to reverse the string and match it with the prevous value. If it is a match, then the string is palindrome else not.Example:<?php// PHP code to check for Palindrome string in PHP// Using strrev()function Palindrome($string){    if (strrev($string) == $string){        return 1;    }    else{        return 0;    }}// Driver Code$original = \"DAD\";if(Palindrome($original)){    echo \"Palindrome\";}else {echo \"Not a Palindrome\";}?>Output:  PalindromeMethod 2: Recursive way using substr()The substr() method is used to return a part of a string, referred to as the substring. Using this method, there is a recursive way to check for Palindrome or not. In this method no new string is formed and the original string is modified in each recursive call.Example:<?php// PHP code to check for Palindrome string in PHP// Recursive way using substr()function Palindrome($string){    // Base codition to end the recursive process    if ((strlen($string) == 1) || (strlen($string) == 0)){        echo \"Palindrome\";    }    else{        // First character is compared with the last one        if (substr($string,0,1) == substr($string,(strlen($string) - 1),1)){            // Checked letters are discarded and passed for next call            return Palindrome(substr($string,1,strlen($string) -2));        }        else{            echo \" Not a Palindrome\"; }    }}$string = \"MALAYALAM\";Palindrome($string);?>Output:  PalindromeWorking:The first character is matched with the last character of the string during each recursive call and if it matches, then both the characters are discarded during the next call. This goes on until the length of the string reduces to 0 or 1. In the following example where the word “MALAYALAM”, is taken, let’s see the working.In the first step both the M’s at both, the end is compared. Since it matches, both of them are discarded and the next string to be passed is “ALAYALA”. Again both the A matched at both the end, so next string to be passed is “LAYAL”. This goes on until only “Y” remains.");create(getIdByTitle(this.context,"Strings"),"PHP | Reverse a String","PHP serves us with many built-in methods which can be used to manipulate strings. In this article, we will learn about how to reverse a string using various methods available in PHP.Examples:  Input : GeeksforGeeks  Output : skeeGrofskeeG    Input : 12485  Output : 58421Recommended: Please try your approach on {IDE} first, before moving on to the solution.Below we have discussed about three basic and most commonly used methods of reversing strings in PHP:Reversing string using strrev(): The strrev() function is a built-in function available in PHP and is used to reverse strings. This function takes a string as argument and returns a reversed string.Syntax:strrev($string)Below is the implementation of program to reverse a string using strrev():<?php// PHP program to reverse a string using strrev()function Reverse($str){    return strrev($str);}// Driver Code$str = \"GeeksforGeeks\";echo Reverse($str)?>Output:  skeeGrofskeeGReversing string using recursion and substr(): We can also reverse a string using recursion and substr() function. The substr() function is used to get a substring of the original string. Here we have defined a function Reverse() with the string passed as argument. During every recursive call, we have used the substr() method to extract the first character of argument string and called the Reverse() function again by passing remaining part of string as argument and concatenated the first character at the end of the string returned from current call.Below is the implementation of above idea:<?php// PHP function to reverse a string using// recursion and substr()function Reverse($str){    // strlen() used to calculate the    // length of the string    $len = strlen($str);    // Base case for recursion    if($len == 1){        return $str;    }    else{        $len--;        // extract first character and concatenate        // at end of string returned from recursive        // call on remaining string        return Reverse(substr($str,1, $len))                        . substr($str, 0, 1);    }}// Driver Code$str = \"GeeksforGeeks\";print_r(Reverse($str));?>Output:  skeeGrofskeeGIn-place reversing a string without using library functions: In-place reversal of string means to reverse the string by doing modification in the original string itself and not making any copy of the original string. We can reverse a string in-place and without using any library function in PHP. The idea to do so is to traverse the original string from both sides, i.e. from both left and right until we reach the middle of the string. And keep swapping the characters while traversing. So, we will simply swap the characters, starting with the first and last, then second-first and second-last and so on, till we reach the middle of the string.Below is the implementation of above idea:<?php// PHP function to in place reverse a string// without using library functionsfunction Reverse($str){    for($i=strlen($str)-1, $j=0; $j<$i; $i--, $j++)    {        $temp = $str[$i];        $str[$i] = $str[$j];        $str[$j] = $temp;    }    return $str;}// Driver Code$str = \"GeeksforGeeks\";print_r(Reverse($str));?>Output:  skeeGrofskeeG");create(getIdByTitle(this.context,"Strings"),"PHP to check substring in a string","We are given two strings.We have to check whether the second string is a sub-string of the first string or not using PHP inbuilt function strpos().Examples:  Input :$s1 = \"geeksforgeeks\"         $s2 = \"for\"  Output : True  Explanation : The string \"for\" is a substring   of the string Matthew so output is true.    Input :$s1 = \"practice.geeksforgeeks\"         $s2 = \"quiz\"  Output : FalseRecommended: Please try your approach on {IDE} first, before moving on to the solution.The problem can be solved by iterating through the given string from 0 index to final length of the string and comparing the query string with the iterations. But in PHP we can also make use of some inbuilt functions to solve this particular problem.strpos(): This function finds the position of the first occurrence of a string inside another string.strlen() : Returns length of string.If the index of first occurrence of the given string is within the length indices of the given string then the output returns true else the output returns false.<?php// PHP code to check if a string is// substring of other$s1 = \"geeksforgeeks\";$s2 = \"geeks\";if (strpos($s1, $s2) >= 0 &&    strpos($s1, $s2) < strlen($s1))    echo(\"True\");else    echo(\"False\");?>");create(getIdByTitle(this.context,"Strings"),"Concatenation of two strings in PHP","There are two string operators. The first is the concatenation operator (‘.‘), which returns the concatenation of its right and left arguments. The second is the concatenating assignment operator (‘.=‘), which appends the argument on the right side to the argument on the left side.Examples :  Input : string1:  Hello          string2 : World!   Output : HelloWorld!      Input : string1: geeksfor          string2: geeks  Output : geeksforgeeksCode #1:<?php// First String$a = \'Hello\';// Second String$b = \'World!\';// Concatenation Of String$c = $a.$b;// print Concatenate Stringecho \" $c \\n\";?>Output :   HelloWorld!Code #2 :<?php// First String$fname = \'John\';// Second String$lname = \'Carter!\';// Concatenation Of String$c = $fname.\" \".$lname;// print Concatenate Stringecho \" $c \\n\";?>Output :John Carter!Code #3 :<?php// First String$a = \'Hello\';// now $a contains \"HelloWorld!\"$a. = \"World!\";// Print The String $aecho \" $a \\n\";?>Output :   HelloWorld!");create(getIdByTitle(this.context,"Strings"),"PHP | Different characters in the given string","We have string str and we need to find the string with all unique characters from the given string. All different characters should be printed in ascending order.Examples:  Input : $str = \"GeeksforGeeks\"  Output : Gefkors  Explanation, the unique characters in the given  string $str in ascending order are G, e, f, k,   o, r and s    Input : $str = \"Computer Science Portal\"  Output : CPSaceilmnoprtu  Explanation, the unique characters in the given   string $str are C, P, S, a, c, ei, l, m, n, o,   p, r, t and uRecommended: Please try your approach on {IDE} first, before moving on to the solution.The problem can be solved using PHP in built function for collecting all the unique characters used in the given string.The in built function used for the given problem is:count_chars():The in built function has parameter which contains return mode an integer type which are as such 0, 1, 2, 3, 4 in which return mode 3 returns the string of all different characters used in the given string in ascending order.Note: The string is case-sensitive.Example 1:<?php// PHP code to find string containing unique// characters in the given string$str = \"Geeksforgeeks\";$result = (count_chars($str, 3));echo ($result);?>Output:  GefgkorsExample 2:<?php// PHP code to find string containing unique// characters  in the given string$str = \"GeeksforGeeks\";$result = (count_chars($str, 3));echo ($result);?>Output:  GefkorsExample3:<?php// PHP code to find string containing unique// characters in the given string$str = \"Computer Science Portal\";$result = (count_chars($str, 3));echo ($result);?>Output:  CPSaceilmnoprtu");create(getIdByTitle(this.context,"Strings"),"PHP | Check if all characters are lower case","Given a string, check if all characters of it are in lowercase.Examples:  Input  : gfg123  Output : No  Explanation : There are characters  \'1\', \'2\' and \'3\' that are not lower-  case    Input  : geeksforgeeks  Output : Yes  Explanation : The string \"geeksforgeeks\"   consists of all lowercase letters.Recommended: Please try your approach on {IDE} first, before moving on to the solution.The above problem can be solved using the in-built functions in PHP. We store multiple values in an array and check using the in-built function in php to chech whether all the characters are lowercase.Recommended: Please try your approach on {IDE} first, before moving on to the solution.We solve the given problem using the in-built functions in PHP and iterate from a given array of strings.We use the following in-built function in PHP:ctype_lower : Returns true if all of the characters in the provided string, text, are lowercase letters. Otherwise returns false.<?php// PHP program to check if a string has all// lower case characters$strings = array(\'gfg123\', \'geeksforgeeks\', \'GfG\');// Checking for above three strings one by one.foreach ($strings as $testcase) {    if (ctype_lower($testcase)) {        echo \"Yes\\n\";    } else {        echo \"No\\n\";    }}?>Output :  No  Yes  No");create(getIdByTitle(this.context,"Strings"),"PHP program to find the length of the last word in string","We are given a string. We are required to write a program in PHP to find the length of the last word in the string using inbuilt functions.We have already discussed approach of solving this problem here. This article discusses the PHP solution to the problem.Examples:  Input : \"php exercises\"   Output : 9    Input : \"geeks for geeks\"  Output : 5Recommended: Please try your approach on {IDE} first, before moving on to the solution.We will mainly use these three inbuilt function in PHP to solve this problem:: This inbuilt function in PHP is used to extract a part of string.: This inbuilt function in PHP is used to find the last position of string in original or in another string. It returns the integer value corresponding to position of last occurrence of the string, also it treats uppercase and lowercase characters uniquely.: This inbuilt function in PHP is used to find the length of a string.The idea to solve this problem using the above mentioned inbuilt function is to first find the position of last occurring space in the string using the strpos() function. After getting the position of last occurring space we can easily get the last word in the string using the substr() function and store this in a new string variable. At last, we can use the strlen() function to find the length of the last word in the string.<?php// PHP code to find the length of last word// in a string    // function to find length of last word    function length_last_word($string)    {        // position of last occuring space        // in the string        $pos = strrpos($string, \' \');        // if the string has only one word        if(!$pos)        {            $pos = 0;        }        else        {            $pos = $pos + 1;        }        // get the last word in the string        $lastWord = substr($string,$pos);        // return length of last word        return strlen($lastWord);    }    // Driver Code    print_r(length_last_word(\'geeksforgeeks\').\"\\n\");    print_r(length_last_word(\'computer science portal\').\"\\n\");?>Output:  13  6");create(getIdByTitle(this.context,"Strings"),"PHP | Change strings in an array to uppercase","You are given an array of strings. You have to change all of the strings present in the given array to uppercase no matter in which case they are currently. Print the resultant array.Examples:  Input : arr[] = (\"geeks\", \"For\", \"GEEks\")  Output : Array ([0]=>GEEKS [1]=>FOR [2]=>GEEKS)    Input :  arr[] = (\"geeks\")  Output : Array ([0]=>GEEKS)Recommended: Please try your approach on {IDE} first, before moving on to the solution.To solve this problem one of the basic approach is to iterate over all string of input array and then change them to uppercase on by one and print them. Iterating over array makes a quite use of for loop in program which can be avoided by using some smart methods like array_change_key_case() and array_flip(). What we have to do is just flip the array keys to value and vice-versa after that change the case of new keys of array which actually changes the case of original strings value and then again flip the key and values by array_flip().Below is the step by step process:use array_flip() function swap keys with the values present in the array.That is, the keys will now become values and their respective values will be their new keys.use array_change_key_case() function to change case of current keys(original values).use array_flip() function again to flip key and values of array to obtainoriginal array where strings value are in upper case.Below is the implementation of above approach in PHP:<?php// Program to change strings in an array to upper case$input = array(\"Practice\", \"ON\", \"GeeKs\", \"is best\");// print array before conversion of stringprint\"Array before string conversion:\\n\";print_r($input);// Step 1: flip array key => value$input = array_flip($input);// Step 2: change case of new keys to upper$input = array_change_key_case($input, CASE_UPPER);// Step 3: reverse the flip process to// regain strings as value$input = array_flip($input);// print array after conversion of stringprint\"\\nArray after string conversion:\\n\";print_r($input);?>Output :  Array before string conversion:  Array  (      [0] => Practice      [1] => ON      [2] => GeeKs      [3] => is best  )    Array after string conversion:  Array  (      [0] => PRACTICE      [1] => ON      [2] => GEEKS      [3] => IS BEST  )");create(getIdByTitle(this.context,"Strings"),"PHP | Find the number of sub-string occurrences","We are given two strings s1 and s2. We need to find the number of occurrences of s2 in s1.Examples:  Input : $s1 = \"geeksforgeeks\", $s2 = \"geeks\"  Output : 2  Explanation : s2 appears 2 times in s1    Input : $s1 = \"Hello Shubham. how are you?\";             $s2 = \"shubham\"  Output : 0  Explanation : Note the first letter of s2   is different from substrings present in s1.Recommended: Please try your approach on {IDE} first, before moving on to the solution.The problem can be solved using PHP in built function for counting the number of occurrences of a substring in a given string.The in built function used for the given problem is:substr_count(): The substr_count() function counts the number of times a substring occurs in a string.Note: The substring is case-sensitive.<?php// PHP program to count number of times// a s2 appears in s1.$s1 = \"geeksforgeeks\";$s2 = \"geeks\";$res = substr_count($s1, $s2);echo($res);?>Output :2");create(getIdByTitle(this.context,"Strings"),"PHP | quoted_printable_encode() Function","The quoted_printable_encode() function is an inbuilt function in PHP which is used to convert an 8-bit string to a quoted printable string.Syntax:quoted_printable_encode( $str )Parameters: This function accepts single parameter $str which is mandatory. It represents the 8-bit string which needs to be converted.Return Value: This function returns the quoted printable string.Below program illustrates the quoted_printable_encode() function in PHP:Program:<?php// A simple PHP code to implement// quoted_printable_encode() function// Declare variable and initialize it$string = \'HÃ«llo World!\';echo (quoted_printable_encode($string));?>Output:  H=C3=83=C2=ABllo World!Application: The quoted_printable_encode() function can be used in mailing system to encode any message and later decode it using quoted_printable_decode() at receiver’s end.Related Articles:");create(getIdByTitle(this.context,"Strings"),"PHP | quoted_printable_decode() Function","The quoted_printable_decode() function is an inbuilt function in PHP which is used to decode a quoted printable string in PHP into an 8-bit string.Syntax:string quoted_printable_decode( $str )Parameters: This function accepts single parameter $str which is mandatory. It represents the string which need to find the 8-bit string.Return Value: This function returns the 8-bit binary string.Below program illustrates the quoted_printable_decode() function in PHP:Program:<?php// A simple PHP code to implement// quoted_printable_decode() function// Declare variable and initialize it$String = \'=0D=0Ageeksforgeeks\';echo (quoted_printable_decode($String));?>Output:  geeksforgeeksApplication: This function is used in mail handling in PHP. Many a times the mails consist of quoted printable like =0A, =0D etc. Thus, PHP provides a built-in function to deal with such mails to produce plain 8-bit strings.");create(getIdByTitle(this.context,"Strings"),"PHP | startsWith() and endsWith() Functions","startsWith() FunctionThe StartsWith() function is used to test whether a string begins with the given string or not. This function is case insensitive and it returns boolean value. This function can be used with Filter function to search the data.Syntaxbool startsWith( string, startString )Parameters: This function accepts two parameters as mentioned above and described below:string: This parameter is used to hold the text which need to test.startString: The text to search at the beginning of String. If it is an empty string, then it returns true.Return Value: This function returns True on success or False on failure.Example 1:<?php// Function to check string starting// with given substringfunction startsWith ($string, $startString){    $len = strlen($startString);    return (substr($string, 0, $len) === $startString);}// Main functionif(startsWith(\"abcde\",\"c\"))    echo \"True\";else    echo \"False\";?>Output:  FalseExample 2:<?php// Function to check string starting// with given substringfunction startsWith ($string, $startString){    $len = strlen($startString);    return (substr($string, 0, $len) === $startString);}// Main functionif(startsWith(\"abcde\",\"a\"))    echo \"True\";else    echo \"False\";?>Output:  TrueendsWith() FunctionThe endsWith() function is used to test whether a string ends with the given string or not. This function is case insensitive and it returns boolean value. The endsWith() function can be used with the Filter function to search the data.Syntax:bool endsWith( string, endString )Parameter:string: This parameter holds the text which need to test.endString: The text to search at the end of given String. If is an empty string, it returns true.Return Value: This function returns True on success or False on failure.Example 1:<?php// Function to check the string is ends// with given substring or notfunction endsWith($string, $endString){    $len = strlen($endString);    if ($len == 0) {        return true;    }    return (substr($string, -$len) === $endString);}// Driver codeif(endsWith(\"abcde\",\"de\"))    echo \"True\";else    echo \"False\";?>Output:  TrueExample 2:<?php// Function to check the string is ends// with given substring or notfunction endsWith($string, $endString){    $len = strlen($endString);    if ($len == 0) {        return true;    }    return (substr($string, -$len) === $endString);}// Driver codeif(endsWith(\"abcde\",\"dgfe\"))    echo \"True\";else    echo \"False\";?>Output:  False");create(getIdByTitle(this.context,"Strings"),"String comparison using == vs strcmp() in PHP","== OperatorThe comparison operator called Equal Operator is the double equal sign “==”. This operator accepts two inputs to compare and returns true value if both of the values are same (It compares only value of variable, not data types) and returns false value if both of the values are not same.This should always be kept in mind that the present equality operator == is different from the assignment operator =. The assignment operator assigns the variable on the left to have a new value as the variable on right, while the equal operator == tests for equality and returns true or false as per the comparison results.Example:<?php// Declaration of strings$name1 = \"Geeks\";$name2 = \"Geeks\";// Use == operatorif ($name1 == $name2) {    echo \'Both strings are equal\';}else {    echo \'Both strings are not equal\';}?>Output:  Both strings are equalstrcmp() FunctionThe strcmp() is an inbuilt function in PHP which is used to compare two strings. This function is case-sensitive which points that capital and small cases will be treated differently, during comparison. This function compares two strings and tells whether the first string is greater or smaller or equals to the second string.Syntax:strcmp( $string1, $string2 )Parameters: This function accepts two parameters as mentioned above and described below:$string1: This parameter refers to the first string to be used in the comparison. It is mandatory parameter.$string2: This parameter refers to the second string to be used in the comparison. It is mandatory parameter.Return Values: The function returns a random integer value depending on the condition of match, which is given by:Returns 0 if the strings are equal.Returns a negative value (< 0), if $string2 is greater than $string1.Returns a positive value (> 0) if $string1 is greater than $string2.Example:<?php// Declaration of strings$name1 = \"Geeks\";$name2 = \"geeks\";// Use strcmp() functionif (strcmp($name1, $name2) !== 0) {    echo \'Both strings are not equal\';}else {    echo \'Both strings are equal\';}?>Output:  Both strings are not equalReference:");create(getIdByTitle(this.context,"Strings"),"PHP | hash_pbkdf2() Function","The hash_pbkdf2() function is an inbuilt function in PHP which is used to generate a PBKDF2 key derivation of a supplied password.Syntax:string hash_pbkdf2( $algo, $pass, $salt, $itr, $len, $raw_opt )Parameters: This function accept six parameters as mention above and describe below.$algo: It is the required parameter which specifies the selected hashing algorithm (like- “md5”, “sha256”, “sha1”).$pass: This parameter is used to specify the password to use for the derivation.$salt: This parameter is used for the derivation and the value should be generated randomly.$itr: This parameter count the number of internal iterations.$len: This parameter is used to hold the length of the output string.$raw_opt: If this parameter set to True then its output will be raw binary data and if this parameter set to false then output will be lowercase hexits.Return Value: This function returns the string containing the calculated message digest as lowercase hexits.Below programs illustrate the hash_pbkdf2() function in PHP:Program 1:<?php$gfg = \"GeeksforGeeks\";$iterations = 142;// Generate a random IV using// openssl_random_pseudo_bytes()// random_bytes() or another// suitable source of randomness.$salt = openssl_random_pseudo_bytes(16);// Using hash_pbkdf2 function$hash = hash_pbkdf2(\"md5\",    $gfg, $salt, $iterations, 30);// Display resultecho $hash;?>Output:  f0ebbbf59869d76f946c4b15340761Program 2:<?php$gfg = \"Contribute1234\";$iterations = 100;// Generate a random IV using// openssl_random_pseudo_bytes()// random_bytes() or another// suitable source of randomness.$salt = openssl_random_pseudo_bytes(8);// Using hash_pbkdf2 function$hash = hash_pbkdf2(\"md5\",    $gfg, $salt, $iterations, 20, false);// Display resultecho $hash;?>Output:  715b385158045923923c");create(getIdByTitle(this.context,"Strings"),"PHP | hash_hmac_file() Function","The hash_hmac_file() function is an inbuilt function in PHP which is used generate a keyed hash value using contents of a given file.Syntax:string hash_hmac_file( $algo, $file, $key, $raw_opt )Parameters: This function accept four parameters as mention above and describe below.$algo: It is the required parameter which specifies the selected hashing algorithm.$file: This parameter is used to specify the file url to be hashed.$key: This parameter is used to hold the shared secret key used for generating the HMAC.$raw_opt: If the parameter is set to true then output will be raw binary data and if the parameter is set to False then output will be lowercase hexits.Return Value: This function returns a string containing the calculated message digest as lowercase hexits.Below programs uses the file gfg.txt and contents of the file are:GeeksforGeeksA Computer Science Portal for GeeksBelow programs illustrate the hash_hmac_file() function in PHP:Program 1:<?php// PHP program to illustrate//  hash_hmac_file function// Create a file to calculate hash offile_put_contents(\'gfg.txt\', \'Geeks\');// Display resultecho hash_hmac_file(\'sha1\', \'gfg.txt\',            \'password\', false);?>Output:  a5365a345a41ac0780bf63e4d33576560b86163cProgram 2:<?php// PHP program to illustrate//  hash_hmac_file function// Create a file to calculate hash offile_put_contents(\'gfg.txt\', \'Geeks\');// Display resultecho hash_hmac_file(\'sha256\', \'gfg.txt\', \'password\') . \"</br>\";// Create a file to calculate hash offile_put_contents(\'gfg.txt\', \'Content\');// Display resultecho hash_hmac_file(\'md5\', \'gfg.txt\', \'password\', false);?>Output:  a73af6923445a30fbacd646622b254069f90c2502e63b1025918aa93f2ddca9d  a7b2b24ac2334070c42a852fb5ef0c92");create(getIdByTitle(this.context,"Strings"),"PHP | hash_file( ) Function","The hash_file() function is an inbuilt function in PHP which is used to generate a hash value using the contents of a given file.Syntax:string hash_file( $algo, $file, $raw_opt )Parameters: This function accept three parameters as mention above and describe below.$algo: It is the required parameter which specifies the selected hashing algorithm.$file: This parameter is used to hold the file url to be hashed.$raw_opt: If the parameter is set to true then output will be raw binary data and if the parameter is set to False then output will be lowercase hexits.Return Value: This function returns a string containing the calculated message digest as lowercase hexits.Below programs uses the file gfg.txt and contents of the file are:GeeksforGeeksA Computer Science Portal for GeeksBelow programs illustrate the hash_file() function in PHP:Program 1:<?php// PHP program to illustrate//  hash_file function// Create a file to calculate hash offile_put_contents(\'gfg.txt\', \'GFG\');// Display Resultecho hash_file(\'md5\', \'gfg.txt\') . \"</br>\";?>Output:  083de2341fd19dce0de9e60f3e9a8e0dProgram 2:<?php// PHP program to illustrate//  hash_file function// Create a file to calculate hash offile_put_contents(\'gfg.txt\', \'SUDO PLACEMENT\');// Display Resultecho hash_file(\'md5\', \'gfg.txt\') . \"</br>\";// Create a file to calculate hash offile_put_contents(\'gfg.txt\', \'GCET\');// Display Resultecho hash_file(\'sha1\', \'gfg.txt\');?>Output:  083de2341fd19dce0de9e60f3e9a8e0d  a287a6ac47afec4140253a10b8a4c9c1e4f7a45e");create(getIdByTitle(this.context,"Strings"),"PHP | hash_hmac() Function","The hash_hmac() function is an inbuilt function in PHP which is used to generate the keyed hash value using the HMAC method.Syntax:string hash_hmac( $algo, $msg, $key, $raw_opt )Parameters: This function accepts four parameters as mention above and describe below.$algo: It is the required parameter which is used to specify the selected hashing algorithm Ex. “md5”, “sha256”, “sha1”.$msg: This parameter is used to hold the message to be hashed.$key: This parameter is used to specify the shared secret key used for generating the HMAC variant of the message digest.$raw_opt: This parameter is used to hold the Boolean value. If it set to True then it returns raw binary data and if it set to False then it returns output lowercase hexits.Return Value: This function returns a string containing the calculated message digest as lowercase hexits.Below programs illustrate the hash_hmac() function in PHP:Program 1:<?php// PHP program to illustrate// the hash_hmac functionecho hash_hmac(\'md5\',\'GeeksforGeeks A Computer Science Portal\',                                \'GFG_DATA\');?>Output:  65f3fc3c9085077f44ade6ce2d21eba4Program 2:<?php// PHP program to illustrate// the hash_hmac functionecho hash_hmac(\'md5\',\'GeeksforGeeks A Computer Science Portal\',                                \'GFG_DATA\', false). \"\\n\";echo hash_hmac(\'md5\',\'GeeksforGeeks A Computer Science Portal\',                                \'GFG_DATA\', true);?>Output:  65f3fc3c9085077f44ade6ce2d21eba4  eóü<?D­æÎ-!ë¤");create(getIdByTitle(this.context,"Strings"),"PHP | hash_equals() Function","The hash_equals function() is an inbuilt function in PHP which is used to compares two strings using the same time whether they are equal or not.Syntax:hash_equals( $known_str, $usr_str )Parameters: This function accept two parameters as mention above and describe below.$known_str: This parameter is used to specify the known length string.$usr_str: This parameter is used to specify the user-supplied string.Return Value: This function returns True if both strings are equal, False otherwise.Below programs illustrate the hash_equals() function in PHP:Program 1:<?php// PHP program to illustrate// hash_equals function$known_str = crypt(\'GFG\', \'Hello-GFG\');$usr_str   = crypt(\'GFG\', \'Hello-GFG\');// Compare bith strings$res = hash_equals($known_str, $usr_str);// Display resultvar_dump($res);?>Output:  bool(true)Program 2:<?php// PHP program to illustrate// hash_equals function$known_str = crypt(\'GFG\', \'Hello-GFG\');$usr_str   = crypt(\'GeeksforGeeks\', \'Hello-GFG\');// Compare bith strings$res = hash_equals($known_str, $usr_str);// Display resultvar_dump($res);?>Output:  bool(false)");create(getIdByTitle(this.context,"Strings"),"PHP | hash_final() Function","The hash_final() function is an inbuilt function in PHP which is used to finalize an incremental hash and return the resulting digest.Syntax:hash_final( $context $raw_output )Parameters: This function accept two parameters as mention above and describe below.$context: This parameter is used to specify the hashing context returned by hash_init() function$raw_output: This parameter is used to set Boolean value. If this parameter set to True then output contains raw binary data and if parameter set to False then output contains lowercase hexits.Return Value: This function returns a string containing the calculated message digest as lowercase hexits.Below programs illustrate the hash_final() function in PHP:Program 1:<?php// PHP program too illustrate// hash_final function$gfg = hash_init(\'md5\');hash_update($gfg, \'GeeksforGeeks A CS Portal\');// Print result return by// hash_final functionprint(hash_final($gfg));?>Output:  a26b1748ffd7e4c9923336a3c8e9a4c3Program 2:<?php// PHP program too illustrate// hash_final function$gfg = hash_init(\'md5\');hash_update($gfg, \'GeeksforGeeks A CS Portal\');// Print result return by// hash_final functionprint(hash_final($gfg, false));?>Output:  a26b1748ffd7e4c9923336a3c8e9a4c3");create(getIdByTitle(this.context,"Strings"),"PHP | shell_exec() vs exec() Function","shell_exec() FunctionThe shell_exec() function is an inbuilt function in PHP which is used to execute the commands via shell and return the complete output as a string. The shell_exec is an alias for the backtick operator, for those used to *nix. If the command fails return NULL and the values are not reliable for error checking.Syntax:string shell_exec( $cmd )Parameters: This function accepts single parameter $cmd which is used to hold the command that will be executed.Return Value: This function returns the executed command or NULL if an error occurred.Note: This function is disabled when PHP is running in safe mode.Example:<?php// Use ls command to shell_exec// function$output = shell_exec(\'ls\');// Display the list of all file// and directoryecho \"<pre>$output</pre>\";?>Output:gfg.php  index.html  geeks.phpexec() FunctionThe exec() function is an inbuilt function in PHP which is used to execute an external program and returns the last line of the output. It also returns NULL if no command run properly.Syntax:string exec( $command, $output, $return_var )Parameters: This function accepts three parameters as mentioned above and described below:$command: This parameter is used to hold the command which will be executed.$output: This parameter is used to specify the array which will be filled with every line of output from the command.$return_var: The $return_var parameter is present along with the output argument, then it returns the status of the executed command will be written to this variable.Return Value: This function returns the executed command, be sure to set and use the output parameter.Example:<?php// (on a system with the \"iamexecfunction\" executable in the path)echo exec(\'iamexecfunction\');?>Output:geeks.phpReferences:");
    }

    private void mathArticles()
    {
        create(getIdByTitle(this.context,"Math"),"PHP | round( ) Function","While dealing with problems which have values consisting of a very high number of decimal digits such as (121.76763527823) we often come up with a problem of rounding them up. Rounding them up manually can be a very time consuming and erroneous practice. In place of that, an inbuilt function of PHP i.e round() can be used.The round() function in PHP is used to round a floating-point number. It can be used to define a specific precision value which rounds number according to that precision value.Precision can be also negative or zero.The round() function in PHP has 3 parameters which are number, precision, and mode among which the latter two are optional parameters.The round() function returns the rounded value of the argument passed.Syntax:float round($number, $precision, $mode);Parameters: It accepts three paramters out of which one is compulsory and two are optional. All of these parameters are described below:$number : It is the number which you want to round.$precision : It is an optional parameter. It specifies the number of decimal digits to round to. The default value of this parameter is zero.$mode : It is an optional parameter. It specifies a constant to specify the rounding mode. The constant can be one of the following:PHP_ROUND_HALF_UP: This mode tells to round up the number specified by parameter $number by precision specified by parameter $precision away from zero.PHP_ROUND_HALF_DOWN: This mode tells to round up the number specified by parameter $number by precision specified by parameter $precision towards zero.PHP_ROUND_HALF_EVEN: This mode tells to round up the number specified by parameter $number by precision specified by parameter $precision towards nearest even value.PHP_ROUND_HALF_ODD: This mode tells to round up the number specified by parameter $number by precision specified by parameter $precision towards nearest odd value.Return Value: It returns the rounded value.Examples:  Input : round(0.70)  Output : 1    Input : round(0.708782)  Output : 0.71    Input : round(-3.40)  Output : -3    Input : round(-3.60)  Output : -4Below programs illustrate the working of round() in PHP:When a parameter is passed with default precision i.e. ‘0’:<?phpecho(round(0.70));?>Output:1When a parameter is passed with a specific precision value:<?phpecho(round(0.70878, 2));?>Output:0.71When a negative value is passed as a parameter:<?phpecho(round(-3.40));?>Output:-3Passing parameters with mode:<?php// round to nearest even valueecho(round(7.5,0,PHP_ROUND_HALF_EVEN));echo \"\\n\";// round to nearest odd valueecho(round(7.5,0,PHP_ROUND_HALF_ODD));echo \"\\n\";// round towards zeroecho(round(7.5,0,PHP_ROUND_HALF_DOWN));echo \"\\n\";// round away from zeroecho(round(7.5,0,PHP_ROUND_HALF_UP));?>Output:  8  7  7  8Important Points To Note:round() function is used to round floating point numbers.A specific precision value can be used to get the desired results.Precision value can also be negative or zero.");create(getIdByTitle(this.context,"Math"),"PHP | octdec( ) Function","In the earlier days of computing, octal numbers and the octal numbering system was very popular for counting inputs and outputs because as it works in counts of eight, inputs and outputs were in counts of eight, a byte at a time. Due to a wide usage of octal number system many times it happens that we require converting an octal number to its decimal equivalent. There are many methods to convert an octal number to its decimal equivalent but they are a bit time-consuming. But PHP provides us with an in-built function which can be used to convert an octal number to its decimal equivalent.The octdec() function is a built in function in PHP and is used to calculate the decimal equivalent of an octal number. The octdec() function converts numbers that are too large to fit into the integer type, larger values are returned as a float in that case.Syntax:octdec(value)Parameters: This function accepts a single parameter $value . It is a string which represents the octal number whose decimal equivalent you want to find.Return Value:It returns the decimal representation of octal number passed as a string to the function.Examples:  Input : octdec(\"46\")  Output : 38    Input : octdec(\"3098\")  Output : 24    Input : octdec(\"-105\")  Output : 69Below program illustrate the working of octdec() in PHP:When a positive number is passed as a parameter:<?phpecho octdec(\"3098\");?>Output:24When a negative number is passed as a parameter:<?phpecho octdec(\"-105\");?>Output:69Important points to note:It converts an octal number to its decimal equivalent.It returns the values as float if the numbers are too large to be returned as integer type .Octal number system is not as popular as hexadecimal number system these days.");create(getIdByTitle(this.context,"Math"),"PHP | decoct( ) Function","In the earlier days of computing, octal numbers and the octal numbering system was very popular for counting inputs and outputs because as it works in counts of eight, inputs and outputs were in counts of eight, a byte at a time. Due to a wide usage of octal number system many times it happens that we require converting a decimal number to its decimal octal representation.There are many methods to convert a decimal number to its octal equivalent but they are a bit time-consuming.But PHP provides an inbuilt function which can be used to convert a decimal number to its octal equivalent.The decoct() function in PHP is used to return the octal equivalent of a decimal number.For 32-bit platforms, the largest number that can be converted is usually 4294967295 in decimal resulting in 37777777777 whereas in 64-bit platforms it is usually 9223372036854775807 in decimal resulting in 777777777777777777777.Syntax:string decoct(value)Parameters: This function accepts a single parameter value. It is the decimal number whose octal equivalent you want to calculate.Return Value: The decoct() function in PHP returns a string representing the octal equivalent of a decimal number passed to it as argument.Examples:  Input : decoct(\"35\")  Output : 45    Input : decoct(\"67\")  Output : 103    Input : decoct(\"4294967295\")  Output : 37777777777Below program illustrate the working of decoct() in PHP:<?phpecho decoct(\"35\") . \"\\n\";echo decoct(\"67\") . \"\\n\";echo decoct(\"4294967295\") . \"\\n\";?>Output:  43  103  37777777777Important points to note :It converts a decimal number to its octal equivalent.Negative numbers are supported by this function.The octal number system is not as popular as hexadecimal number system these days.");create(getIdByTitle(this.context,"Math"),"PHP | decbin( ) Function","While working with numbers, many times we need to convert the bases of number and one of the most frequent used conversion is decimal to binary conversion. PHP provides us with a built-in function, decbin() for this purpose.The decbin() function in PHP is used to return a string containing a binary representation of the given decimal number argument.decbin stands for decimal to binary.Syntax:string decbin(value)Parameters: This function accepts a single parameter value. It is the decimal number which you want to convert in binary representation.Return Value: It returns a string that represent the binary value of the decimal number passed to the function as argument.Examples:  Input : decbin(12)  Output : 1100    Input : decbin(26)  Output : 11010    Input : decbin(2147483647)  Output : 1111111111111111111111111111111 (31 1\'s)Below programs illustrate the decbin() function in PHP:Passing 12 as a parameter<?phpecho decbin(12);?>Output:1100Passing 26 as a parameter:<?phpecho decbin(26);?>Output:11010When the largest signed integer is passed as a parameter:<?phpecho decbin(2147483647);?>Output: 1111111111111111111111111111111");create(getIdByTitle(this.context,"Math"),"PHP | bindec( ) Function","While working with numbers, many times we need to convert the bases of number and one of the most frequent used conversion is binary to decimal conversion. PHP provides us with a built-in function bindec() for this purpose. The bindec() function in PHP is used to return the decimal equivalent of the binary number. It accepts a string argument which is the binary number we want to convert to decimal.The parameter must be a string otherwise different data types will produce unexpected results.Syntax:bindec(binary_string)Parameter: This function accepts a single parameter binary_string which represents the binary string you want to convert to decimal.Return Value: It returns the decimal value of the binary number binary_string.Examples:  Input : bindec(\'110011\')  Output : 51    Input : bindec(\'000110011\')  Output : 51    Input : bindec(\'111\')  Output : 7Below programs illustrate the bindec() function in PHP:When ‘110011’ is passed as a parameter:<?phpecho bindec(\'110011\');?>Output:51When ‘000110011’ is passed as a parameter:<?phpecho bindec(\'000110011\');?>Output:51When ‘111’ is passed as a parameter:<?phpecho bindec(\'111\');?>Output:7");create(getIdByTitle(this.context,"Math"),"PHP | dechex( ) Function","The dechex() is a built-in function in PHP and is used to convert a given decimal number to an equivalent hexadecimal number. The word ‘dechex’ in the name of function stands for decimal to hexadecimal. The dechex() function works only with unsigned numbers. If the argument passed to it is negative then it will treat it as an unsigned number.The largest number that can be converted is 4294967295 in decimal resulting to “ffffffff”.Syntax:string dechex($value)Parameters: This function accepts a single parameter $value. It is the decimal number you want to convert in hexadecimal representation.Return Value: It returns the hexadecimal string representation of number passed to it as argument.Examples:  Input : dechex(10)  Output : a    Input : dechex(47)  Output : 2f    Input : dechex(4294967295)  Output : ffffffffBelow programs illustrate dechex() function in PHP:Passing 10 as a parameter:<?phpecho dechex(10);?>Output:aPassing 47 as a parameter:<?phpecho dechex(47);?>Output:2fWhen the largest possible decimal number is passed as a parameter:<?phpecho dechex(4294967295);?>Output:ffffffff");create(getIdByTitle(this.context,"Math"),"PHP | hexdec( ) Function","Hexadecimal is a positional numeral system with a base of 16. It has sixteen distinct symbols, where the first nine symbols are 0–9 which represent values zero to nine, and the rest 6 symbols are A, B, C, D, E, F which represent values from ten to fifteen respectively. Since hexadecimal digit represents four binary digits, it allows a more human-friendly representation of binary-coded values and hence it is preferred over other number systems like binary and octal.The hexdec() function in PHP converts a hexadecimal number to a decimal number.The hexdec() function converts numbers that are too large to fit into the integer type, larger values are returned as a float in that case. If hexdec() encounters any non-hexadecimal characters, it ignores them.Syntax:hexdec($value)Parameters: The hexdec() function accepts a single parameter $value. It is the hexadecimal number whose decimal equivalent you want to calculate.Return Value: The hexdec() function in PHP returns the decimal equivalent of a hexadecimal number.Examples:  Input : hexdec(\"5e\")  Output : 94    Input : hexdec(\"a\")  Output : 10    Input : hexdec(\"f1f1\")  Output : 61937    Input : hexdec(\"abc451\")  Output : 11256913Below program illustrate the working of hexdec() in PHP:<?phpecho hexdec(\"5e\") . \"\\n\";echo hexdec(\"a\") . \"\\n\";echo hexdec(\"f1f1\") . \"\\n\";echo hexdec(\"abc451\") . \"\\n\";?>Output:  94  10  61937  11256913Important points to note :It converts a hexadecimal number to its decimal equivalent.It returns the values as float if the numbers are too large to be returned as integer type .The hexadecimal number system is one of the most popular and widely used number system these days.");create(getIdByTitle(this.context,"Math"),"PHP | hex2bin() Function","The hex2bin() function is a built-in function in PHP. The hex2bin() function is used to decode a hexadecimally encoded binary string. That is, it decodes a binary string which is encoded in hexadecimal representation back to binary representation.Note: The purpose of this function is not to convert a hexadecimal number to binary number, to do so we can use the base_convert() function in PHP. This function is just used to decode a hexadecimally encoded binary string.Syntax:  string hex2bin($hexString)Parameters: This function accepts a single parameter $hexString which represents a hexadecimal data which is needed to be decoded to binary representation.Return Value: This function return a string which is the binary representation of the hexa-decimal input $hexString. If this function fails to decode the hexadecimal string to binary then it returns False.Examples:  Input : $hexString = \"48656c6c6f20576f726c6421\"  Output : Hello World!    Input : $hexString = \"6578616d706c65206865782064617461\"   Output : example hex dataBelow programs illustrate the hex2bin() function:Program 1:<?phpecho hex2bin(\"48656c6c6f20576f726c6421\");?>Output:  Hello World!Program 2:<?phpecho hex2bin(\"6578616d706c65206865782064617461\");?>Output:example hex data");create(getIdByTitle(this.context,"Math"),"PHP | pow( ) Function","Many a times it happens that while solving mathematical expressions we require a number to be raised by a specific value. We also call this power of a number. Example of such cases is Exponential expression, cube root, square root etc. Thus in such cases, PHP’s inbuilt function pow() comes to an aid.The pow() function in PHP is used to calculate a base raised to the power of exponent. It is a generic function which can be used with number raised to any value.It takes two parameters which are the base and exponent and returns the desired answer.If both the arguments passed are non-negative integers and the result can be represented as an integer, the result is returned with integer type, otherwise, it is returned as a float. We already have discussed about pow() function in brief in the article PHP | Math functions. In this article we will learn about the pow() function in details.Syntax:number pow($base, $exp)Parameters : The pow() function accepts two parameters as shown in the above syntax:$base : It is used to specify the base.$exponent : It is used to specify the exponent.Return Value: It returns a number (integer or floating-point) which is equal to $base raised to the power of $exponent.Examples:  Input : pow(3, 2)  Output : 9    Input : pow(-3, 2)  Output : 9    Input : pow(-3, -3)  Output : 0.037037037037037    Input : pow(-3, -3.2)  Output : NaNBelow programs illustrate the working of pow() in PHP:When both the parameters passed are positive:<?phpecho(pow(3, 2));?>Output:9When the $base is negative and $exponent is a positive even number:<?phpecho(pow(-3, 2));?>Output:9When $base is negative and $exponent is a negative odd number:<?phpecho(pow(-3, -3));?>Output:0.037037037037037When $base is negative and $exponent is a negative number with decimal places:<?phpecho(pow(-3, -3.2));?>Output:NaNImportant Points To Note:pow() function is used to solve exponential expressions.It is a generic function that can be used for any exponent value.Avoid using pow() function if you want to calculate square root of a function since PHP already has an inbuilt function for calculating square roots and it is much more efficient than pow().");create(getIdByTitle(this.context,"Math"),"PHP | base_convert( ) Math Function","The base_convert() function in PHP is used to convert a number given in an arbitary base to a desired base.Both the base should be between 2 and 32 and bases with digits greater than 10 are represented with letters a-z i.e 10 is represented as a, 11 is represented as b and 35 is represented as z.The case of the letters is not sensitive.Syntax:string base_convert($inpNumber, $fromBase, $desBase)Parameters Used: This function accepts three parameters and are described below:$inpNumber : It is the number to be converted.$fromBase : It is the original base of the number.$desBase : It is the base to which you want to convert.Return Value: It returns a string which reperesents the number converted to the desired base.Examples:  Input : base_convert(B296, 16, 8)  Output : 131226    Input : base_convert(B296, 16, 2)  Output : 1011001010010110    Input : base_convert(621, 8, 16)  Output : 191    Input : base_convert(110011, 2, 16)  Output : 33Below programs illustrate the base_convert() function in PHP:Converting hexadecimal to octal:<?php$hexadec = \"B296\";echo base_convert($hexadec, 16, 8);?>Output:131226Converting hexadecimal to binary:<?php$hexadec = \"B296\";echo base_convert($hexadec, 16, 2);?>Output:1011001010010110Converting octal to hexadecimal:<?php$octal = \"621\";echo base_convert($octal, 8, 16);?>Output:191Converting binary to hexadecimal:<?php$binary = \"110011\";echo base_convert($binary, 2, 16);?>Output:33");create(getIdByTitle(this.context,"Math"),"PHP | base64_encode() Function","The base64_encode() function is an inbuilt function in PHP which is used to Encodes data with MIME base64. MIME (Multipurpose Internet Mail Extensions) base64 is used to encode the string in base64. The base64_encoded data takes 33% more space then original data.Syntax:string base64_encode( $data )Parameters: This function accepts single parameter $data which is mandatory. It is used to specify the string encoding.Return value: This function returns the encoded string in base64 on success or returns False in case of failure.Below programs illustrate the base64_encode() function in PHP:Program 1:<?php// Program to illustrate base64_encode()// function$str = \'GeeksforGeeks\';echo base64_encode($str);?>Output:  R2Vla3Nmb3JHZWVrcw==Program 2:<?php// Program to illustrate base64_encode()// function$str = \'GFG, A computer Science Portal For Geeks\';echo base64_encode($str). \"\\n\";$str = \'\';echo base64_encode($str). \"\\n\";$str = 1;echo base64_encode($str). \"\\n\";$str = \'@#$\';echo base64_encode($str). \"\\n\";?>Output:  R0ZHLCBBIGNvbXB1dGVyIFNjaWVuY2UgUG9ydGFsIEZvciBHZWVrcw==    MQ==  QCMk");create(getIdByTitle(this.context,"Math"),"PHP | base64_decode() Function","The base64_decode() is an inbuilt function in PHP which is used to Decodes data which is encoded in MIME base64.Syntax:string base64_decode( $data, $strict )Parameters: This function accepts two parameter as mantioned above and described below:$data: It is mandatory parameter which contains the encoded string.$strict: It is an optional parameter. If this parameter is set to TRUE then the base64_decode() function will return FALSE if the input contains character from outside the base64 alphabet. Invalid characters will be silently discarded.Return value: This function returns the decoded string on success or returns False in case of failure.Below programs illustrate the base64_decode() function in PHP:Program 1:<?php// Program to illustrate base64_decode()// function$str = \'R2Vla3Nmb3JHZWVrcw==\';echo base64_decode($str);?>Output:  GeeksforGeeksProgram 2:<?php// Program to illustrate base64_decode()// function$str = \'R0ZHLCBBIGNvbXB1dGVyIFNjaWVuY2UgUG9ydGFsIEZvciBHZWVrcw\';echo base64_decode($str). \"\\n\";$str = \'MQ==\';echo base64_decode($str). \"\\n\";?>Output:  GFG, A computer Science Portal For Geeks  1");create(getIdByTitle(this.context,"Math"),"PHP | ceil( ) Function","We have often used the ceiling function in mathematical problems to round up a decimal number to next greater integral value. PHP provides us with a built-in function ceil() to perform such operation. The ceil() function is a built-in function in PHP and is used to round a number to the nearest greater integer.Syntax:float ceil(value)Parameters: The ceil() function accepts a single parameter value which reperesents the number which you want to round up to the nearest greater integer.Return Value: The return type of the ceil() function is float as shown in the syntax. It returns the number which represents the value rounded up to the next highest integer.Examples:  Input : ceil(0.70)  Output : 1    Input : ceil(-4.1)  Output : -4    Input : ceil(6)  Output : 6Below programs illustrate the ceil() function in PHP:When a positive number with decimal places is passed as a parameter:<?phpecho (ceil(0.70));?>Output:1When a negative number with decimal places is passed as a parameter:<?phpecho (ceil(-4.1));?>Output:-4When a number with no decimal places is passed as a parameter:<?phpecho (ceil(6));?>Output:6");create(getIdByTitle(this.context,"Math"),"PHP | abs( ) Function","The abs() fuction is a built-in function in PHP and is used to return the absolute (positive) value of a number. The abs() function in PHP is identical to what we call modulus in mathematics. The modulus or absolute value of a negative number is positive.Syntax:abs(value)Parameter: The abs() function accepts a single parameter value which is the number whose absolute value you want to find.Return Value: It returns the absolute value of the number passed to it as argument.Examples:  Input : abs(6)  Output : 6    Input : abs(-6)  Output : 6    Input : abs(6.4)  Output : 6.4    Input : abs(-6.4)  Output : 6.4Below programs illustrate the abs() function in PHP:When a positive number is passed as a parameter:<?phpecho (abs(6);?>Output:6When a negative number is passed as a parameter:<?phpecho (abs(-6);?>Output:6When a positive number with decimal places is passed as a parameter:<?phpecho (abs(6.4);?>Output:6.4When a negative number with decimal places is passed as a parameter:<?phpecho (abs(-6.4);?>Output:6.4");create(getIdByTitle(this.context,"Math"),"PHP | sin( ) Function","Trigonometry is an important part of mathematics and PHP’s math functions provides us with some functions which are very useful for calculations involving trigonometry. The sin()function in PHP is used to find the sine value of a number.The sine() function returns a float value between -1 and 1, which represents the sine of the angle passed to it as argument. The argument parameter must be in radians.Syntax:float sin($value)Parameters: This function accepts a single parameter value. It is the number whose sine value you want to find. The value of this parameter must be in radians.Return Value: It returns a floating point number which is the sine value of number passed to it as argument.Examples:  Input : sin(3)   Output : 0.14112000805987    Input : sin(-3)  Output : -0.14112000805987    Input : sin(2*M_PI)  Output : 1    Input : sin(0)   Output : 0Below programs illustrate sin() function in PHP:Passing 3 as a parameter:<?phpecho (sin(3));?>Output:0.14112000805987Passing -3 as a parameter:<?phpecho (sin(-3));?>Output:-0.14112000805987When (2*M_PI) is passed as a parameter, M_PI is a constant in PHP whose value is 3.1415926535898:<?phpecho (sin(2*M_PI));?>Output:1Passing 0 as a parameter:<?phpecho (sin(0));?>Output:0");create(getIdByTitle(this.context,"Math"),"PHP | cos( ) Function","Trigonometry is an important part of mathematics and PHP’s math functions provides us with some functions which are very useful for calculations involving trigonometry. The cos()function in PHP is used to find the cosine of a number.The cos() function returns a float value between -1 and 1, which represents the cosine of the angle. The argument passed to it must be in radians.Syntax:float cos($value)Parameters: This function accepts a single parameter value. It is the number whose cosine you want to find. The value must be in radians.Return Value: It returns a floating point number which is the cosine value of number passed to it as argument.Examples:  Input : cos(3)   Output : -0.98999249660045    Input : cos(-3)  Output : -0.98999249660045    Input : cos(2*M_PI)  Output : 1    Input : cos(0)   Output : 1Below programs illustrate cos() function in PHP:Passing 3 as a parameter:<?phpecho (cos(3));?>Output:-0.98999249660045Passing -3 as a parameter:<?phpecho (cos(-3));?>Output:-0.98999249660045When (2*M_PI) is passed as a parameter, M_PI is a constant in PHP whose value is 3.1415926535898:<?phpecho (cos(2*M_PI));?>Output:1Passing 0 as a parameter:<?phpecho (cos(0));?>Output:1");create(getIdByTitle(this.context,"Math"),"PHP | tan( ) Function","Trigonometry is an important part of mathematics and PHP’s math functions provides us with some functions which are very useful for calculations involving trigonometry.The tan() function in PHP is used to find the tangent of the argument parameter.The argument parameter must be in radians.Syntax:float tan($value)Parameters: This function accepts a single parameter $value. It is the number whose tangent value you want to find. The value of this parameter must be in radians.Return Value: It returns a floating point number which is the tangent value of number passed to it as argument.Examples:  Input : tan(0.50)    Output : 0.54630248984379    Input : tan(-0.50)   Output : -0.54630248984379    Input : tan(5)  Output : -3.3805150062466    Input : tan(M_PI_4)   Output : 1Below programs illustrate tan() in PHP:Passing 0.50 as a parameter:<?phpecho (tan(0.50));?>Output:0.54630248984379Passing -0.50 as a parameter:<?phpecho (tan(-0.50));?>Output:-0.54630248984379Passing 5 as a parameter:<?phpecho (tan(5));?>Output:-3.3805150062466When (M_PI_4) is passed as a parameter, M_PI_4 is a constant in PHP whose value is 0.78539816339744830962:<?phpecho (tan(M_PI_4));?>Output:1");create(getIdByTitle(this.context,"Math"),"PHP | pi( ) Function","While solving mathematical problems we often come across questions which requires the value of π. Manually inserting the value of PI (π) can be time-consuming and erroneous. It is also not considered as a good programming practice. To solve this issue a built-in function of PHP pi() comes to aid.The pi() function in PHP is used to return the value of π . Also, M_PI is a named constant PHP which gives identical value to that of returned by pi() function. It is slightly faster than the pi() function.Some other predefined named constants related to π are :M_PI_2 : It describes π/2. Its value is 1.570796.M_PI_4 : It describes π/4. Its value is 0.785398.M_1_PI : It describes 1/π. Its value is 0.318309.M_PI : It describes π. Its value is 3.141592.M_2_PI : It describes 2/π. Its value is 0.636619.M_SQRTPI : It describes sqrt(π). Its value is 1.772453.M_2_SQRTPI : It describes 2/sqrt(π). Its value is 1.128379.Syntax:float pi()Parameters: This function does not accept any parameter.Return Value: It returns a floating point value which is an approximate value of PI.Examples:  Input : echo(pi())  Output : 3.1415926535898    Input : echo M_PI  Output : 3.1415926535898Below programs illustrate the pi() function in PHP:When pi() function is used:<?phpecho(pi());?>Output:3.1415926535898When M_PI is used for finding the value of PI:<?phpecho M_PI;?>Output:3.1415926535898Important Points To Note:The pi() function can be used to return the value of π.M_PI is a named constant which is slightly faster than the pi() function.pi() function returns the value of pi as float.");create(getIdByTitle(this.context,"Math"),"PHP | hypot() function","The hypot() function is a built-in mathematical function in PHP and returns the square root of sum of square of arguments passed. It finds the hypotenuse, hypotenuse is the longest side of a right angled triangle. It is calculated by the formula :where x and y are the other two sides of the triangle.Syntax:  hypot(x,y);Parameters used:x : the length of first side.y: the length of the second side.Return Type: The return type of hypot(x,y) is Float and it returns the square root of squares of values passed to it as parameters.Examples:  Input : x=3, y=4  Output :5    Input :x=9, y=10  Output : 13.453624047074Below program illustrates the working of hypot() function in PHP:<?php    // PHP code    // Calulating the value of hypotenuse    // With sides = 3,4    $hypotenuse  = hypot(3,4);    print_r($hypotenuse);    // New Line    print_r(\"\\n\");    // Calulating the value of hypotenuse    // With sides = 4,6    $hypotenuse = hypot(4,6);    print_r($hypotenuse);?>Output:  5  7.211102550928Related Article: hypot() in C++");create(getIdByTitle(this.context,"Math"),"PHP | gmp_rootrem() Function","The gmp_rootrem() is a built-in function in PHP which is used to calculate the nth root of a GMP number (GNU Multiple Precision : For large numbers) and returns the integer component of the nth root and its remainder .Syntax :gmp_rootrem($num,$n)Parameters : This function accepts two mandatory parameters as shown in the above syntax. They are specified below :$num : The parameter can be a GMP object in PHP version 5.6 and later, or we can also pass a numeric string provided that it is possible to convert that string to a number.$n : The positive root to be calculated of $num.Examples :  Input : $num = \"8\" $n = 2  Output :  Array (                       [0] => GMP Object ( [num] => 2 )                      [1] => GMP Object ( [num] => 4 )                     )    Input : $num = \"9\" $n = 2  Output : Array (                     [0] => GMP Object ( [num] => 3 )                    [1] => GMP Object ( [num] => 0 )                 )Return Value : This function returns a two element array , both the elements being GMP numbers.The first element of the array is the integer component of the nth root of $num.The second element is the remainder.Below programs will illustrate the use of gmp_rootrem() function in PHP :Program 1 : The below program illustrates the use of the function with GMP number passed as argument.<?php// PHP program to calculate the// integer part and remainder// of nth root of a gmp number// GMP number as arguments$num = gmp_init(8);$n = 3;$rootrem = gmp_rootrem($num, $n);//Display the array elementsecho print_r($rootrem);?>OutputArray  (      [0] => GMP Object ( [num] => 2 )      [1] => GMP Object ( [num] => 0 )  )Program 2 : The below program illustrates the use of the function with numeric string passed as argument.<?php// PHP program to calculate the// integer part and remainder// of nth root of a gmp number// Numeric string as argument$num = \"178924890\";$n = 3;$rootrem = gmp_rootrem($num, $n);//Display the array elementsecho print_r($rootrem);?>OutputArray (   [0] => GMP Object ( [num] => 563 )   [1] => GMP Object ( [num] => 471343 )    )Reference : http://php.net/manual/en/function.gmp-rootrem.php");create(getIdByTitle(this.context,"Math"),"PHP | sqrt( ) Function","Many a times it happens that while solving mathematical expressions we require to calculate the square root of a number.To solve this issue like other programming language PHP provides us with a built-in function sqrt() which can be used to calulate the square root of a number. The sqrt() function in PHP is used to calculate the square root of a number.We already have discussed about sqrt() function in brief in the article PHP | Math functions. In this article we will learn about the pow() function in details.Syntax:float sqrt(value)Parameters : This function accepts a single parameter $value. It is the number whose square root you want to know.Return Value: It returns a floating point value which is the square root of the argument $value passed to it.Examples:  Input : sqrt(25)   Output : 5    Input : sqrt(-25)   Output : NaN    Input : sqrt(0.09)   Output :0.3    Input : sqrt(0)  Output : 0Below programs illustrate the working of sqrt() in PHP:When a positive number is passed as a parameter:<?phpecho(sqrt(25));?>Output:5When a negative number is passed as a parameter:<?phpecho(sqrt(-25));?>Output:NaNWhen a number with decimal places is passed as a parameter:<?phpecho(sqrt(0.09));?>Output:0.3When zero is passed as a parameter:<?phpecho(sqrt(0));?>Output:0Important Points To Note:sqrt() function is used to calculate the square root of a number.It is much more efficient than the generic method of square root calculation.Precision depends on the user\'s precision directive.");create(getIdByTitle(this.context,"Math"),"PHP | deg2rad() Function","Among the methods to measure angles, the two most commonly used are degrees and radians. Students typically learn about degree while learning about radian becomes a later concern. But there are certain cases where radian is the preferred unit of measurement such as:While working with the derivatives of trigonometric functions, it is preferable to use the radian measure for angles, because then derivative are easier as the pi is avoided.In order to derive the relation between linear velocity and angular velocity for any motion in a circle, while using the radian measurement it produces the velocity in natural units i.e. m/s but if we use degrees then we get the velocity in the unit of m.degree/s which has to undergone through another conversion to be in natural form.Thus in some cases it is required to convert from degrees to radian, this is where the method deg2rad() comes in aid.Syntax:  float deg2rad ($value)Parameters: The function takes a single parameters which is a float that represents the angle in degrees.Return Type: This function returns a float value that represents the radian equivalent of the angle.Examples:  Input :  $deg = 45;  Output : 0.78539816339745    Input : $deg = 90;  Output : 1.5707963267949    Input : $deg = 180;  Output : 3.1415926535898Below program illustrates the working of deg2rad() in PHP:<?php// PHP code to illustrate the working of deg2rad()$deg = 22.5;$k = 8;for(;$k>=1;$k/=2, $deg*=2){  if($k!=1)   echo \'pi/\'.$k.\' = \'.deg2rad($deg).\'<br>\';  else   echo \'pi = \'.deg2rad($deg).\'<br>\';}?>Output:  pi/8 = 0.39269908169872  pi/4 = 0.78539816339745  pi/2 = 1.5707963267949  pi = 3.1415926535898Important points to note:It calculates the Radian equivalent of the angle given in degrees.The counterpart of the method is deg2rad().This method produces highly accurate results but is not much time efficient.");create(getIdByTitle(this.context,"Math"),"PHP | rad2deg() Function","Measurement of Angle is one of the foundation stones of Geometry and Trigonometry, and the two most commonly used methods of measurement are Degrees and Radians. Because of it’s simplicity many prefer to use degree over Radian. Some of the reasons that makes degrees more preferable are:Degrees may not be much efficient while calculating derivatives or complicated relations, but it is easy to understand and visualize.While Radian is in fact a ratio, Degree is considered as the unit of rotational displacement where a complete rotation is equivalent to 360 Degrees. Because of this simplicity students are taught and are much more familiar to Degrees rather than Radians.Thus in some cases we may require to convert from radians to degrees, this is where the method rad2deg() comes in aid.Syntax:  float rad2deg($value)Parameters: The function takes a single parameter $value which is of type float that represents an angle in Radians.Return Type: This function returns a float value that represents the Degree equivalent of the given angle $value.Examples:  Input :  $value = M_PI_4;  Output : 45    Input : $value = M_PI_2;  Output : 90    Input : $value = M_PI;  Output : 180Below program illustrates the working of rad2deg() in PHP:<?php// PHP code to illustrate the working of rad2deg()$rad = M_PI;$k = 1;for(;$k<=8;$k*=2, $rad/=2){    if($k!=1)       echo \'pi/\'.$k.\' = \'.rad2deg($rad).\"\\n\";    else       echo \'pi = \'.rad2deg($rad).\"\\n\";}?>Output:  pi = 180  pi/2 = 90  pi/4 = 45  pi/8 = 22.5Important points to note:It calculates the Degrees equivalent of the angle given in Radians.The counterpart of the method is rad2deg().This method produces highly accurate results but is not much time efficient.");create(getIdByTitle(this.context,"Math"),"PHP | cosh( ) Function","The cosh() function is a builtin function in PHP and is used to find the hyperbolic sine of an angle.The hyperbolic cosine of any argument arg is defined as,(exp(arg) + exp(-arg))/2Where, exp() is the exponential function and returns e raised to the power of argument passed to it. For example exp(2) = e^2.Syntax:float cosh($value)Parameters:This function accepts a single parameter $value. It is the number whose hyperbolic cosine value you want to find. The value of this parameter must be in radians.Return Value: It returns a floating point number which is the hyperbolic cosine value of number passed to it as argument.Examples:  Input : cosh(3)   Output : 10.067661995778    Input : cosh(-3)  Output : 10.067661995778    Input : cosh(2*M_PI)  Output : 267.74676148375    Input : cosh(0)   Output : 1Below programs taking different values of $value are used to illustrate the cosh() function in PHP:Passing 3 as a parameter:<?phpecho (cosh(3));?>Output:10.067661995778Passing -3 as a parameter:<?phpecho (cosh(-3));?>Output:10.067661995778When (2*M_PI) is passed as a parameter, M_PI is a constant in PHP whose value is 3.1415926535898:<?phpecho (cosh(2*M_PI));?>Output:267.74676148375Passing 0 as a parameter:<?phpecho (cosh(0));?>Output:1");create(getIdByTitle(this.context,"Math"),"PHP | sinh( ) Function","The sinh() function is a builtin function in PHP and is used to find the hyperbolic sine of an angle.The hyperbolic sine of any argument arg is defined as,(exp(arg) – exp(-arg))/2Where, exp() is the exponential function and returns e raised to the power of argument passed to it. For example exp(2) = e^2.Syntax:float sinh($value)Parameters: This function accepts a single parameter $value. It is the number whose hyperbolic sine value you want to find. The value of this parameter must be in radians.Return Value: It returns a floating point number which is the hyperbolic sine value of number passed to it as argument.Examples:  Input : sinh(3)   Output : 10.01787492741    Input : sinh(-3)  Output : -10.01787492741    Input : sinh(M_PI)  Output : 11.548739357258    Input : sinh(0)   Output : 0Below programs taking different values of $value are used to illustrate the sinh() function in PHP:Passing 3 as a parameter:<?phpecho (sinh(3));?>Output:10.01787492741Passing -3 as a parameter:<?phpecho (sinh(-3));?>Output:-10.01787492741When (M_PI) is passed as a parameter, M_PI is a constant in PHP whose value is 3.1415926535898:<?phpecho (sinh(M_PI));?>Output:11.548739357258Passing 0 as a parameter:<?phpecho (sinh(0));?>Output:0");create(getIdByTitle(this.context,"Math"),"PHP | asin( ) Function","Trigonometry is an important part of mathematics and PHP’s math functions provides us with some functions which are very useful for calculations involving trigonometry. One of such function is asin() function. The asin() function in PHP is used to find the arc sine of a number in radians.We already have discussed about PHP | sin() Function. The asin() function is the complementary function of sin().The parameter passed in the asin() function should specify a number in the range -1 to 1.Syntax:float asin($value)Parameters: This function accepts a single parameter $value. It is the number whose arc sine value you want to find. The value of this parameter must be in radians.Return Value: It returns a floating point number which is the arc sine value of number passed to it as argument.Examples:  Input : asin(0)  Output : 0    Input : asin(1)  Output : 1.5707963267949    Input : asin(-1)  Output : -1.5707963267949    Input : asin(2)  Output : NaNBelow programs illustrate asin() function in PHP:Passing 0 as a parameter:<?phpecho (asin(0));?>Output:0Passing 1 as a parameter:<?phpecho (asin(1));?>Output:1.5707963267949Passing -1 as a parameter:<?phpecho (asin(-1));?>Output:-1.5707963267949Passing 2 as a parameter:<?phpecho (asin(2));?>Output:NaN");create(getIdByTitle(this.context,"Math"),"PHP | acos( ) Function","Trigonometry is an important part of mathematics and PHP’s math functions provides us with some functions which are very useful for calculations involving trigonometry. One of such function is acos() function. The acos() function in PHP is used to find the arc cosine of a number in radians.We already have discussed about PHP | cos() Function. The acos() function is the complementary function of cos().The parameter passed in the acos() function should specify a number in the range -1 to 1.Syntax:float acos($value)Parameters: This function accepts a single parameter $value. It is the number whose arc cosine value you want to find. The value of this parameter must be in radians.Return Value: It returns a floating point number which is the arc cosine value of number passed to it as argument.Examples:  Input : 0  Output : 1.5707963267949    Input : 1  Output : 0    Input : -1  Output : 3.1415926535898    Input : 2  Output : NaNPassing 0 as a parameter:<?phpecho (acos(0));?>Output:1.5707963267949Passing 1 as a parameter:<?phpecho (acos(1));?>Output:0Passing -1 as a parameter:<?phpecho (acos(-1));?>Output:3.1415926535898Passing 2 as a parameter. As 2 is outside the range [-1,1], the function will return NaN :<?phpecho (acos(2));?>Output:NaN");create(getIdByTitle(this.context,"Math"),"PHP | atan( ) Function","Trigonometry is an important part of mathematics and PHP’s math functions provides us with some functions which are very useful for calculations involving trigonometry. One of such function is atan() function.The atan() function in PHP is used to find the arc tangent of an argument passed to it which has as a numeric value between -Pi/2 and Pi/2 radians.We already have discussed about PHP | tan() Function. The atan() function is the complementary function of tan().Syntax:float atan($value)Parameters: This function accepts a single parameter $value. It is the number whose arc tangent value you want to find. The value of this parameter must be in radians.Return Value: It returns a floating point number which is the arc tangent value of number passed to it as argument.Examples:  Input : atan(0.50)    Output : 0.46364760900081    Input : atan(-0.50)   Output : -0.46364760900081    Input : atan(5)  Output : 1.373400766945    Input : atan(100)   Output : 1.5607966601082Below programs with different values of $value illustrate the atan() function in PHP:Passing 0.50 as a parameter:<?phpecho (atan(0.50));?>Output:0.46364760900081Passing -0.50 as a parameter:<?phpecho (atan(-0.50));?>Output:-0.46364760900081Passing 5 as a parameter:<?phpecho (atan(5));?>Output:1.373400766945Passing 100 as a parameter:<?phpecho (atan(100));?>Output:1.5607966601082");create(getIdByTitle(this.context,"Math"),"PHP | acosh( ) Function","In mathematics, the inverse hyperbolic functions are the inverse functions of the hyperbolic functions. For a given value of a hyperbolic function, the corresponding inverse hyperbolic function provides the corresponding hyperbolic angle. PHP provides us with builtin functions for inverse hyperblic calculations. The acosh() function in PHP is used to find the inverse hyperbolic cosine of a number passed to it as argument.Syntax:float acosh($value)Parameters: This function accepts a single parameter $value. It is the number whose inverse hyperbolic cosine value you want to find. The value of this parameter must be in radians.Return Value: It returns a floating point number which is the inverse hyperbolic cosine value of a number passed to it as argument.Examples:  Input : acosh(7)  Output : 2.6339157938496    Input : acosh(56)  Output : 4.7184191423729    Input : acosh(2.45)  Output : 1.5447131178707Below programs, taking different values of $value are used to illustrate the acosh() function in PHP:Passing 7 as a parameter:<?phpecho (acosh(7));?>Output:2.6339157938496Passing 56 as a parameter:<?phpecho (acosh(56));?>Output:4.7184191423729Passing 2.45 as a parameter:<?phpecho (acosh(2.45));?>Output:1.5447131178707");create(getIdByTitle(this.context,"Math"),"PHP | atanh( ) Function","In mathematics, the inverse hyperbolic functions are the inverse functions of the hyperbolic functions. For a given value of a hyperbolic function, the corresponding inverse hyperbolic function provides the corresponding hyperbolic angle. PHP provides us with builtin functions for inverse hyperbolic calculations. The atanh() function in PHP is used to find the inverse hyperbolic tangent of a number passed to it as an argument.Syntax:float atanh($value)Parameters: This function accepts a single parameter $value. It is the number whose inverse hyperbolic tangent value you want to find. The value of this parameter must be in radians.Return Value: It returns a floating point number which is the inverse hyperbolic tangent value of a number passed to it as argument.Examples:  Input : atanh(0.50)    Output : 0.54930614433405    Input : atanh(-0.50)   Output : -0.54930614433405    Input : atanh(1)  Output : INF    Input : atanh(M_PI_4)   Output : 1.0593061708232Below programs, taking different values of the parameter $value are used to illustrate the atanh() function in PHP:Passing 0.50 as a parameter:<?phpecho (atanh(0.50));?>Output:0.54930614433405Passing -0.50 as a parameter:<?phpecho (atanh(-0.50));?>Output:-0.54930614433405Passing 1 as a parameter:<?phpecho (atanh(1));?>Output:INFWhen (M_PI_4) is passed as a parameter, M_PI_4 is a constant in PHP and it’s value is 0.78539816339744830962:<?phpecho (atanh(M_PI_4));?>Output:1.0593061708232");create(getIdByTitle(this.context,"Math"),"PHP | atan2( ) Function","The atan2() function is a builtin function in PHP and is used to calculate the arc tangent of two variables x and y passed to it as arguments.The function returns the result in radians, which is between -Pi and Pi (inclusive).Syntax:float atan2($y, $x)Parameters: This function accepts two parameters and are described below:$y: This parameter specifies the dividend.$x: This parameter specifies the divisor.Return Value: It returns a float value which is the arc tangent of y/x in radians.Examples:  Input : atan2(0.50, 0.50)  Output : 0.78539816339745    Input : atan2(-0.50, -0.50)  Output : -2.3561944901923    Input : atan2(5, 5)   Output : 0.78539816339745    Input : atan2(10, 20)   Output : 0.46364760900081Below programs, taking different values of the parameters are used to illustrate the atan2() function in PHP:When (0.50, 0.50) is passed as a parameter:<?phpecho (atan2(0.50, 0.50));?>Output:0.78539816339745When (-0.50, -0.50) is passed as a parameter:<?phpecho (atan2(-0.50, -0.50));?>Output:-2.3561944901923When (5, 5) is passed as a parameter:<?phpecho (atan2(5, 5));?>Output:0.78539816339745When (10, 20) is passed as a parameter:<?phpecho (atan2(10, 20));?>Output:0.46364760900081");create(getIdByTitle(this.context,"Math"),"PHP | fmod() Function","fmod stands for Floating Modulo. Modulo calculates the remainder of a division which is generally noted with the ‘%’ symbol. However, the general modulo expression expects both the divisor and dividend to be of integer type, this is a great limitation to such an important operation.In PHP the fmod() function is used to calculate the Modulo of any division which may contain floats as both dividend and divisors.Syntax:  float exp ($dividend, $divisor)Parameters: The function takes two parameters as follows:$dividend: This parameter takes a float which is to be divided.$divisor: This parameter takes a float which is to be used as a divisor.Return Type: This function returns a Floating-point remainder of the division.Examples:  Input :  $dividend = 2.7,  $divisor = 1.3;     Output : 0.1    Input : $dividend = -2.7,  $divisor = 1.1;   Output : -0.5Below program illustrates the working of fmod() in PHP:<?php// PHP code to illustrate the// working of fmod() Function$dividend = 2.5;$divisor = 1.1;for(;$divisor<1.25;$divisor+=0.05)    echo $dividend.\' % \'.$divisor.\' = \'.          fmod($dividend, $divisor).\"\\n\";?>Output:  2.5 % 1.1 = 0.3  2.5 % 1.15 = 0.2  2.5 % 1.2 = 0.1Important points to note:fmod() function returns Floating Point Modulo.fmod() is an approximation method and may not always return the accurate result.");create(getIdByTitle(this.context,"Math"),"PHP | asinh( ) Function","In mathematics, the inverse hyperbolic functions are the inverse functions of the hyperbolic functions. For a given value of a hyperbolic function, the corresponding inverse hyperbolic function provides the corresponding hyperbolic angle. PHP provides us with builtin functions for inverse hyperblic calculations. The asinh() function in PHP is used to find the inverse hyperbolic sine of a number passed to it as argument.Syntax:float asinh($value)Parameters: This function accepts a single parameter $value. It is the number whose inverse hyperbolic sine value you want to find. The value of this parameter must be in radians.Return Value: It returns a floating point number which is the inverse hyperbolic sine value of a number passed to it as argument.Examples:  Input : asinh(7)  Output : 2.6441207610586    Input : asinh(56)  Output : 4.7185785811518    Input : asinh(2.45)  Output : 1.6284998192842Below programs, taking different values of $value are used to illustrate the asinh() function in PHP:Passing 7 as a parameter:<?phpecho (asinh(7));?>Output:2.6441207610586Passing 56 as a parameter:<?phpecho (asinh(56));?>Output:4.7185785811518Passing 2.45 as a parameter:<?phpecho (asinh(2.45));?>Output:1.6284998192842");create(getIdByTitle(this.context,"Math"),"PHP | exp() Function","Euler’s Number or commonly known as e is a very popular irrational number which approximates to 2.718281828, and is one of the most important mathematical constants. e is the base of the Natural system of logarithms. The exponential values are broadly used in many occasions such as Compound Interests, Bernoulli trials, Normal Distribution, Calculus and many more.The exp() function is used to calculate e raised to the power of the given argument.Syntax:  float exp($power)Parameters: The function takes a single parameter $power which defines the power e has to be raised to.Return Type: This function returns the value of e raised to the power of the given argument as a float.Examples:  Input :  $power = 0;  Output : 1    Input : $power = 1;  Output : 2.718281828459Below program illustrates the working of exp() in PHP:<?php// PHP code to illustrate the working of exp() Functionfor($i=-2;$i<=2;$i++)    echo \'e^\'.$i.\' = \'.exp($i).\"\\n\";?>Output:  e^-2 = 0.13533528323661  e^-1 = 0.36787944117144  e^0 = 1  e^1 = 2.718281828459  e^2 = 7.3890560989307Important points to note:exp() function is a very popular method to calculate exponential values.log() function is the functional counterpart of exp().");create(getIdByTitle(this.context,"Math"),"PHP | intdiv() Function","intdiv stands for integer division. This function returns the integer quotient of the division of the given dividend and divisor. This function internally removes the remainder from the dividend to make it evenly divisible by the divisor and returns the quotient after division.Syntax:  int intdiv($dividend, $divisor)Parameters: The function takes two parameters as follows:$dividend: This signed integer parameter refers to the number to be divided.$divisor: This signed integer parameter refers to the number to be used as the divisor.Return Type: This function returns the quotient calculated.Examples:  Input :  $dividend = 5, $divisor = 2  Output : 2    Input : $dividend = -11, $divisor = 2  Output : -5Exception/Error:: The function raises exception in following cases:If we pass the divisor as 0, then the function raises DivisionByZeroError exception.If we pass PHP_INT_MIN as the dividend and -1 as the divisor, then an ArithmeticError exception is thrown.Below program illustrates the working of intdiv in PHP:<?php// PHP code to illustrate the working// of intdiv() Functions$dividend = 19;$divisor = 3;echo intdiv($dividend, $divisor);?>Output:  6After Seeing so far many may think that this function is equivalent tofloor($dividend/$divisor)but the example will elaborate the difference.<?php// PHP code to differentiate between// intdiv() and floor()$dividend = -19;$divisor = 3;echo intdiv($dividend, $divisor) .\"\\n\".             floor($dividend/ $divisor);?>Output:  -6  -7Important points to note:intdiv() Function returns the quotient of integer division.The function may raise exceptions thus the developer has to tackle edge cases.The function is not equivalent to the floor function applied to the float division or ‘/’.");create(getIdByTitle(this.context,"Math"),"PHP | log(), log10() Functions","Logarithm is the counter operation to exponentiation. The logarithm of a number is in fact the exponent to which the other number i.e. the base must be raised to produce that number. If the Euler’s Number ‘e’ is used as the base of any logarithmic operation it is then known as Natural Logarithmic Operation, another popular logarithmic operation is to take 10 as the base.In PHP, the log() function is used to calculate the natural logarithm of a number if no base is specified and the log10() function calculates the base 10 logarithm of a number.log() FunctionSyntax:  float log ($arg, $base)Parameters: The function can accept at most two parameters as follows:$arg: This is a required parameter that refers to the number of whose the logarithm is to be calculated.$base: This is an optional parameter that refers to the base of the logarithmic operation. If not given, M_E i.e. the Euler’s Number is used as Base to calculate the Natural Logarithm.Return Type: This function returns the result of the logarithmic operation.Examples:  Input :  $arg = M_E * M_E;  Output : 2    Input : $arg = 1024;          $base = 2;  Output : 10Below program illustrates the working of log() in PHP:<?php// PHP code to illustrate the working of log() Function$arg = 81;$base = 3;for(;$base<=$arg;$base*=$base)  echo \'log(\'.$arg.\', \'.$base.\') = \'.log($arg, $base).\"\\n\";?>Output:  log(81, 3) = 4  log(81, 9) = 2  log(81, 81) = 1log10() FunctionSyntax:  float log ($arg)Parameters: The function accepts a single parameter $arg which refers to the number of whose the logarithm is to be calculated.Return Type: This function returns the result of the Base 10 logarithmic operation.Examples:  Input :  $arg = 100;  Output : 2    Input : $arg = 10000;          $base = 4;  Output : 10Below program illustrates the working of log10() in PHP:<?php// PHP code to illustrate the working of log10() Function$arg = 100000;for(;$arg>=10;$arg/=10)  echo \'log10(\'.$arg.\') = \'.log10($arg).\"\\n\";?>Output:  log10(100000) = 5  log10(10000) = 4  log10(1000) = 3  log10(100) = 2  log10(10) = 1Important points to note:log() function is a very popular method to calculate logarithmic values.is the functional counterpart of log().");create(getIdByTitle(this.context,"Math"),"PHP | is_finite(), is_infinite(), is_nan() Functions","Given any numerical value, it can be classified into 3 different classes such as Finite Number, Infinite Number and Not a Number or commonly known as NaN. While developing a project that is highly dependent on User Inputs there might be many cases where the user provides inappropriate inputs while a function expects a finite numerical input thus creating an unhandled situation or unexpected result.Thus it is a secure option to check whether a given input value is finite or not.is_finite() FunctionSyntax:  bool is_finite ($value)Parameters: The function takes a single parameter which is a float that is to be checked.Return Type: This function returns TRUE if the given value is finite otherwise FALSE.Examples:  Input :  $value = M_PI_4;  Output : TRUE    Input : $value = log(0);  Output : FALSEis_infinite() FunctionSyntax:  bool is_infinite ($value)Parameters: The function takes a single parameter which is a float that is to be checked.Return Type: This function returns TRUE if the given value is infinite otherwise FALSE.Examples:  Input :  $value = M_PI_4;  Output : FALSE    Input : $value = log(0);  Output : TRUEis_nan() FunctionSyntax:  bool is_nan ($value)Parameters: The function takes a single parameter which is a float that is to be checked.Return Type: This function returns TRUE if the given value is not a number otherwise FALSE.Examples:  Input :  $value = M_PI_4;  Output : FALSE    Input : $value = acos(1.1); // cos function can not be greater than 1  Output : TRUEBelow program illustrates the working of is_finite(), is_infinite(), is_nan() functions in PHP:<?php// PHP code to illustrate the working of// is_finite(), is_infinte() and is_nan() Functions// Finite Value: PI$val1 = M_PI;// In-built value of INFINITY$val2 = INF;// Produces NaN as COS value can reside// between -1 to +1 both inclusive$val3 = acos(-1.01);echo var_dump(is_finite($val1), is_finite($val2),                            is_finite($val3)).\"\\n\";echo var_dump(is_infinite($val1), is_infinite($val2),                          is_infinite($val3)).\"\\n\";echo var_dump(is_nan($val1), is_nan($val2),                        is_nan($val3)).\"\\n\";?>Output:  bool(true) bool(false) bool(false)   bool(false) bool(true) bool(false)   bool(false) bool(false) bool(true)Important points to note:This function can also check whether an expression produces finite result, but in case of expressions that lead to NaN PHP itself shows error and default FALSE is returned, such as in case of checking a Divided by Zero expression.is_finite() Function is used in many projects to make it more secure and efficient.These methods produce highly accurate results but is not much time efficient.");create(getIdByTitle(this.context,"Math"),"PHP Math Functions (abs, pi, deg2rad, rad2deg, fmod, floor, ceil, round, is_finite, is_infinite)","As you know PHP is a sever side script language and is used for creating dynamic web pages. PHP provides a number of built-in math functions which help in performing several operations while dealing with mathematical data. It has nice support for mathematical processing. No installation is required to use these functions.Some examples of mathematical functions in PHP are as follows:1. abs() :This function takes negative value as input and returns the absolute (positive) value of a integer or float number.Syntax :abs(number);In this function ‘number’ can be float or integer.Example :<?php// PHP code to return absolute value.function absolute($degree){    return (abs($degree));}// Driver Code$number = -8.4;echo(absolute($number));?>Output :  8.42. pi() :This function returns the value of pi. The named constant M_PI is identical to pi().Syntax :pi();Example :<?php# PHP function to convert degree to radian value.echo(pi());?>Output :  3.14159265358983. deg2rad() :This function takes a degree value as input and convert it to a radian value.Syntax :deg2rad(number);Example :<?php// PHP code to convert degree to radian value.function deg_radian($degree){    return (deg2rad($degree));}// Driver Code$number = 180;echo(deg_radian($number));?>Output :  3.14159265358984. rad2deg() :This function takes a radian value as input and convert it to a degree value.Syntax :rad2deg(number);Example :<?php// PHP function to convert degree to radian value.echo(rad2deg(pi()));?>Output :  1805. fmod() :This function takes two arguments as input returns the floating point remainder (modulo) of division of arguments.Syntax :fmod(x, y);Here, x is dividend and y is divisor. The remainder (r) is defined as: x = i * y + r, for some integer i. If y is non-zero, r has the same sign as x and a magnitude less than the magnitude of y.Example :<?php// PHP code to find modulo of x / yfunction result($x, $y){    return fmod($x, $y);}// Driver function$x = 5.7;$y = 1.3;echo(result($x, $y));?>Output :  0.5Here, $r equals 0.5, because 4 * 1.3 + 0.5 = 5.7 (x = i * y + r)6. floor() :This function takes numeric value as argument and returns the next lowest integer value (as float) by rounding down value if necessary.Syntax :floor($number);Example :<?phpecho(floor(0.60).\"\\n\");echo(floor(5).\"\\n\");echo(floor(-5.9));?>Output :  0  5  -67. ceil() :This function takes numeric value as argument and returns the next highest integer value by rounding up value if necessary.Syntax :ceil($number);Example :<?phpecho(ceil(0.60).\"\\n\");echo(ceil(-5.9));?>Output :  1  -58. round() :This function takes numeric value as argument and returns the next highest integer value by rounding up value if necessary.Syntax :round(number, precision, mode);In this, number specifies the value to round, precision specifies the number of decimal digits to round to (Default is 0) and, mode(optional) specifies one of the following constants to specify the mode in which rounding occurs :PHP_ROUND_HALF_UP : (set by Default) Rounds number up to precision decimal, when it is half way there. Rounds 1.5 to 2 and -1.5 to -2PHP_ROUND_HALF_DOWN : Round number down to precision decimal places, when it is half way there. Rounds 1.5 to 1 and -1.5 to -1PHP_ROUND_HALF_EVEN : Round number to precision decimal places towards the next even value.PHP_ROUND_HALF_ODD : Round number to precision decimal places towards the next odd value.Example :<?phpecho(round(1.95583, 2).\"\\n\");echo(round(1241757, -3).\"\\n\");echo(round(9.5, 0, PHP_ROUND_HALF_UP).\"\\n\");echo(round(9.5, 0, PHP_ROUND_HALF_DOWN).\"\\n\");echo(round(9.5, 0, PHP_ROUND_HALF_EVEN).\"\\n\");echo round(9.5, 0, PHP_ROUND_HALF_ODD);?>Output :  1.96  1242000  10  9  10  99. is_finite() :This function takes any value as argument and checks whether a value is finite or not. It returns TRUE (1) if the specified value is a finite number, otherwise it returns FALSE/NOTHING.The value is a legal finite if it is within the allowed range for a PHP float on this platform.Syntax :is_finite(value);Example :<?phpecho is_finite(234).\"\\n\";echo is_finite(log(0));?>Output :  110. is_infinite() :This function takes any value as argument and checks whether a value is infinite or not. It returns TRUE (1) if the specified value is a infinite number, otherwise it returns FALSE/NOTHING.The value is a legal infinite if it is outside the allowed range for a PHP float on this platform.Syntax :is_infinite(value);Example :<?phpecho is_infinite(234).\"\\n\";echo is_infinite(log(0));?>Output :1");create(getIdByTitle(this.context,"Math"),"PHP Math Functions (is_nan, pow, sqrt, exp, log, log10, log1p, max, min, getrandmax, rand, mt_rand)","11. is_nan() :This function takes any value as argument and checks whether a value is number or not. It returns TRUE (1) if the specified value is ‘not a number’, otherwise it returns FALSE/NOTHING.Syntax :is_nan(value);Example :<?phpecho is_nan(234) . \"\\n\";echo is_nan(asin(1.1)) ;?>Output :1Note : (is_finite(value)) is equivalent to (!is_infinite(value) && (!is_nan(value)), i.e. a number can only be one of finite, infinite and NaN(not a number). You don’t need to check both is_infinite() and is_nan() to see if a number is invalid or out of range.12. pow() :This function takes base and exponent as arguments and returns base raised to the power of exponent.Syntax :pow(base,exponent);Example :<?phpecho(pow(2,4) . \"\\n\");echo(pow(-2,-4));?>Output :  16  0.062513. sqrt() :This function takes numeric value as arguments and returns the square root of value.Syntax :sqrt(number);Example :<?phpecho(sqrt(9) . \"\\n\");echo(sqrt(0.64));?>Output :  3  0.814. exp() :The function returns e raised to the power of x .’e’ is the base of the natural system of logarithms (approximately 2.718282) and x is the number passed to it.Syntax :exp(x);Example :<?php# PHP code to calculate exponent of e.function exponent($number){    return (exp($number));}// Driver Code$number = 0;echo (exponent($number));?>Output :  115. log() :This function takes any number and base as arguments and returns the natural logarithm of a number, or the logarithm of number to base.Syntax :log(number, base);In this, number specifies the value to calculate the logarithm for.base(Optional) specifies the logarithmic base to use (Default is ‘e’).Example :<?phpecho(log(5.987) . \"\\n\");echo(log(1));?>Output :  1.7895904519432  016. log10() :This function takes any number as argument and returns the base-10 logarithm of a number.Syntax :log10(number);Here, number specifies the value to calculate the logarithm for.Example :<?phpecho(log10(5.987) . \"\\n\");echo(log10(0));?>Output :  0.77720925814568  -INF17. log1p() :This function takes any number as argument and returns log(1+number), computed in a way that is accurate even when the value of number is close to zero.Syntax :log1p(number);Here, number specifies the number to process.Example :<?phpecho(log1p(5.987) . \"\\n\");echo(log1p(0));?>Output :  1.9440512795703  018. max() :In this function, if the first and only parameter is an array, max() returns the highest value in that array. If at least two parameters are provided, max() returns the biggest of these values.Syntax :max(array_values);  or  max(value1,value2,...);Example :<?phpecho(max(3,4,6,12,10) . \"\\n\");echo(max(array(48,76,83,22)));?>Output :  12  8319. min() :In this function, if the first and only parameter is an array, min() returns the lowest value in that array. If at least two parameters are provided, min() returns the smallest of these values.Syntax :min(array_values);  or  min(value1,value2,...);Example :<?phpecho(min(3,4,6,12,10) . \"\\n\");echo(min(array(48,76,83,22)));?>Output :  3  2220. getrandmax() :This function dosen’t take any arguments and returns the largest possible value that can be returned by rand() function.Syntax :getrandmax();Example :<?phpecho(getrandmax());?>Output :  214748364721. rand() :If this function is called without the optional min, max arguments rand() returns a pseudo-random integer between 0 and getrandmax(). If you want a random number between 12 and 56 (inclusive). Example, use rand(12, 56).Syntax :rand();  or  rand(min,max);Example :Here, min Specifies the lowest number to be returned(Default is 0).max Specifies the highest number to be returned(Default is getrandmax())<?phpecho(rand() . \"\\n\");echo(rand(12,100));?>Output :  1135079733  76Output may vary time to time as it generates random number.22. mt_rand() :This function is a drop-in replacement for the older rand(). It uses a random number generator with known characteristics using the Mersenne Twister algorithm, which will produce random numbers four times faster than what the average rand() provides.If called without the optional min, max arguments mt_rand() returns a pseudo-random value between 0 and mt_getrandmax(). If you want a random number between 12 and 56 (inclusive),Example, use mt_rand(12, 56).Syntax :mt_rand();  or  mt_rand(min,max);Example :Here, min Specifies the lowest number to be returned(Default is 0).max Specifies the highest number to be returned(Default is getrandmax())<?phpecho(mt_rand() . \"\\n\");echo(mt_rand(12,100));?>Output :  952458556  87Output may vary time to time as it generates random number.");
    }

    private void functionArticles()
    {
        create(getIdByTitle(this.context,"Functions"),"PHP | gmp_fact() for large factorials","The gmp_fact() is a built-in function in PHP which is used to calculate the factorial of a GMP number (GNU Multiple Precision : For large numbers).Syntax:gmp_fact ( $num )Parameters: This function accepts a GMP number as a mandatory parameter as shown in the above syntax. It can be a GMP object in PHP version 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.This function calculates the factorial of this number and returns it.Return Value: This function returns a GMP number which is the factorial of the number passed as parameter.Examples:  Input : \"9\"  Output : 362880    Input : 25  Output : 15511210043330985984000000Below programs illustrate the gmp_fact() function in PHP :Program 1:<?php$fact = gmp_fact(5);echo gmp_strval($fact);?>Output:  120Program 2:<?php$fact = gmp_fact(25);echo gmp_strval($fact);?>Output:  15511210043330985984000000");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_nextprime() Function","The gmp_nextprime() is an inbuilt function in PHP which is used to calculate the prime number just greater than a given GMP number(GNU Multiple Precision : For large numbers).Syntax:gmp_nextprime($num)Parameters: This function accepts a GMP number $num as a mandatory parameter as shown in the above syntax whose next prime we want to find. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: This function returns a GMP number which is the prime number just greater than the GMP number passed to it as a parameter.Examples:  Input : gmp_nextprime(\"15\")  Output : 17    Input : gmp_nextprime(\"21\")  Output : 23Below programs illustrate the gmp_nextprime() function in PHP :Program 1: Program to calculate the prime number just greater than a GMP number when numeric string as GMP number is passed as an argument.<?php// PHP program to calculate the prime number greater// than that of a GMP number passed as arguments// strings as GMP numbers$num = \"135\";// gives the prime number just greater// than 135 as a GMP number$res = gmp_nextprime($num);echo $res;?>Output:  137Program 2: Program to calculate the prime number greater than that of a GMP number when GMP number is passed as an argument.<?php// PHP program to calculate the prime// number greater than that of a GMP number// creating GMP numbers using gmp_init()$num = gmp_init(1000);// gives the prime number just greater// than 1000 as a GMP number$res = gmp_nextprime($num);echo $res;?>Output:  1009");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_root() Function","The gmp_root() is an in-built function in PHP which returns the integer part of the N-th root of a GMP number(GNU Multiple Precision: For large numbers).Syntax:gmp_pow( $num, $n )Parameters: The function accepts two mandatory parameters $num and $n.$num – This is the GMP number whose integer part of the n-th root is returned. The parameter is a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.$n – the positive n-th root of the number. It is an integer value.Return Value: This function returns a positive GMP number which is the integer part of the N-th root of the $num.Examples:  Input : $num = \"20\" $n = 2  Output : 4     Input : $num = \"9\" $n = 2  Output : 2Below programs illustrate the gmp_root() function:Program 1: The program below demonstrates the working of gmp_root() function when GMP number is passed as argument..<?php// PHP program to calculate the// integer part of N-th root of// a GMP number// GMP number as arguments$num = gmp_init(\"1001\", 2);$n = 3;// function calculates the pow raised to// number modulo mod//  integer part of cubic root of 9$root = gmp_root($num, $n);// gmp_strval Convert GMP number to string// representation in given base(default 10).echo gmp_strval($root, 2);?>Output:10Program 2: The program below demonstrates the working of gmp_root() when numeric string is passed as an argument.<?php// PHP program to calculate the// integer part of N-th root of// a GMP number// GMP number as arguments$num = \"9\";$n = 3;// function calculates the pow raised to// number modulo mod// integer part of cubic root of 9$root = gmp_root($num, $n);echo $root;?>Output:2Program 3: Program to find the integer part of a square root of a number.<?php// PHP program to calculate the// integer part of N-th root of// a GMP number// GMP number as arguments$num = \"25\";$n = 2;// function calculates the pow raised to// number modulo mod// integer part of square root of 25$root = gmp_root($num, $n);echo $root;?>Output:5");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_abs() Function","The gmp_abs() is an in built function in PHP which is used to calculate the absolute value of a GMP number (GNU Multiple Precision : For large numbers).Syntax :gmp_abs( $num )Parameters : This function accepts a GMP number as parameter as shown in the above syntax. It can be a GMP object in PHP version 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.This function calculates the absolute value of this number and returns it.Return Value : This function returns a positive GMP number which is the absolute value of the number passed as parameter.Examples:  Input : \"16497863358\"  Output : 16497863358    Input : \"-16497863358\"  Output : 16497863358Below programs illustrate the use of gmp_abs() function in PHP :Program 1:<?php// Passing a positive number// as a numeric string$val1 = gmp_abs(\"16497863358\");// Passing a negative number// as a numeric string$val2 = gmp_abs(\"-16497863358\");echo gmp_strval($val1);echo \"\\n\";echo gmp_strval($val2);?>Output:  16497863358  16497863358Program 2:<?php// Passing a positive number// as a numeric string$val1 = gmp_abs(\"1897023411\");// Passing a negative number// as a numeric string$val2 = gmp_abs(\"-1897023411\");echo gmp_strval($val1);echo \"\\n\";echo gmp_strval($val2);?>Output:  1897023411  1897023411");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_add() for adding large numbers","The gmp_add() is a built-in function in PHP which is used to add two GMP numbers (GNU Multiple Precision : For large numbers).Syntax :gmp_add ( $num1, $num2 )Parameters: This function accepts two GMP numbers as mandatory parameters as shown in the above syntax. These can be a GMP object in PHP version 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number. This function adds these two numbers and returns it.Return Value: This function returns a GMP number which is sum of the two numbers passed as parameter.Examples:  Input : \"123456789\", \"987654321\"  Output : 1111111110    Input : \"5628179032615\", \"7136454221086\"  Output : 12764633253701Below programs illustrate the gmp_add() function in PHP :Program 1 :<?php$sum = gmp_add(\"5628179032615\", \"7136454221086\");echo gmp_strval($sum);?></div>Output:  12764633253701Program 2:<?php$sum = gmp_add(\"123456789\", \"987654321\");echo gmp_strval($sum);?>Output:  1111111110");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_gcd() Function","The gmp_gcd() is an in built function in PHP which is used to calculate the GCD of 2 GMP numbers (GNU Multiple Precision : For large numbers).Syntax:  gmp_gcd ( $num1, $num2 )Parameters: This function accepts two GMP numbers $num1 and $num2 as parameters. This function calculates the GCD of these two numbers.Return Value: This function returns a positive GMP number which is the GCD of $num1 and $num2.Examples:  Input : gmp_gcd(\"12\", \"21\")  Output : 3    Input : gmp_gcd(\"15\", \"30\")  Output : 15Explanation: In the above example gmp_gcd() function calculates the greatest common divisor of num1 and num2. The result is always positive even if either of, or both, input operands are negative.Below programs illustrate the gmp_gcd() function in PHP.Program 1:<?php$gcd = gmp_gcd(\"12\", \"21\");echo gmp_strval($gcd) . \"\\n\";?>Output:3Program 2:<?php$gcd = gmp_gcd(\"15\", \"30\");echo gmp_strval($gcd) . \"\\n\";?>Output:15");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_import() Function","The gmp_import() function is an inbuilt function in php which imports a GMP number(GNU Multiple Precision: For large numbers) from a binary string.Syntax:  GMP gmp_import ( string $data, int $word_size, int $options )Parameters: The gmp_import() function accepts three parameters as mentioned above and described below:$data: It is one of the required parameters, contains the binary string which is supposed to be imported.$word_size: This is also a parameter of the gmp_import() function. It contains the number of bytes in each chunk of binary data. This parameter is mainly used simultaneously with the options parameter. The default value of this parameter is 1.$options: This parameter has default value of GMP_MSW_FIRST | GMP_NATIVE_ENDIAN.Return Value: The function returns a GMP number on success otherwise returns FALSE on failure.Below programs illustrate the gmp_import() function in PHP:Program 1:<?php// php code implementing gmp_import()// function$number = gmp_import(\"\\0\");// The gmp_strval() returns the// string value of the gmp numberecho gmp_strval($number) . \"\\n\";?>Output:   0Program 2:<?php// php code implementing the// gmp_import() function$number = gmp_import(\"\\0\\1\\2\");// The strval() returns the string// value of the gmp numberecho gmp_strval($number) . \"\\n\";?>Output:   258Related Articles:Reference: php.net/manual/en/function.gmp-import.php");create(getIdByTitle(this.context,"Functions"),"PHP | intval() Function","The intval() function is an inbuilt function in PHP which returns the integer value of a variable.Syntax:  int intval ( $var, $base )Parameters: This function accepts two parameters out of which one is mandatory while the other one is optional. Parameters are described below:$var: It is a mandatory parameter serves as the variable which needs to be converted to its integer value.$base: It ia a optional parameter specifies the base for conversion of $var to its corresponding integer. If $base is not specified.If $var contains 0x (or 0X) as prefix, the base is taken as 16.If $var contains 0, the base is taken as 8Otherwise, the base is taken as 10.Return Value: It returns the corresponding integer value of $var.Examples:  Input : $var = \'120\', $base = 8  Output : 80    Input : $var = 0x34  Output : 52    Input : $var = 034  Output : 28Below programs illustrate the use of intval() function in PHP:Program 1:<?php$var = \'7.423\';$int_value = intval($var);echo $int_value;?>Output:  7Program 2:<?php$var = 0x423;$int_value = intval($var);echo $int_value;?>Output:  1059Program 3:<?php$var = \"64\";echo intval($var).\"\\n\".intval($var, 8);?>Output:  64  52");create(getIdByTitle(this.context,"Functions"),"PHP | include_once() and require_once()","We already have learnt about file inclusion in PHP in the article PHP | (Include and Require). We have discussed about include() and require() functions for file inclusion in our previous article. In this article we will discuss about two more yet useful functions in PHP for file inclusion: include_once() and require_once() functions.include_once() FunctionThe include_once() function can be used to include a PHP file in another one, when you may need to include the called file more than once. If it is found that the file has already been included, calling script is going to ignore further inclusions.If a file named a.php is a php script calling b.php with include_once() function, and does not find b.php, a.php executes with a warning, excluding the part of the code written within b.php.Syntax: include_once(\'name of the called file with path\');Example:// name of file is header.inc.php<?phpecho \"GEEKSFORGEEKS\";?>The above file is header.inc.phpThe above file header.inc.php, is included twice with include_once() function in the following file index.php. But from the output, you will get that the second instance of inclusion is ignored since include_once() function ignores all the similar inclusions after the first one.// name of file is index.php<?phpinclude_once(\'header.inc.php\');include_once(\'header.inc.php\');?>Output:GEEKSFORGEEKSrequire_once() Functionrequire_once() function can be used to include a PHP file in another one, when you may need to include the called file more than once. If it is found that the file has already been included, calling script is going to ignore further inclusions.If a.php is a php script calling b.php with require_once() function, and does not find b.php, a.php stops execution causing a fatal error.Syntax: require_once(\'name of the called file with path\');Example:// name of file is header.inc.php<?phpecho \"GEEKSFORGEEKS\";?>The above file is header.inc.phpThe above file header.inc.php, is included twice with require_once() function in the following file index.php. But from the output, you will get that the second instance of inclusion is ignored since require_once() function ignores all the similar inclusions after the first one.// name of file is index.php<?phprequire_once(\'header.inc.php\');require_once(\'header.inc.php\');?>Output:GEEKSFORGEEKSinclude_once() vs require_once()Both functions work as same and produce same output but if any error arises then differences come.Example:If we don’t have a file named header.inc.php, then in the case of the include_once(), the output will be shown with warnings about missing file, but at least the output will be shown from the index.php file.In the case of the require_once(), if the file PHP file is missing, then a fatal error will arise and no output is shown and the execution halts.");create(getIdByTitle(this.context,"Functions"),"PHP | juliantojd() Function","The juliantojd() function is an inbuilt function in PHP which is used to convert Julian calendar Date to Julian Day count. The range of date for Julian Calendar is valid from Julian Calendar 4713 B.C.(Before Christ) to 9999 A.D.(anno domini).Syntax:int juliantojd( $month, $day, $year )Parameters: This function accepts three parameters as mentioned above and described below:$month: It is a mandatory parameter which is used to specify the month number in Julian Calendar. The month number is in range 1 (i.e January) to 12 (i.e December).$day: It is a mandatory parameter which is used to specify the day in Julian calendar. The day number is in range 1 to 31.$year: It is a mandatory parameter which is used to specify the year in Julian calendar. The year number is from -4713 to 9999.Return Value: This function returns a Julian Day for the given Julian date.Exceptions: The Valid range of the Julian calendar is 4713 B.C. to 9999 A.D.Below programs illustrate the juliantojd() function in PHP.Program 1:<?php// converts Julian calender Date to// Julian Day number.$jdate = juliantojd(8, 30, 2018);// printd the Julian Day Countecho \"Julian Day count: \" . $jdate . \"\\n\";// converts Julian Day number to// Julian calender Date.$julian = jdtojulian($jdate);// prints the Julian calender Date.echo \"Julian calender: \" . $julian;?>Output:  Julian Day count: 2458374  Julian calender: 8/30/2018Program 2:<?php// convert Julian Calender Date to Julian Day number.$jdate = juliantojd(12, 3, 2001);// prints the Julian calender.echo \"Julian calender \" . $jdate . \"\\n\";// convert Julian calender Date into julian Day number.$julian = jdtojulian($jdate);// print the Julian date number.echo \"Julian Date Count : \" . $julian;?>Output:  Julian calender 2452260  Julian Date Count : 12/3/2001Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | jdtojulian() Function","The jdtojulian() function is an inbuilt function in PHP which is used to convert a Julian day count to a Julian calendar Date. It converts Julian Day Count to a string containing the Julian Calendar Date in the month/day/year format.Syntax:int jdtojulian( $julianday )Parameters: This function accepts single parameter $julianday which is mandatory. It contains julian day as integer.Return Value: This function returns the Julian Date as a string in the month/day/year format.Below programs illustrate the jdtojulian() function in PHP.Program 1:<?php// Converts a Julian calender date// to Julian Day count.$jdate = juliantojd(10, 25, 1996);// Print the Julian Day count.echo \"JulianToJD is : \".$jdate . \"\\n\";// First converts the julian day to Julian// Calender date and then print it.echo \"JDToJulian is : \".jdtojulian($jdate);?>Output:  JulianToJD is : 2450395  JDToJulian is : 10/25/1996Program 2:<?php// Converts Julian calender Date// to Julian Day count.$jdate = juliantojd(1, 10, 1998);// Print the Julian Day countecho \"Julian Day Count : \".$jdate . \"\\n\";// Converts Julian Day count to// the Julian calender Date$julian = jdtojulian($jdate);// Print the julian calender Date.echo \"Julian Calender Date : \".$julian;?>Output:  Julian Day Count : 2450837  Julian Calender Date : 1/10/1998Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | cal_to_jd() Function","The cal_to_jd() function is an inbuilt function in PHP which is used to converts a specified date into Julian Day Count. The cal_to_jd() function calculates the Julian day count for a date in the specified calendar. This function supports CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH calandars.Syntax:int cal_to_jd( $calendar, $month, $day, $year )Parameters: This function accepts four parameters as mentioned above and described below:$calendar: It is used to specify the calendar for calculation. The calendar values are Gregorian calendar, French calendar, Jewish calendar and Julian calendar.$month: It is used to specify the Month in the selected calendar.$day: It is used to specify the Day in the selected calendar.$year : It is used to specify the year in the selected calendar.Return Value: This function returns a Julian Day number.Below programs illustrate the cal_to_jd() function in PHP.Program 1:<?php// Converts a Gregorian calender Date// into Julian Day number.$date = cal_to_jd(CAL_GREGORIAN, 11, 03, 2007);// Prints the conversion of date to// Julain Day number.echo $date;?>Output:  2454408Program 2:<?php// Converts Julian calender Date into// Julian Day count.$date = cal_to_jd(CAL_JULIAN, 7, 20, 20017);// Prints the above conversion.echo $date;?>Output:  9032468Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | floatval() Function","The floatval() function is an inbuilt function in PHP which returns the float value of a variable.Syntax:  float floatval ( $var )Parameters: This function accepts one parameter which is mandatory and described below:$var: The variable whose corresponding float value will be returned. This variable should not be an object.Return Value: It returns float value of given variable. Empty array returns 0 and non-empty array returns 1.Note: If an object is passed to the function, it produce an E_NOTICE level error and return 1.Examples:  Input : $var = \'41.68127E3\'  Output : 41681.27    Input : $var = \'47.129mln\'  Output : 47.129Below programs illustrate the use of floatval() function in PHP:Program 1:<?php$var = \'41.68127E3\';$float_value = floatval($var);echo $float_value;?>Output:  41681.27Program 2:<?php$var = \'47.129mln\';$float_value = floatval($var);echo $float_value;?>Output:  47.129");create(getIdByTitle(this.context,"Functions"),"PHP | doubleval() Function","The doubleval() is an inbuilt function in PHP which is used to get a float value of a variable. This function is an alias of floatval().Syntax:doubleval ( $variable_name )Parameters: This function accepts one parameter $variable_name as shown in above syntax. It is a mandatory parameter. This parameter specifies the name of variable that is to be converted. This parameter can be of mixed type example integer, string, etc.Return Value: It returns float value of given variable.Below programs illustrate the use of doubleval() function in PHP:Program 1:<?php// PHP program to illustrate// doubleval() function$var = \'41.68127E3\';$double_value = doubleval($var);echo $double_value;?>Output:  41681.27Program 2:<?php// PHP program to illustrate// doubleval() function$var = \'47.129mln\';$double_value = doubleval($var);echo $double_value;?>Output:  47.129Related Articles:Refrence:http://php.net/manual/en/function.doubleval.php");create(getIdByTitle(this.context,"Functions"),"PHP | zip_close( ) Function","The zip_close() function is an inbuilt function in PHP which is used to close a zip archive file opened by the zip_open() function. The zip_close() causes the stream to be closed and the connection to the corresponding Zip Archive to be broken. The zip resource which has been opened by the zip_open() function is sent as a parameter to the zip_close() function and it returns no value.Syntax:void zip_close ( $zip_file )Parameters: The zip_close() function accepts single parameter $zip_file. It is a mandatory parameter which specifies the zip file resource to be closed.Return Value: It does not return any value.Errors And Exceptions:The zip Archive to be closed must be opened first by using the PHP zip_open() function otherwise the PHP zip_close() function produces a PHP warning.The zip_close() function returns an ER_OPEN error if the zip archive is invalid.The zip_close() function returns an ER_NOZIP error if the zip archive is empty.Below programs illustrate the zip_close() function in PHP:Program 1:<?php// Opening zip archive\'s file$zip_file = zip_open(\"article.zip\");if(is_resource($zip_file)){    echo(\"Zip Archive File is Successfully Opened.\");    // Closing zip archive\'s handle    zip_close($zip_file);}else{    echo($zip_file . \" Archive File Cannot Be Opened\");}?>Output:  Zip Archive File is Successfully Opened.Program 2:<?php// Opening zip archive\'s file$zip_file = zip_open(\"article.zip\");if(is_resource($zip_file)){    while($zipfiles = zip_read($zip_file))    {        $file_name = zip_entry_name($zipfiles);        echo(\"File Name: \" . $file_name . \"<br>\");    }    // Closing zip archive\'s    zip_close($zip_file);}else{    echo($zip_file . \" Archive File Cannot Be Opened\");}?>Output:  File Name: article/content.xlsx  File Name: article/gfg.pdf  File Name: article/image.jpegReference :http://php.net/manual/en/function.zip-close.php");create(getIdByTitle(this.context,"Functions"),"PHP | zip_entry_compressedsize() Function","The zip_entry_compressedsize() function is an inbuilt function in PHP which is used to return the size of the compressed file in zip archive entry. It can be used to retrieve the compressed size of a directory entry. The zip entry resource which has to be read is sent as a parameter to the zip_entry_compressedsize() function and it returns the compressed size on Success.Syntax:int zip_entry_compressedsize ( $zip_entry )Parameters: The zip_entry_compressedsize() function accepts single parameter $zip_entry. It is a mandatory parameter which specifies the zip entry resource.Return Value: It returns the compressed size on Success.Errors And Exceptions:The zip_entry_compressedsize() returns the compressed size of a file or a directory only on Success otherwise it returns a PHP warning.The zip_entry_compressedsize() function returns an ER_OPEN error if the zip archive is invalid.The zip_entry_compressedsize() function returns an ER_NOZIP error if the zip archive is empty.Below programs illustrate the zip_entry_compressedsize() function in PHP:Program 1:Suppose a zip file article.zip contains the following file:content.xlsx<?php// Opening a zip archive$zip_handle = zip_open(\"C:/xampp/htdocs/article.zip\");$zip_entry = zip_read($zip_handle);// Reading a zip entry archive$file = zip_entry_name($zip_entry);// Chceking the compressed file size// of a zip archive entry$file_size = zip_entry_compressedsize($zip_entry);echo(\"File Name: \" . $file . \" (\" . $file_size . \" Bytes) \");zip_close($zip_handle);?>Output:  File Name: article/content.xlsx (6341 Bytes)Program 2:Suppose a zip file article.zip contains the following file:content.xlsxgfg.pdfimage.jpeg<?php// Opening a zip archive$zip_handle = zip_open(\"C:/xampp/htdocs/article.zip\");if(is_resource($zip_handle)){    while($zip_entry = zip_read($zip_handle))    {        $file = zip_entry_name($zip_entry);        // Checking the compressed file size of        // a zip archive entry        $file_size = zip_entry_compressedsize($zip_entry);        echo \"File Name: \" . $file . \" (\" . $file_size              . \" Bytes) \" . \"<br>\";     }   zip_close($zip_handle);}else   echo(\"Zip archive cannot be opened.\");?>Output:  File Name: article/content.xlsx (6341 Bytes)   File Name: article/gfg.pdf (603195 Bytes)   File Name: article/image.jpeg (155736 Bytes)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | zip_entry_close() Function","The zip_entry_close() function is an inbuilt function in PHP which is used to close a zip archive opened by the zip_entry_open() function. The zip_entry_close() causes the stream to be closed and the connection to the corresponding Zip Archive Entry which may be a file or a directory within the Zip Archive to be broken. The zip entry resource which has to be closed is sent as a parameter to the zip_entry_close() function.Syntax: bool zip_entry_close ( $zip_entry )Parameters: The zip_entry_close() function accepts single parameter $zip_entry. It is a mandatory parameter which specifies the zip entry resource.Return Value: It returns true on success or False on Failure.Errors And Exceptions:The zip entry archive to be closed must be opened first by using the PHP zip_entry_open() function otherwise the PHP zip_entry_close() function produces a PHP warning.The zip_entry_close() function returns an ER_OPEN error if the zip archive is invalid.The zip_entry_close() function returns an ER_NOZIP error if the zip archive is empty.Suppose a zip file article.zip contains the following file:content.xlsxBelow programs illustrate the zip_entry_close() function in PHP:Program 1:<?php// Opening a zip archive$zip_handle = zip_open(\"C:/xampp/htdocs/article.zip\");$zip_entry = zip_read($zip_handle);// Opening a zip entry archivezip_entry_open($zip_handle, $zip_entry, \"rb\");$file = zip_entry_name($zip_entry);// Closing a zip entry archive$flag = zip_entry_close($zip_entry);if ($flag == true)    echo(\"Zip Entry Archive: \" . $file . \" has been closed successfully. \");else    echo(\"Zip Entry Archive: \" . $file . \" cannot be closed.\");zip_close($zip_handle);?>Output:  Zip Entry Archive: article/content.xlsx has been closed successfully.Suppose a zip file article.zip contains the following files:content.xlsxgfg.pdfimage.jpegProgram 2:<?php// Opening a zip archive$zip_handle = zip_open(\"C:/xampp/htdocs/article.zip\");if(is_resource($zip_handle)){    while($zip_entry = zip_read($zip_handle))    {        // Opening a zip archive entry        $file = zip_entry_open($zip_handle, $zip_entry, \"rb\");        $file_name = zip_entry_name($zip_entry);        if ($file == true)        {            echo(\"Zip Entry Archive: \" . $file_name .                  \" has been opened successfully.\" . \"<br>\");            // Closing a zip archive entry            $flag = zip_entry_close($zip_entry);            if ($flag == true)                echo(\"Zip Entry Archive: \" . $file_name .                  \" has been closed successfully.\" . \"<br>\");            else                echo(\"Zip Entry Archive: \" . $file_name .                              \" cannot be closed.\" . \"<br>\");        }        else            echo(\"Zip Entry Cannot be opened.\");    }    // Closing a zip archive    zip_close($zip_handle);}else    echo(\"Failed to Open\" . $zip_handle );?>Output:  Zip Entry Archive: article/content.xlsx has been opened successfully.  Zip Entry Archive: article/content.xlsx has been closed successfully.  Zip Entry Archive: article/gfg.pdf has been opened successfully.  Zip Entry Archive: article/gfg.pdf has been closed successfully.  Zip Entry Archive: article/image.jpeg has been opened successfully.  Zip Entry Archive: article/image.jpeg has been closed successfully.");create(getIdByTitle(this.context,"Functions"),"PHP | zip_entry_compressionmethod() Function","The zip_entry_compressionmethod() function is an inbuilt function in PHP which is used to return the compression method of a file or a directory from a zip archive entry. The zip entry resource which has to be read is sent as a parameter to the zip_entry_compressionmethod() function and it returns the compression method on Success.Compression methods are of seven types which are as follows :uncompressedShrunkDeflateReduced (1 to 4)TokenizingImplodedBZIP2The default compression method of the zip archive file is deflated.Syntax:string zip_entry_compressionmethod( $zip_entry )Parameters: This function accepts single parameter $zip_entry. It is a mandatory parameter which specifies the zip entry resource.Return Value: It returns the compression method of a file or directory of the specified zip archive entry on success otherwise a PHP Warning.Errors And ExceptionsThe zip_entry_compressionmethod() returns the compressed method of a file or a directory only on Success otherwise it returns a PHP warning.The zip_entry_compressionmethod() function returns an ER_OPEN error if the zip archive is invalid.The zip_entry_compressionmethod() function returns an ER_NOZIP error if the zip archive is empty.Below programs illustrate the zip_entry_compressionmethod() function in PHP:Program 1:Suppose a zip file article.zip contains the following file:content.xlsx<?php// Opening a zip archive$zip_handle = zip_open(\"C:/xampp/htdocs/article.zip\");// Reading a zip archive$zip_entry = zip_read($zip_handle);$file = zip_entry_name($zip_entry);// Checking the  compression method$comp_type = zip_entry_compressionmethod($zip_entry);echo(\"File Name: \" . $file . \"=>\" . $comp_type);// Closing the zip archivezip_close($zip_handle);?>Output:  File Name: article/content.xlsx => deflatedProgram 2:Suppose a zip file article.zip contains the following file:art.zipcontent.xlsxgfg.pdfimage.jpeg<?php// Opening a zip archive$zip_handle = zip_open(\"C:/xampp/htdocs/article.zip\");if(is_resource($zip_handle)){    // Reading a zip archive    while($zip_entry = zip_read($zip_handle))    {        $file = zip_entry_name($zip_entry);        // Checking the compression method        $comp_type = zip_entry_compressionmethod($zip_entry);        echo(\"File Name: \" . $file . \"  =>  \" . $comp_type . \"<br>\");   }    // Closing the zip archive    zip_close($zip_handle);}else    echo(\"Zip archive cannot be opened.\");?>Output:  File Name: article/art.zip => stored  File Name: article/content.xlsx => deflated  File Name: article/gfg.pdf => deflated  File Name: article/image.jpeg => deflatedRelated Articles:Reference : http://php.net/manual/en/function.zip-entry-compressionmethod.php");create(getIdByTitle(this.context,"Functions"),"PHP | zip_read() Function","The zip_read() function is an inbuilt function in PHP which is used to read an entity present in the opened zip archive. The zip resource is to be read and sent as parameters to the zip_read() function and it returns a resource containing file within the zip archive on success, or FALSE if there is no more entry to read.Syntax:zip_read( $zip )Parameters: This function accepts single parameter $zip which is mandatory. It is used to specify the zip entry resource.Return Value: It returns a resource containing file within the zip archive on success, or FALSE if there is no entry to read.Errors And Exceptions:The zip_read() function returns an ER_OPEN error if the zip archive is invalid.The zip_read() function returns an ER_NOZIP error if the zip archive is empty.Below programs illustrate the zip_read() function in PHP:Program 1:Suppose a zip file article.zip contains the following files:article.zipcontent.xlsxgfg.pdfimage.jpeg<?php// Opening a zip archive$zip_handle = zip_open(\"article.zip\");// Reading a zip filewhile($zip_entry = zip_read($zip_handle)){    $file = zip_entry_name($zip_entry);    echo(\"File Name: \" . $file . \"<br>\");}// Close the opend zip filezip_close($zip_handle);?>Output:  File Name: article/article.zip  File Name: article/content.xlsx  File Name: article/gfg.pdf  File Name: article/image.jpegProgram 2:Suppose a zip file article.zip contains the following files and directory:Directory: imggeeksforgeeks.pnggeeksforgeeks1.pngcontent.xlsxgfg.pdfimage.jpeg<?php// Opening a zip file$zip_handle = zip_open(\"article.zip\");if(is_resource($zip_handle)){    // Reading a zip entry file    while($zip_entry = zip_read($zip_handle))    {        $file = zip_entry_name($zip_entry);        echo(\"File Name: \" . $file . \"<br>\");    }    // Close the opened xop file    zip_close($zip_handle);}else    echo(\"Zip Archive cannot be opened.\");?>Output:  File Name: article/content.xlsx  File Name: article/gfg.pdf  File Name: article/image.jpeg  File Name: article/img/  File Name: article/img/geeksforgeeks.png  File Name: article/img/geeksforgeeks1.pngRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | zip_open() Function","The zip_open() function is an inbuilt function in PHP which is used to open a zip archive for reading. The zip_open() function creates a new stream and establishes a connection between the stream and a Zip Archive. The filename is sent as a parameter to the zip_open() function and it returns a valid resource handler if the zip archive file is opened successfully otherwise it returns an Error.Syntax:zip_open( $filename )Parameters: This function accepts single parameter $filename which is mandatory. It is used to specify the zip resource to be opened.Return Value: It returns a valid resource handler if the zip archive file is opened successfully otherwise it returns an Error.Errors And Exceptions:The zip_open() function returns an ER_OPEN error if the zip archive is invalid.The zip_open() function returns an ER_NOZIP error if the zip archive is empty.Below programs illustrate the zip_open() function in PHP:Suppose a zip file article.zip contains the following files:article.zipcontent.xlsxgfg.pdfimage.jpegProgram 1:<?php// Opening zip file$my_zip = zip_open(\"article.zip\");if(is_resource($my_zip)){    echo(\"Zip file opened successfully.\");    // Closing zip file    zip_close($my_zip);}else    echo($my_zip . \"file can not be opened\");?>Output:  Zip file opened successfully.Program 2:<?php// Opening zip file$my_zip= zip_open(\"article.zip\");if(is_resource($my_zip)){    while($zipfiles = zip_read($my_zip))    {        $file_name = zip_entry_name($zipfiles);        echo(\"File Name: \" . $file_name . \"<br>\");    }    // Closing zip file    zip_close($my_zip);}else    echo($my_zip . \"file Can not be opened\");?>Output:  File Name: article/article.zip  File Name: article/content.xlsx  File Name: article/gfg.pdf  File Name: article/image.jpegRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | zip_entry_open() Function","The zip_entry_open() function is an inbuilt function in PHP which is used to open a zip entry archive for reading. Opening a file or a directory in a zip archive with the zip_entry_open function creates a new stream and establishes a connection between the stream and a file or a directory in a Zip Archive. The zip resource and the zip entry resource to be opened and sent as parameters to the zip_entry_open() function and it returns True on success and False on failure.Syntax:bool zip_entry_open( $zip, $zip_entry, $mode )Parameters: This function accepts three parameters as mentioned above and described below:$zip: It is a mandatory parameter which specifies the zip resource to be read.$zip_entry: It is a mandatory parameter which specifies the zip entry resource.$mode: It is an optional parameter which the access type of the required for the zip archive.Return Value: It returns True on success or False on failure.Errors And Exceptions:The zip_entry_open() function returns an ER_OPEN error if the zip archive is invalid.The zip_entry_open() function returns an ER_NOZIP error if the zip archive is empty.Below programs illustrate the zip_entry_open() function in PHP:Program 1:Suppose a zip file articles.zip contains the following file:geeks.txt<?php// Opening a zip file$zip_handle = zip_open(\"C:/xampp/htdocs/articles.zip\");$zip_entry = zip_read($zip_handle);// Opening a zip entry archivezip_entry_open($zip_handle, $zip_entry, \"rb\");$file = zip_entry_name($zip_entry);if($file == true)    echo(\"Zip file: \" . $file . \" open successfully <br>\");// Closing a zip entry archive$flag = zip_entry_close($zip_entry);if ($flag == true)    echo(\"Zip file: \" . $file . \" closed successfully\");else    echo(\"Zip file: \" . $file . \" cannot be closed\");// Closeing zip filezip_close($zip_handle);?>Output:  Zip file: articles/geeks open successfully   Zip file: articles/geeks closed successfullyProgram 2:Suppose a zip file articles.zip contains the following files:geeks.txtgeeks1.txt<?php// Opening a zip file$zip_handle = zip_open(\"C:/xampp/htdocs/articles.zip\");if(is_resource($zip_handle)){    while($zip_entry = zip_read($zip_handle))    {        // Opening a zip archive entry        $file = zip_entry_open($zip_handle, $zip_entry, \"rb\");        $file_name = zip_entry_name($zip_entry);        if ($file == true)        {            echo(\"Zip file: \" . $file_name . \" open successfully\");            echo \"<br>\" ;            // Closing a zip archive entry            $flag = zip_entry_close($zip_entry);            if ($flag == true)                  echo(\"Zip file: \" . $file_name .                      \" closed successfully <br><br>\");            else                echo(\"Zip file: \" . $file_name .                         \" cannot be closed <br><br>\");        }        else            echo(\"Zip Entry Cannot be opened.<br>\");    }    // Closing a zip archive    zip_close($zip_handle);}else    echo(\"Failed to Open\" . $zip_handle );?>Output:  Zip file: articles/geeks open successfully  Zip file: articles/geeks closed successfully     Zip file: articles/geeks1 open successfully  Zip file: articles/geeks1 closed successfullyRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | zip_entry_read() Function","The zip_entry_read() function is an inbuilt function in PHP which is used to read the contents from an opened zip archive entry. The zip entry is being read and the number of bytes to be returned can be sent as a parameter to the zip_entry_read() function and it returns the content of the specified zip entry on Success otherwise it returns a PHP warning.Syntax:string zip_entry_read( $zip_entry, $length )Parameters: This function accept two parameters as mentioned above and described below.$zip_entry: It is a mandatory parameter which specifies the zip entry resource.$length: It is an optional parameter which specifies the number of bytes to be returned.Return Value: It returns the content of specified zip entry on Success otherwise returns a PHP warning.Errors And Exceptions:The zip_entry_read() function returns an ER_OPEN error if the zip archive is invalid.The zip_entry_read() function returns an ER_NOZIP error if the zip archive is empty.Below programs illustrate the zip_entry_read() function in PHP:Program 1:Suppose a zip file article.zip contains the following file:geeks.txt<?php// Opening a zip file$zip_handle = zip_open(\"C:/xampp/htdocs/articles.zip\");// Reading a zip archive entrywhile($zip_entry = zip_read($zip_handle)){    $resource = zip_entry_open($zip_handle, $zip_entry, \"rb\");    $file_name = zip_entry_name($zip_entry);    if ($resource == true)    {        // Reading contents of a zip archive entry        $file_content = zip_entry_read($zip_entry);        echo(\"File: \" . $file_name . \" successfully opened. <br>\");        echo(\"File content: \" . $file_content);        // Closing a zip archive entry        zip_entry_close($zip_entry);    }    else        echo(\"Failed to Open.\");}// Closin zip file.zip_close($zip_handle);?>Output:  File: articles/geeks successfully opened.   File content: Welcome to GeeksforGeeks. It is a computer science portal  where you can learn programming.Program 2:Suppose a zip file article.zip contains the following file:geeks.txtgeeks1.txt<?php// Opening a zip file$zip_handle = zip_open(\"C:/xampp/htdocs/articles.zip\");// Reading a zip archive entrywhile($zip_entry = zip_read($zip_handle)){    $resource = zip_entry_open($zip_handle, $zip_entry, \"rb\");    $file_name = zip_entry_name($zip_entry);    if ($resource == true)    {        // Reading contents of a zip archive entry upto 150 bytes        $file_content = zip_entry_read($zip_entry, 150);        echo(\"File Name: \" . $file_name . \" is opened Successfully. <br>\");        echo($file_content);        echo(\"<br><br>\");        // Closing a zip archive entry        zip_entry_close($zip_entry);    }    else        echo(\"Failed to Open.\");}// Closing a zip archivezip_close($zip_handle);?>Output:  File Name: articles/geeks is opened Successfully.   Welcome to GeeksforGeeks. It is a computer science portal where you  can learn programming.    File Name: articles/geeks1 is opened Successfully.   A Computer Science portal for geeks. It contains well written, well  thought and well-explained computer science and programming articles,  quizzes and many more.Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | rawurlencode() function","The rawurlencode() function is an inbuilt function in PHP which is used to encode the URL(Uniform Resource Locator) according to RFC(Uniform Resource Identifier) 3986.Syntax:string rawurlencode( $str )Parameters: This function accepts single parameters $str which is mandatory. It is used to store the URL which is to be encoded.Return Value: This function returns a string which contains all non-alphanumeric characters except -_.~ symbols. The symbols or space character replaced with a percent (%) sign followed by two hex digits.Below programs illustrate the rawurlencode() function in PHP.Program 1:<?phpecho \'<a href=\"www.geeksforgeeks.org\',  rawurlencode(\'A computer science portal for geek\'), \'\">\';?>Output:  <a href=\"www.geeksforgeeks.orgA%20computer%20science%20portal%20for%20geek\">Program 2:<?php// Store the URL string$str = \'A computer science portal for geek\';// Encode the URL string and print it.echo \'<a href=\"www.geeksforgeeks.org\', rawurlencode($str), \'\">\';?>Output:  <a href=\"www.geeksforgeeks.orgA%20computer%20science%20portal%20for%20geek\">Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | rawurldecode() function","The rawurldecode() function is an inbuilt function in PHP which is used to decode the encoded string. This function returns the decoded URL (original URL string) as a string. This function replaces the % sign followed by two hex value with literal characters.Syntax:string rawurldecode( $str )Parameters: This function accepts single parameters $str which is mandatory. It is used to store the encoded URL.Return Value: This function returns the decode URL string.Below programs illustrate the rawurldecode() function in PHP.Program 1:<?php    echo rawurldecode(\"A%20computer%20science%20portal%20for%20geek\");?>Output:  A computer science portal for geekProgram 2:<?PHP$str = \'GeeksforGeeks A computer science portal for geek\';// Encode the given string$encode_str = rawurlencode($str);echo \"Encoded string: \" . $encode_str . \"<br>\";// Decode the encoded string$decode_str = rawurldecode($encode_str);echo \"Decodec string: \" . $decode_str;?>Output:  Encoded string: GeeksforGeeks%20A%20computer%20science%20portal%20for%20geekDecodec string: GeeksforGeeks A computer science portal for geekRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | preg_split() Function","The preg_split() function is an inbuilt function in PHP which is used to convert the given string into an array. The function splits the string into smaller strings or sub-strings of length which is specified by the user. If the limit is specified then small string or sub-strings up to limit return through an array. The preg_split() function is similar to explode() function but the difference is used to the regular expression to specify the delimiter but explode is not used it.Syntax:array preg_split( $pattern, $subject, $limit, $flag )Parameter: This function accepts four parameters as mentioned above and described below:$pattern: The value is string type which the pattern to search as a string otherwise its separates the elements.$subject: The $subject is variable which is used to store input string.$limit: The $limit is indicates the limit. If the limit is specified ,then small or sub-string to be returned up to limit.If limit is 0 or -1 ,it indicates “no limit” then used by flag ($strflag).$flags: The $flags is used for signalize and its variable type used for indicates two state True or False to control the program. Its combinations of different flags such as below:PREG_SPLIT_NO_EMPTY: If flag variable is set to PREG_SPLIT_NO_EMPTY, then only non-empty pieces will be returned by preg_split() function.PREG_SPLIT_DELIM_CAPTURE: If flag variable is set to PREG_SPLIT_DELIM_CAPTURE, the parenthesized expression in the delimiter pattern will be captured and returned as well.PREG_SPLIT_OFFSET_CAPTURE: If flag variable is set to PREG_SPLIT_OFFSET_CAPTURE, for each occurring match the appendant string offset will be returned and changes the return value in an array where matched string offset will be 0 and input string offset will be 1.Return Value: This function returns an array after the split boundaries matched. When the limit of original array or string exceeds then returns with an array element otherwise its False.Below programs illustrate the preg_split() function in PHP:Program 1:<?php// Input string$inputstrVal  = \'Geeksarticle\';// Implementaion of preg_split() function$result = preg_split(\'//\', $inputstrVal , -1, PREG_SPLIT_NO_EMPTY);// Display resultprint_r($result);?>Output:  Array  (      [0] => G      [1] => e      [2] => e      [3] => k      [4] => s      [5] => a      [6] => r      [7] => t      [8] => i      [9] => c      [10] => l      [11] => e  )Program 2:<?php// PHP program of preg_split() function// split the phrase by any number of commas// space characters include \\r, \\t, \\n and \\f$result = preg_split(\"/[\\s,]+/\", \"Geeks for Geeks\");// Display resultprint_r($result);?>Output:  Array  (      [0] => Geeks      [1] => for      [2] => Geeks  )Program 3:<?php// PHP program to implementation of// preg_split() function// Input original string$inputstrVal = \"http://php.net/archive/2018.php\";$patternstrVal= \"/[http:\\/\\/|\\.]/\";// Implemet preg_split() function$result = preg_split($patternstrVal, $inputstrVal, 0,   PREG_SPLIT_NO_EMPTY | PREG_SPLIT_OFFSET_CAPTURE);// Display resultprint_r($result );?>Output:  Array  (      [0] => Array          (              [0] => ne              [1] => 11          )        [1] => Array          (              [0] => arc              [1] => 15          )        [2] => Array          (              [0] => ive              [1] => 19          )        [3] => Array          (              [0] => 2018              [1] => 23          )    )");create(getIdByTitle(this.context,"Functions"),"PHP | collator_asort() Function","The collator_asort() function is an inbuilt function in PHP which is used to sort array maintaining the index association. This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. Thee array elements are sorted according to current locale rules.Syntax:Procedural style:bool collator_asort( $coll, &$arr, $sort_flag )Object oriented style:public bool Collator::asort( &$arr, $sort_flag )Parameters: This function accepts three parameters as mentioned above and described below:$coll: This parameter is used as collator object.$arr: This parameter contains the array of strings which need to sort.$sort_flag: It is optional parameter which is used to define the sorting method, one of the following:Collator::SORT_REGULAR: It compare items normally. It is the default sorting.Collator::SORT_NUMERIC: It compare items numerically.Collator::SORT_STRING: It compare items as strings.Return Value: This function returns True on success or False on failure.Below programs illustrate the collator_asort() function in PHP:Program 1:<?php$coll = collator_create( \'en_US\' );$arr = array(     \'A\' => \'30\',     \'B\' => \'48\',     \'C\' => \'9\',     \'D\' => \'60\');// Sort array according to its numeral valuecollator_asort( $coll, $arr, Collator::SORT_NUMERIC );var_export( $arr );?>Output:  array (    \'C\' => \'9\',    \'A\' => \'30\',    \'B\' => \'48\',    \'D\' => \'60\',  )Program 2:<?php$coll = collator_create( \'en_US\' );$arr = array(     \'A\' => \'30\',     \'B\' => \'48\',     \'C\' => \'9\',     \'D\' => \'60\');// Sort array according to its string valuecollator_asort( $coll, $arr, Collator::SORT_STRING );var_export( $arr );?>Output:  array (    \'A\' => \'30\',    \'B\' => \'48\',    \'D\' => \'60\',    \'C\' => \'9\',  )Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | collator_compare() Function","The collator_compare() function is an inbuilt function in PHP which is used to compare two Unicode strings according to collation rules.Syntax:Procedural style:int collator_compare( $coll, $str1, $str2 )Object oriented style:int Collator::compare( $str1, $str2 )Parameters: This function accepts three parameter as mentioned above and described below:$coll: This parameter is used as collator object. It provides the comparison capability with support for appropriate locale-sensitive sort orderings.$str1: The first string to compare.$str2: The second string to compare.Return Value: This function returns the comparison result which are given below:1: If str1 is greater than str2.0: If str1 is equal to str2.-1: If str1 is less than str2.Error: It return False.Below programs illustrate the collator_compare() function in PHP:Program 1:<?php// Declare variable and initialize it$str1 = \'Geeks\';$str2 = \'geeks\';$coll = collator_create( \'en_US\' );// Compare both strings$res = collator_compare( $coll, $str1, $str2 );if ($res === false)    echo collator_get_error_message( $coll );else if( $res > 0 )    echo $str1 . \" is greater than \" . $str2 . \"\\n\";else if( $res < 0 )    echo $str1 . \" is less than \" . $str2 . \"\\n\";else    echo $str1 . \" is equal to \" . $str2;?>Output:  Geeks is greater than geeksProgram 2:<?php// Declare the variable and initialize it$str1 = \'GeeksforGeeks\';$str2 = \'GeeksforGeeks\';$coll = collator_create( \'en_US\' );// Compare both strings$res  = collator_compare( $coll, $str1, $str2 );if ($res === false)    echo collator_get_error_message( $coll );else if( $res > 0 )    echo $str1 . \" is greater than \" . $str2 . \"\\n\";else if( $res < 0 )    echo $str1 . \" is less than \" . $str2 . \"\\n\";else    echo $str1 . \" is equal to \" . $str2;?>Output:  GeeksforGeeks is equal to GeeksforGeeks");create(getIdByTitle(this.context,"Functions"),"PHP | gd_info() Function","The gd_info() function is an inbuilt function in PHP which is used to retrieve the information about the currently installed GD library. This function returns the information about the version and capabilities of the installed GD library.Syntax:array gd_info( void )Parameters: This function does not accept any parameter.Return Value: This function returns an associative array contains information about installed GD library.The information returned by this function are listed below:GD Version: It is an string value describing the installed libgd version.FreeType Support: It is a boolean value. It is True if FreeType Support is installed.FreeType Linkage: It is a string describing the way in which FreeType was linked. Expected values are: with freetype, with TTF library, and with unknown library. This element will only be defined if FreeType Support evaluated to TRUE.T1Lib Support: It is a boolean value. It is True if T1Lib support is included.GIF Read Support: It is boolean value. It return True if support for reading GIF images is included.GIF Create Support: It is a boolean value. It return True if support for creating GIF images is included.JPEG Support: It is a boolean value. It return True if JPEG support is included.PNG Support: It is a boolean value. It return True if PNG support is included.WBMP Support: It is a boolean value. It return True if WBMP support is included.XBM Support: It is a boolean value. It return True if XBM support is included.WebP Support: It is a boolean value. It return True if WebP support is included.Below program illustrate the gd_info() function in PHP:Program:<?phpvar_dump(gd_info());?>Output:  array(12) {       [\"GD Version\"]=> string(26) \"bundled (2.1.0 compatible)\"       [\"FreeType Support\"]=> bool(true)       [\"FreeType Linkage\"]=> string(13) \"with freetype\"       [\"GIF Read Support\"]=> bool(true)       [\"GIF Create Support\"]=> bool(true)       [\"JPEG Support\"]=> bool(true)       [\"PNG Support\"]=> bool(true)       [\"WBMP Support\"]=> bool(true)       [\"XPM Support\"]=> bool(true)       [\"XBM Support\"]=> bool(true)       [\"WebP Support\"]=> bool(true)       [\"JIS-mapped Japanese Font Support\"]=> bool(false)   }Related Articles:");create(getIdByTitle(this.context,"Functions"),"Difference between bindParam and bindValue in PHP","PDOStatement::bindParam() FunctionThe PDOStatement::bindParam() function is an inbuilt function in PHP which is used to bind a parameter to the specified variable name. This function bound the variables, pass their value as input and receive the output value, if any, of their associated parameter marker.Syntax:bool PDOStatement::bindParam  ( $parameter, $variable, $data_type, $length, $driver_options )Parameters: This function accepts five parameters as mentioned above and described below:$parameter: It is a parameter identifier which is used to prepare statement using name placeholders. It is the parameter name of the form :name.$variable: This parameter is used to hold the name of variable to bind to the SQL statement parameter.$data_type: It is an explicit data type for the parameter using the PDO::PARAM_* constants.$length: This parameter is used to hold the length of the data type.$driver_options: This parameter hold the operation which needs to perform.Return Value: This function returns True on success or false on failure.Program:<?php// setup PDO connection$db = new PDO(\'mysql:host=localhost;dbname=geeks\',\'root\',\'\');// Get username$username = \'geesforgeeks\';$stmt = $db->prepare(\"SELECT * FROM users WHERE user = :username\");// Use bindParam function$stmt->bindParam(\':username\', $username); $username = \'g4g\'; $stmt->execute();?>Note: The SQL statement will be executed using ‘g4g’ as the username because :username searches for $username upon execution, and the last known value of $username is ‘g4g’.PDOStatement::bindValue() FunctionThe PDOStatement::bindValue() function is an inbuilt function in PHP which is used to bind a value to a parameter. This function binds a value to corresponding named or question mark placeholder in the SQL which is used to prepare the statement.Syntax:bool PDOStatement::bindValue( $parameter, $value, $data_type )Parameters: This function accepts three parameters as mentioned above and described below:$parameter: It is a parameter identifier which is used to prepare statement using name placeholders. It is the parameter name of the form :name.$value: This parameter is used to hold the value to bind the parameter.$data_type: It is an explicit data type for the parameter using the PDO::PARAM_* constants.Return Value: This function returns True on success or False on failure.Program:<?php// setup PDO connection$db = new PDO(\'mysql:host=localhost;dbname=geeks\',\'root\',\'\');// Get username$username = \'geeksforgeeks\';$stmt = $db->prepare(\"SELECT * FROM users WHERE user = :username\");// Use bindValue function$stmt->bindValue(\':username\', $username);$username = \'g4g\';$stmt->execute();?>Note: The SQL statement will be executed using ‘g4g’ as the username because the literal value “geeksforgeeks” has been bound to :username prior to the bindValue() function. Further changes to $username will not be reflected in the prepared statement.Difference between bindParam() and bindValue():bindParam():The bindParam() function binds a parameter to named or question mark placeholder in SQL statement.The bindParam () function is used to pass variable not value.bindValue():The bindValue() function binds a value to named or question mark in SQL statement.The bindValue() function is used to pass both value and variable.");create(getIdByTitle(this.context,"Functions"),"PHP | SplFileInfo getFileInfo() Function","The SplFileInfo::getFileInfo() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the file information of the file.Syntax:SplFileInfo::getFileInfo( $class )Parameters: This function accepts single parameter $class which is optional. It is used to specify the name of splfile derived class.Return Value: This function returns the SplFileInfo object.Below programs illustrate the SplFileInfo::getFileInfo() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::getFileInfo() function// Create new SPlFileInfo Object$file = new SplFileInfo(\"gfg.txt\");// Print resultvar_dump( $file->getFileInfo());?>Output:  object(SplFileInfo)#2 (2) {    [\"pathName\":\"SplFileInfo\":private]=>    string(7) \"gfg.txt\"    [\"fileName\":\"SplFileInfo\":private]=>    string(7) \"gfg.txt\"  }Program 2:<?php// PHP program to use array to check// multiple files$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg.txt\",    \"/var/www/html/gfg.php\",    \"demo.c\");foreach ($GFG as $file_name) {    // Create new SPlFileInfo Object    $file = new SplFileInfo($file_name);    // Print result    var_dump($file->getFileInfo());    echo \"</br>\";}?>Output:  object(SplFileInfo)#2 (2) {    [\"pathName\":\"SplFileInfo\":private]=>    string(44) \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\"    [\"fileName\":\"SplFileInfo\":private]=>    string(9) \"dummy.php\"  }object(SplFileInfo)#1 (2) {    [\"pathName\":\"SplFileInfo\":private]=>    string(28) \"/home/rajvir/Desktop/gfg.txt\"    [\"fileName\":\"SplFileInfo\":private]=>    string(7) \"gfg.txt\"  }object(SplFileInfo)#2 (2) {    [\"pathName\":\"SplFileInfo\":private]=>    string(21) \"/var/www/html/gfg.php\"    [\"fileName\":\"SplFileInfo\":private]=>    string(7) \"gfg.php\"  }object(SplFileInfo)#1 (2) {    [\"pathName\":\"SplFileInfo\":private]=>    string(6) \"demo.c\"    [\"fileName\":\"SplFileInfo\":private]=>    string(6) \"demo.c\"  }");create(getIdByTitle(this.context,"Functions"),"PHP | stream_get_wrappers() Function","The stream_get_wrappers() function is an inbuilt function in PHP which is used to get the list of registered streams available on the running system.Syntax:array stream_get_wrappers( void )Parameters: This function does not accept any parameter.Return Value: The function returns an array containing the name of all available streams.Below programs illustrate the stream_get_wrappers() function in PHP:Program 1:<?php// PHP program to illustrate// stream_get_wrappers functionprint_r(stream_get_wrappers());?>Output:  Array  (      [0] => https      [1] => ftps      [2] => compress.zlib      [3] => php      [4] => file      [5] => glob      [6] => data      [7] => http      [8] => ftp      [9] => phar  )Program 2: Program to check the given streams are available or not.<?php// PHP program to illustrate// stream_get_wrappers function$wrapper = array (    \'https\',    \'http\',    \'file\',    \'data\',    \'GFG\');// Checking stream wrapper enabled or notforeach ($wrapper as &$gfg) {    if (in_array($gfg, stream_get_wrappers())) {        echo $gfg . \': Enabled\' . \"\\n\";    } else {        echo $gfg . \": Not Enabled\" . \"\\n\";    }}?>Output:  https: Enabled  http: Enabled  file: Enabled  data: Enabled  GFG: Not Enabled");create(getIdByTitle(this.context,"Functions"),"PHP | stream_get_meta_data() Function","The stream_get_meta_data() function is an inbuilt function in PHP which is used to get the header or meta data from the streams/file pointers.Syntax:array stream_get_meta_data( $stream )Parameters: The function accepts single parameter $stream, which specifies the meta data to be retrieve and which is created by any function fopen(), fsockopen() and pfsockopen().Return Value: This function returns an array which contains the following items:timed_out: It is a boolean type items and TRUE if the stream timed out.blocked: It is a boolean type items and it is True if the stream is in blocking IO mode.eof(bool) It is optional. It is True if the stream reached at end-of-file.unread_bytes: Number of bytes in internal buffer.stream_type: It is used to specify the implementation of the stream.wrapper_type: It is used to specify the protocol wrapper implementation layer.wrapper_data: It is a specific data attached to this stream.mode: It is the type of access required for this stream.seekable: It is true when the current stream seeked.uri: User Provided Unform resource identifier.Below programs illustrate the stream_get_meta_data() function in PHP:Program 1:<?php// PHP program to illustrate// stream_get_meta_data fuction$url = \'http://php.net/manual/en/function.stream-get-meta-data.php\';$file = fopen($url, \'r\');$meta_data = stream_get_meta_data($file);print_r($meta_data);fclose($file);?>Output:  Array  (      [timed_out] =>       [blocked] => 1      [eof] =>       [wrapper_data] => Array          (              [0] => HTTP/1.1 200 OK              [1] => Server: nginx/1.10.3              [2] => Date: Mon, 17 Dec 2018 11:04:39 GMT              [3] => Content-Type: text/html; charset=utf-8              [4] => Connection: close              [5] => Content-language: en              [6] => X-Frame-Options: SAMEORIGIN              [7] => Set-Cookie: LAST_LANG=en; expires=Tue, 17-Dec-2019 11:04:39 GMT; Max-Age=31536000; path=/; domain=.php.net              [8] => Set-Cookie: COUNTRY=NA%2C54.201.119.186; expires=Mon, 24-Dec-2018 11:04:39 GMT; Max-Age=604800; path=/; domain=.php.net              [9] => Link: ; rel=shorturl              [10] => Last-Modified: Mon, 17 Dec 2018 05:06:18 GMT              [11] => Vary: Accept-Encoding          )        [wrapper_type] => http      [stream_type] => tcp_socket/ssl      [mode] => r      [unread_bytes] => 7647      [seekable] =>       [uri] => http://php.net/manual/en/function.stream-get-meta-data.php  )Program 2: Program to print the length of array return by the function.<?php// PHP program to illustrate// stream_get_meta_data function// url to be open using fopen$url = \'http://www.php.net/news.rss\';// checking is url openable or notif (!$fp = fopen($url, \'r\')) {    trigger_error(\"Unable to open URL ($url)\", E_USER_ERROR);}$fp = fopen($url, \'r\');$meta_data = stream_get_meta_data($fp);print(sizeof($meta_data));fclose($fp);?>Output:  10");create(getIdByTitle(this.context,"Functions"),"PHP | stream_get_filters() Function","The stream_get_filters() function is an inbuilt function in PHP which is used to get the list of registered stream filters.Syntax:array stream_get_filters( void )Parameters: This function does not accept any parameter.Return Value: This function returns an array containing the name of all available stream filters.Below programs illustrate the stream_get_filters() function in PHP:Program 1:<?php// PHP program to illustrate// stream_get_filter function$streamlist = stream_get_filters();print_r($streamlist);?>Output:  Array  (      [0] => zlib.*      [1] => string.rot13      [2] => string.toupper      [3] => string.tolower      [4] => string.strip_tags      [5] => convert.*      [6] => consumed      [7] => dechunk      [8] => convert.iconv.*  )Program 2: Program to print number of filters return by function.<?php// PHP program to illustrate// stream_get_filter function$res = stream_get_filters();$count = sizeof($res);// Print resultecho \"Total Available Filters = \" . $count;?>Output:  Total Available Filters = 9");create(getIdByTitle(this.context,"Functions"),"PHP | stream_get_transports() Function","The stream_get_transports() function is an inbuilt function in PHP which is used to get the list of registered socket transports. This function returns the indexed array containing the name of all available socket.Syntax:array stream_get_transports( void )Parameters: This function does not accept any parameter.Return Value: This function returns an array containing the name of all available socket transport.Below programs illustrate the stream_get_transports() function in PHP:Program 1:<?php// PHP program to illustrate// stream_get_transports functionprint_r(stream_get_transports());?>Output:  Array  (      [0] => tcp      [1] => udp      [2] => unix      [3] => udg      [4] => ssl      [5] => tls      [6] => tlsv1.0      [7] => tlsv1.1      [8] => tlsv1.2  )Program 2: Program to check transports are available or not.<?php// PHP program to illustrate// stream_get_transports function$wrapper = array (    \'tcp\',    \'unix\',    \'file\',    \'ssl\',    \'GFG\');// Checking socket transport enabled or notforeach ($wrapper as &$gfg) {    if (in_array($gfg, stream_get_transports())) {        echo $gfg . \': Enabled\' . \"\\n\";    } else {        echo $gfg . \": Not Enabled\" . \"\\n\";    }}?>Output:  tcp: Enabled  unix: Enabled  file: Not Enabled  ssl: Enabled  GFG: Not Enabled");create(getIdByTitle(this.context,"Functions"),"PHP | stream_is_local() Function","The stream_is_local() function is an inbuilt function in PHP which is used to check if a stream is a local stream or URL.Syntax:bool stream_is_local( $stream )Parameters: This function accepts single parameter $stream, which is used to specify the stream to be check.Return Value: This function returns True on success or False on failure.Below programs illustrate the stream_is_local() function in PHP:Program 1:<?php// PHP program to illustrate// stream_is_local function$strm = \"https://www.geeksforgeeks.org\";$res = stream_is_local($strm);// Print resultvar_dump($res);?>Output:  bool(false)Program 2: Program to print the length of array return by the function.<?php// PHP program to illustrate// stream_is_local function$stream1 = \'/geeks.jpg\'; // local$stream2 = \'file://geeks.jpg\'; // local$stream3 = \'http://geeksforgeeks.org\'; // non local stream// Checking all strings and print result$local = stream_is_local($stream1);var_dump($local);$shouldbelocal = stream_is_local($stream2);var_dump($shouldbelocal);$remote = stream_is_local($stream3);var_dump($remote);?>Output:  bool(true)  bool(false)  bool(false)");create(getIdByTitle(this.context,"Functions"),"What is the difference between is_a() function and instanceof in PHP?","is_a() FunctionThe is_a() is a built-in function in PHP which is used to check whether a given object is of a given class or not. It also checks if the given class is one of the parents of the given object or not.Syntax:bool is_a( $object, $class_name, $allow_string )Parameters: This function accepts three parameters as mentioned above and described below:object: This parameter is used to hold the tested object.class_name: This parameter is used to hold the class name.allow_string: If this parameter set to False, string class name as object is not allowed.Return Value : This function returns True if the object is of this class or has this class as one of its parents else it will return a False value.Below programs illustrate the is_a() function:<?php// PHP program to illustrate the// is_a() function// sample classclass GeeksforGeeks {    var $store = \'Hello geeks!\';}// create a new object$geek = new GeeksforGeeks();// checks if $geek is an object// of class GeeksforGeeksif (is_a($geek, \'GeeksforGeeks\')) {    echo \"Yes\";}?>Output:  Yesinstanceof operatorThe instanceof operator is used in PHP to find out if an object is an instantiated instance of a class.Syntax:$a instanceof MyClassOperands: This operator contains two operands which are listed below:$a: This is used as an object.MyClass: It is a class name.Return Value: It returns True if the object is of this class or has this class as one of its parents else it will return a False value.Below programs illustrate the instanceof operator in PHP:<?php// PHP program to illustrate instanceof// operator// sample classclass GeeksforGeeks {    var $store = \'Hello geeks!\';}// create a new object$geek = new GeeksforGeeks();// Checks if $geek is an object of// class GeeksforGeeksif ($geek instanceof GeeksforGeeks) {    echo \"Yes\";}?>Output:  YesDifference between is_a() function and instanceof operator:The is_a() is a function, whereas instanceof is a language construct. The is_a() function will be significantly slower since it has all the overhead of executing a function call.In case of callback in functions (like array_map) instanceof is not a function, it is a language construct, so it cannot use as callback. On the other hand callback can be used in is_a() function.The use of direct class name with instanceof is shorter than is_a() function.Example:  // Short syntax (comparatively)  $a instanceof MyClass    is_a( $a, MyClass::class )The is_a() being a function takes an object as parameter one, and a string as parameter two, whereas instanceof takes an object as parameter one, and can take a class name, object instance, or class identifier (class name written without quotes) as parameter two.Example of is_a():  // Only way to call it  is_a( $object, $string );Example of instanceof:  // Object instance        $object instanceof $otherObject;     // String class name  $object instanceof $string;    // Identifier for the class  $object instanceof ClassName;");create(getIdByTitle(this.context,"Functions"),"Anonymous recursive function in PHP","Anonymous recursive function is a type of recursion in which function does not explicitly call another function by name. This can be done either comprehensively, by using a higher order function passing in a function as an argument and calling that function. It can be done implicitly, via reflection features which allow one to access certain functions depending on the current context especially ,the current function.In theory of computer science, anonymous recursion is significant, as anonymous recursion is type of recursion in which one can implement recursion without requiring named functions .Use of Anonymous Recursion:Anonymous recursion is primarily of use in allowing recursion for anonymous functions.Particularly when they form closures or are used as callbacks, to avoid having to bind the name of the function.Alternatives:The of use named recursion and named functions.If an anonymous function is given,anonymous recursion can be done either by binding a name to the function, as in named functions.Program 1:<?php// PHP program to illustrate the// Anonymous recursive function$func = function ($limit = NULL) use (&$func) {    static $current = 10;    // if condition to check value of $current.    if ($current <= 0) {        //break the recursion        return FALSE;    }    // Print value of $current.    echo \"$current\\n\";    $current--;    $func();};//  Function call$func();?>Output:  10  9  8  7  6  5  4  3  2  1Program 2:<?php// PHP program to illustrate the// Anonymous recursive function$factorial = function( $num ) use ( &$factorial ) {    // Base condition of recursion    if( $num == 1 )        return 1;    // return statement when $m is not equals to 1.    return $factorial( $num - 1 ) * $num;};// Function callprint $factorial( 6 );?>Output:  720");create(getIdByTitle(this.context,"Functions"),"htmlentities() vs htmlspecialchars() Function in php","htmlentities() FunctionThe htmlentities() function is an inbuilt function in PHP which is used to transform all characters which are applicable to HTML entities. This function converts all characters that are applicable to HTML entity.Syntaxstring htmlentities( $string, $flags, $encoding, $double_encode )Parameters: This function accepts four parameters as mentioned above and described below:$string: This parameter is used to hold the input string.$flags: This parameter is used to hold the flags. It is combination of one or two flags, which tells how to handle quotes.$encoding: It is an optional argument which specifies the encoding which is used when characters are converted. If encoding is not given then it is converted according to PHP default version.$double_encode: If double_encode is turned off then PHP will not encode existing HTML entities. The default is to convert everything.Return Values: This function returns the string which has been encoded.Example:<?php// String convertable to htmlentities$str = \'<a href=\"https://www.geeksforgeeks.org\">GeeksgorGeeks</a>\';// It will convert htmlentities and print themecho htmlentities( $str );?>Output:  &lt;a href=&quot;https://www.geeksforgeeks.org&quot;&gt;GeeksgorGeeks&lt;/a&gt;htmlspecialchars() FunctionThe htmlspecialchars() function is an inbuilt function in PHP which is used to convert all predefined characters to HTML entities.Syntax:string htmlspecialchars( $string, $flags, $encoding, $double_encode )$string: This parameter is used to hold the input string.$flags: This parameter is used to hold the flags. It is combination of one or two flags, which tells how to handle quotes.$encoding: It is an optional argument which specifies the encoding which is used when characters are converted. If encoding is not given then it is converted according to PHP default version.$double_encode: If double_encode is turned off then PHP will not encode existing HTML entities. The default is to convert everything.Return Values: This function returns the converted string. If there is invalid input string then empty string will returned.Example:<?php// Example of htmlspecialchars() function// String to be converted$str = \'\"geeksforgeeks.org\" Go to GeeksforGeeks\';// Converts double and single quotesecho htmlspecialchars($str, ENT_QUOTES);?>Output:  &quot;geeksforgeeks.org&quot; Go to GeeksforGeeksDifference between htmlentities() and htmlspecialchars() function: The only difference between these function is:htmlspecialchars() function convert the special characters to HTML entities.htmlentities() function convert all applicable characters to HTML entities.");create(getIdByTitle(this.context,"Functions"),"PHP | collator_sort_with_sort_keys() Function","The collator_sort_with_sort_keys() function is an inbuilt function in PHP which is used to sort array using specified collator and sort keys.Syntax:Procedural style:bool collator_sort_with_sort_keys( $coll, $arr )Object oriented style:bool Collator::sortWithSortKeys( $arr )Parameters: This function accepts two parameters as mentioned above and described below:$coll: This parameter is used as collator object. It provides the comparison capability with support for appropriate locale-sensitive sort orderings.$arr: This parameter is used to hold the string which needs to sort.Return Value: This function returns True on success or False on failure.Below programs illustrates the collator_sort_with_sort_keys() function in PHP.Program 1:<?php// Declare an array which need to sort$arr  = array( \'Geeks\', \'g4g\', \'GeeksforGeeks\', \'geek\' );$coll = collator_create( \'gs\' );// Sort the array with key valuecollator_sort_with_sort_keys( $coll, $arr );var_export( $arr );?>Output:  array (    0 => \'g4g\',    1 => \'geek\',    2 => \'Geeks\',    3 => \'GeeksforGeeks\',  )Program 2:<?php// Declare an array which need to sort$arr  = array( \'Geeks123\', \'GeeksABC\', \'GeeksforGeeks\', \'Geeks\' );// Create collector$coll = collator_create( \'en_US\' );// Sort the array with key valuecollator_sort_with_sort_keys( $coll, $arr );var_export( $arr );?>Output:  array (    0 => \'Geeks\',    1 => \'Geeks123\',    2 => \'GeeksABC\',    3 => \'GeeksforGeeks\',  )");create(getIdByTitle(this.context,"Functions"),"PHP | mime_content_type() function","The mime_content_type() function is an inbuilt function in PHP which is used to get the MIME content-type of a file.Syntax:string mime_content_type( $file )Parameters: This function accepts single parameter $file which specifies the path of the file which MIME details to be find.Return Value: This function returns the MIME content type or False on failure.Below programs illustrate the mime_content_type() function in PHP:Program 1:Original Image:<?php// PHP program to illustrate mime_content_type functionecho mime_content_type(\'gfg.png\') . \"</br>\";?>Output:  image/pngProgram 2:Original Image:<?php// PHP program to illustrate// mime_content_type function// Providing and print result of differnt kind of filesecho mime_content_type(\'/home/rajvir/Desktop/gfg.png\') . \"</br>\";echo mime_content_type(\'/home/rajvir/Desktop/gfg_Article.html\') . \"</br>\";echo mime_content_type(\'/home/rajvir/Downloads/gfg.gif\') . \"</br>\";echo mime_content_type(\'/home/rajvir/Desktop/gfg_contribute.txt\') . \"</br>\";echo mime_content_type(\'/home/rajvir/Downloads/geeks.ppt\') . \"</br>\";echo mime_content_type(\'/home/rajvir/Downloads/geeks.pdf\') . \"</br>\";?>Output:  image/png  text/plain  image/gif  text/plain  application/vnd.ms-powerpoint  application/pdf");create(getIdByTitle(this.context,"Functions"),"PHP | urlencode() Function","The urlencode() function is an inbuilt function in PHP which is used to encode the url. This function returns a string which consist all non-alphanumeric characters except -_. and replace by the percent (%) sign followed by two hex digits and spaces encoded as plus (+) signs.Syntax:string urldecode( $input )Parameters: This function accepts single parameter $input which is used to hold the url to be encoded.Return Value: This function returns an encoded string on success.Below programs illustrate the urlencode() function in PHP:Program 1:<?php// PHP program to illustrate urlencode functionecho urlencode(\"https://geeksforgeeks.org/\") . \"\\n\";?>Output:  https%3A%2F%2Fgeeksforgeeks.org%2FProgram 2 :<?php// PHP program to illustrate urlencode functionecho urlencode(\"https://ide.geeksforgeeks.org/\") . \"\\n\";echo urlencode(\"https://contribute.geeksforgeeks.org/\") . \"\\n\";echo urlencode(\"https://practice.geeksforgeeks.org/\") . \"\\n\";echo urlencode(\"https://geeksforgeeks.org/\") . \"\\n\";?>Output:  https%3A%2F%2Fide.geeksforgeeks.org%2F  https%3A%2F%2Fcontribute.geeksforgeeks.org%2F  https%3A%2F%2Fpractice.geeksforgeeks.org%2F  https%3A%2F%2Fgeeksforgeeks.org%2F");create(getIdByTitle(this.context,"Functions"),"PHP | urldecode() Function","The urldecode() function is an inbuilt function in PHP which is used to decode url which is encoded by encoded() function.Syntax:string urldecode( $input )Parameters: This function accepts single parameter $input which holds the url to be decoded.Return Value: This function returns the decoded string on success.Below programs illustrate the urldecode() function in PHP:Program 1:<?php// PHP program to illustrate urldecode function// all sub domain  of geeksforgeeksecho urldecode(\"https%3A%2F%2Fide.geeksforgeeks.org%2F\"). \"\\n\";echo urldecode(\"https%3A%2F%2Fpractice.geeksforgeeks.org%2F\"). \"\\n\";echo urldecode(\"https%3A%2F%2Fgeeksforgeeks.org%2F\"). \"\\n\";?>Output:  https://ide.geeksforgeeks.org/  https://practice.geeksforgeeks.org/  https://geeksforgeeks.org/Program 2 :<?php// all sub domain  of geeksforgeeks$url1 = \"https%3A%2F%2Fide.geeksforgeeks.org%2F\";$url2 = \"https%3A%2F%2Fpractice.geeksforgeeks.org%2F\";$url3 = \"https%3A%2F%2Fgeeksforgeeks.org%2F\";// create an array$query = array($url1, $url2, $url3);// print decoded urlforeach ($query as $chunk) {        printf(urldecode($chunk). \"\\n\");    }?>Output:  https://ide.geeksforgeeks.org/  https://practice.geeksforgeeks.org/  https://geeksforgeeks.org/");create(getIdByTitle(this.context,"Functions"),"PHP | preg_replace() Function","The preg_replace() function is an inbuilt function in PHP which is used to perform a regular expression for search and replace the content.Syntax:preg_replace( $pattern, $replacement, $subject, $limit, $count )Parameters: This function accepts five parameters as mention above and describe below.$pattern: This parameter contains the string element which is used to search the content and it can be a string or array of string.$replacement: It is mandatory parameter which specifies the string or an array with strings to replace.$subject: The string or an array with strings to search and replace.$limit: This parameter specifies the maximum possible replacements for each pattern.$count: It is optional parameter. This variable will be filled with the number of replacements done.Return Value: This function returns an array if the subject parameter is an array, or a string otherwise.Below programs illustrate the preg_replace() function in PHP:Program 1:<?php// PHP program to illustrate// preg_replace function$string = \'November 01, 2018\';$pattern = \'/(\\w+) (\\d+), (\\d+)/i\';$replacement = \'${1} 02, $3\';// print output of functionecho preg_replace($pattern, $replacement, $string);?>Output:  November 02, 2018Program 2 :<?php// PHP program to illustrate// preg_replace function$subject = array(\'1\', \'GFG\', \'2\',\'Geeks\', \'3\', \'GCET\', \'Contribute\', \'4\');$pattern = array(\'/\\d/\', \'/[a-z]/\', \'/[1a]/\');$replace = array(\'X:$0\', \'Y:$0\', \'Z:$0\');// Print Rsult return by functionecho \"preg_replace returns\\n\";print_r(preg_replace($pattern, $replace, $subject));?>Output:  preg_replace returns  Array  (      [0] => X:Z:1      [1] => GFG      [2] => X:2      [3] => GY:eY:eY:kY:s      [4] => X:3      [5] => GCET      [6] => CY:oY:nY:tY:rY:iY:bY:uY:tY:e      [7] => X:4  )Program 3:<?php// PHP program to illustrate// preg_replace function$count = 0;// Display result after replace and countecho preg_replace(array(\'/\\d/\', \'/\\s/\'),        \'*\', \'Geeks 4 Geeks\', -1, $count);echo \"\\n\" . $count;?>Output:  Geeks***Geeks  3");create(getIdByTitle(this.context,"Functions"),"PHP | preg_filter() Function","The preg_filter() function is an inbuilt function in PHP which is used to perform a regular expression search and replace the text.Syntax:preg_filter( $pattern, $replacement, $subject, $limit, $count )Parameters: This function accepts five parameters as mention above and describe below.$pattern: This parameter contains an string element which is search for and it can be a string or array of string.$replacement: It is mandatory parameter which specifies the string or an array with strings to replace.$subject: The string or an array with strings to search and replace.$limit: This parameter specifies the maximum possible replacements for each pattern.$count: It is optional parameter which is used to fill with the number of replacements done.Return Value: This function returns an array if the subject parameter is an array, or a string otherwise.Below program illustrates the preg_filter() function in PHP:Program 1:<?php// PHP program to illustrate// preg_filter function$string = \'November 01, 2018\';$pattern = \'/(\\w+) (\\d+), (\\d+)/i\';$replacement = \'${1} 02, $3\';// print resultecho preg_filter($pattern, $replacement, $string);?>Output:  November 02, 2018Program 2 :<?php// PHP program to illustrate preg_filter function$subject = array(\'1\', \'GFG\', \'2\',        \'Geeks\', \'3\', \'GCET\', \'Contribute\', \'4\');$pattern = array(\'/\\d/\', \'/[a-z]/\', \'/[1a]/\');$replace = array(\'X:$0\', \'Y:$0\', \'Z:$0\');echo \"Returned Array by preg_filter\";print_r(preg_filter($pattern, $replace, $subject));?>Output:  Returned Array by preg_filterArray  (      [0] => X:Z:1      [2] => X:2      [3] => GY:eY:eY:kY:s      [4] => X:3      [6] => CY:oY:nY:tY:rY:iY:bY:uY:tY:e      [7] => X:4  )");create(getIdByTitle(this.context,"Functions"),"PHP | mt_rand( ) Function","While working with algorithms we often come across situations when we need to generate random integers. The most common way to generate random numbers is using Mersenne Twister.The Mersenne Twister is a pseudorandom number generator which got its name derived from the fact that its period length is chosen to be a Mersenne prime. It was the first pseudorandom number generator to provide fast generation of high-quality pseudorandom integers. It was designed specifically to rectify most of the flaws found in older pseudorandom number generators.So in PHP, there is an inbuilt function mt_rand() which is based on Mersenne Twister which helps in generating random numbers.The mt_rand() function generates a random integer between the specified minimum and maximum values. It produces a better random value and is faster than the rand() function. You may also refer to the article on PHP | rand() Function which is another inbuilt function in PHP to generate random numbers.Syntax:int mt_rand($min, $max)Parameters: This function accepts two parameter which are described below:$min : It is an optional parameter. It specifies the lowest number to be returned.The default value is 0.$max : It is an optional parameter. It specifies the highest number to be returned.Return Value: It returns a random number between min (or 0) and max and the return type is integer.Examples:  Input : mt_rand()  Output : 34567    Input : mt_rand(15, 50)  Output : 49Below programs illustrate the working of mt_rand() in PHP:Program 1:<?phpecho mt_rand();?>Output:34567Program 2:<?phpecho mt_rand(15, 50);?>Output:49Important points to note :mt_rand() function generates a random integer using the Mersenne Twister algorithm.It produces a better random value and is faster than the rand() function.");create(getIdByTitle(this.context,"Functions"),"PHP | parse_str() Function","The parse_str() function is a built-in function in PHP which parses a query string into variables. The string passed to this function for parsing is in the format of a query string passed via a URL.Syntax :parse_str($string, $array)Parameters: This function accepts two parameters as shown in the above syntax out of which the first parameter must be supplied and the second one is optional. All of these parameters are described below:$string: It specifies the string to parse.$array: This is an optional parameter which specifies the name of an array to store the variables. This parameter indicates that the variables will be stored in an array.Examples:  Input : \"name=Richik&age=20\"  Output :  $name = Richik            $age = 20    Input : \"roll_no=2&year=2nd&gpa=8.3\"  Output : $roll_no = 2           $year = 2nd           $gpa = 8.3Below programs illustrate the parse_str() function in PHP:Program 1 :<?php    parse_str(\"name=Richik&age=20\");    echo $name.\"\\n\".$age;?>Output:  Richik  20Program 2:In this program we will store the variables in an array and then display the array using print_r() function.<?php    parse_str(\"roll_no=2&year=2nd&gpa=8.3\", $array);    print_r($array);?>Output:  Array  (      [roll_no] => 2      [year] => 2nd      [gpa] => 8.3  )");create(getIdByTitle(this.context,"Functions"),"PHP | filter_var() Function","The filter_var() function filters a variable with the specified filter. This function is used to both validate and sanitize the data.Syntax :-  filter_var(var, filtername, options)Parameters: This funciton accepts three parameters and are described below:var : It is the required field. It denotes the variable to filter.filtername : It is used to specify the ID or name of the filter to use. Default is FILTER_DEFAULT, which results in no filtering. It is optional field.options : It is used to specify one or more flags/options to use. Check each filter for possible options and flags. It is also optional field.Return Value: It returns the filtered data on success, or FALSE on failure.Below are some different applications of filter_var() function:Sanitize a string :In the below example we sanitize a stringExample:-<?php$str = \"<h1>GeeksforGeeks!</h1>\";$newstr = filter_var($str, FILTER_SANITIZE_STRING);echo $newstr;?>Output :-  GeeksforGeeks!Validate an Integer :The below example uses the filter_var() function to check if the variable $int is an integer. If $int is an integer, the output of the code below will be: “Integer is valid”. If $int is not an integer, the output will be: “Integer is not valid”:Example:-<?php$int = 200;if (filter_var($int, FILTER_VALIDATE_INT) === 0 ||    !filter_var($int, FILTER_VALIDATE_INT) === false){    echo(\"Integer is valid\");}else{    echo(\"Integer is not valid\");}?>Output :-  Integer is validValidate an IP Address :The following example uses the filter_var() function to check if the variable $ip is a valid IP address:Example :-<?php$ip = \"129.0.0.1\";if (!filter_var($ip, FILTER_VALIDATE_IP) === false) {    echo(\"$ip is a valid IP address\");} else {    echo(\"$ip is not a valid IP address\");}?>Output :-  129.0.0.1 is a valid IP addressSanitize and Validate an Email Address :The following example uses the filter_var() function to first remove all illegal characters from the $email variable, then check if it is a valid email address:Example :-<?php$email = \"gfg@example.com\";// Remove all illegal characters from email$email = filter_var($email, FILTER_SANITIZE_EMAIL);// Validate e-mailif (!filter_var($email, FILTER_VALIDATE_EMAIL) === false) {    echo(\"$email is a valid email address\");} else {    echo(\"$email is not a valid email address\");}?>Output :-  gfg@example.com is a valid email addressSanitize and Validate a URL :The following example uses the filter_var() function to first remove all illegal characters from a URL, then check if $url is a valid URL:Example :-<?php$url = \"https://www.geeksforgeeks.org\";// Remove all illegal characters from a url$url = filter_var($url, FILTER_SANITIZE_URL);// Validate urlif (!filter_var($url, FILTER_VALIDATE_URL) === false) {    echo(\"$url is a valid URL\");} else {    echo(\"$url is not a valid URL\");}?>Output :-  https://www.geeksforgeeks.org is a valid URL");create(getIdByTitle(this.context,"Functions"),"PHP | srand( ) Function","Many times while designing questions or algorithms we require to generate random numbers. We already have studied a built-in function in PHP for generating random numbers in the article PHP |rand() Function. The rand() function is used in to generate random numbers. If we generate a sequence of random numbers with rand() function, it will create the same sequence, again and again, every time the program runs. To solve this issue another built-in function of PHP, srand() can be used.The srand() function in PHP is used to seed the random number generator rand(). The srand() function sets the starting point for producing a series of pseudo-random integers. If srand() is not called, the rand() seed is set as if srand(1) were called at program start. The srand() function seeds the random number generator with seed(arg) or with a random value if no seed(arg) is given.Syntax:srand($seed)Parameters: This function accepts a single parameter seed. It is an optional parameter and is of integer type. It specifies the seed value.Return Value: This function does not returns any value.Examples:  Input : srand(time());  Output : 1793542495    Input : srand(5)  Output : 3Below programs illustrate the srand() function in PHP:When timestamp is used as the $seed value along with srand() function:<?phpsrand(time());echo(rand());?>Output:1793542495When a user-defined seed value is passed as an argumnet with srand() function:<?phpsrand(5);echo(rand(1, 10));?>Output:3Important Points To Note:srand() function can be used to generate random numbers.srand() function doesn\\’t create the same sequence of random numbers like the rand() function.It doesn’t have a return value.:http://php.net/manual/en/function.srand.php");create(getIdByTitle(this.context,"Functions"),"PHP | lstat( ) function","The lstat() function in PHP is used to return information about a file or a symbolic link. It gathers statistics of the file which is sent as a parameter to the lstat() function. The function returns an array which includes information on following elements :[0] or [dev] – Device number[1] or [ino] – Inode number[2] or [mode] – Inode protection mode[3] or [nlink] – Number of links[4] or [uid] – User ID of owner[5] or [gid] – Group ID of owner[6] or [rdev] – Inode device type[7] or [size] – Size in bytes[8] or [atime] – Last access (as Unix timestamp)[9] or [mtime] – Last modified (as Unix timestamp)[10] or [ctime] – Last inode change (as Unix timestamp)[11] or [blksize] – Blocksize of filesystem IO (if supported)[12] or [blocks] – Number of blocks allocatedNote:This function is similar to stat(), except that if the file parameter is a symbolic link, the status of the symlink is return not the status of the file pointed to by the symlink.Syntax:lstat(file)Parameters Used:The lstat() function in PHP accepts one parameter.file : It is a mandatory parameter which specifies the file.Return Value:It returns an array with the elements mentioned above.Exceptions:The results of the lstat() function differs from server to server.The result of this function are cached and therefore the clearstatcache() function is used to clear the cache.An E_WARNING is emitted on failure.Example: 1  Input : print_r(lstat(\"gfg.txt\"));    Output :  Array  (  [0] => 0  [1] => 0  [2] => 33206  [3] => 1  [4] => 0  [5] => 0  [6] => 0  [7] => 92  [8] => 1141633430  [9] => 1141298003  [10] => 1138609592  [11] => -1  [12] => -1  [dev] => 0  [ino] => 0  [mode] => 33206  [nlink] => 1  [uid] => 0  [gid] => 0  [rdev] => 0  [size] => 92  [atime] => 1141633430  [mtime] => 1141298003  [ctime] => 1138609592  [blksize] => -1  [blocks] => -1  )Example: 2  Input : symlink(\'gfg.php\', \'gfg\');          array_diff(stat(\'gfg\'), lstat(\'gfg\'));  Output :  Array  (      [ino] => 97236376      [mode] => 33188      [size] => 34      [atime] => 1223580003      [mtime] => 1223581848      [ctime] => 1223581848      [blocks] => 8  )    Explanation: Difference of the resluts of stat() and lstat() functionBelow programs illustrate the lstat() function.Program 1<?php// displaying information using lstat() functionprint_r(lstat(\"gfg.txt\"));?>Output:  Array  (  [0] => 0  [1] => 0  [2] => 33206  [3] => 1  [4] => 0  [5] => 0  [6] => 0  [7] => 92  [8] => 1141633430  [9] => 1141298003  [10] => 1138609592  [11] => -1  [12] => -1  [dev] => 0  [ino] => 0  [mode] => 33206  [nlink] => 1  [uid] => 0  [gid] => 0  [rdev] => 0  [size] => 92  [atime] => 1141633430  [mtime] => 1141298003  [ctime] => 1138609592  [blksize] => -1  [blocks] => -1  )Program 2<?php// creating a symbolic linksymlink(\'gfg.php\', \'gfg\');// comparing information returned//  by stat() and lstat() functionarray_diff(stat(\'gfg\'), lstat(\'gfg\'));?>Output:  Array  (      [ino] => 97236376      [mode] => 33188      [size] => 34      [atime] => 1223580003      [mtime] => 1223581848      [ctime] => 1223581848      [blocks] => 8  )Program 3<?php// displaying information of// zip file using lstat() function$myfile = lstat(\"./gfg.zip\");echo($myfile);?>Output:  Array (  [0] => 2161   [1] => 18351063   [2] => 33188   [3] => 1   [4] => 1036   [5] => 1036   [6] => 0   [7] => 270081   [8] => 1382409024   [9] => 1382409631   [10] => 1382409631   [11] => 4096   [12] => 528  [dev] => 2161   [ino] => 18351063   [mode] => 33188   [nlink] => 1   [uid] => 1036   [gid] => 1036   [rdev] => 0   [size] => 270081   [atime] => 1382409024   [mtime] => 1382409631   [ctime] => 1382409631   [blksize] => 4096   [blocks] => 528 )Related Article: PHP | stat( ) function");create(getIdByTitle(this.context,"Functions"),"PHP | fnmatch( ) Function","The fnmatch() function in PHP used to match a filename or string against a specified pattern. The pattern and the filename to be checked are sent as parameters to the fnmatch() function and it returns True if a match is found and False on failure.fnmatch() function is now available for Windows platforms on the PHP 5.3.0 version.Syntax:fnmatch(pattern, string, flags)Parameters Used:The fnmatch() function in PHP accepts three parameter.pattern : It is a mandatory parameter which specifies the pattern to search for.string : It is a mandatory parameter which specifies the string or file to be checked.flags : It is an optional paaremeter which is used to specify flags or a combination of flags.The flags can be a combination of the following flags:FNM_PATHNAME : It is used to specify slash in string only matches slash in the given pattern.FNM_NOESCAPE : It is used to disable backslash escaping.FNM_CASEFOLD : It is used for a caseless match.FNM_PERIOD : It is used to specify a leading period in string must be exactly matched by period in the given pattern.Return Value:It returns True if a match is found and a False on failure.Errors And Exceptions:The buffer must be cleared if the fnmatch() function is used multiple times.The fnmatch() function returns Boolean False but many times it happens that it returns a non-Boolean value which evaluates to False.Below programs illustrate the fnmatch() function.Program 1 Suppose there is a file named “gfg.txt”<?php$check = \"gfg.txt\";// fnmatch function used to check for file starting with gif (fnmatch(\"*[g]*\",$check)){   echo \"gfg\";}else{   echo \"match not found\";}?>Output:gfgProgram 2<?php$check = \"GeeksforGeeks\";// fnmatch function used to check for// a word practice or practiseif (fnmatch(\"*Geeks[gfgj]orGeeks\", $check))    echo \"Yes\";else    echo \"No\";?>Output:  YesProgram 3<?php$check = \'GFG A computer science portal\';// fnmatch function used to check// for a word php without considering its caseif (fnmatch(\"*[PUTgfg]*\", $check, FNM_CASEFOLD))    echo \"Yes\";else    echo \"No\";?>Output:  YesProgram 4<?php$check = \"There is a back slash \\ in this sentence\";// fnmatch function used to check for a \\if (fnmatch(\"*[\\]*\", $check, FNM_NOESCAPE))    echo \"back slash  (\\)  in the sentence \"; else    echo \"match not found\";?>Output:  back slash  (\\)  in the sentence");create(getIdByTitle(this.context,"Functions"),"PHP | link( ) Function","The link() creates a hard link for a specified target. The target and the link are passed as parameters to the link() function and it returns true on success and false on failure.Syntax:link(target, link)Parameters Used:The link() function in PHP accepts two parameters.target : It is a mandatory parameter which specifies the target.link : It is an mandatory parameter which specifies the name of the link.Return Value:It returns TRUE on success or FALSE on failure.Errors And ExceptionThe link() function does not work on remote files as the file to be examined must be accessible via the server’s filesystem.The link created by the link() function is not an HTML link, but a link in the filesystem..In linux, hardlinking to a directory is not permited.Examples:  Input : $targetfile = \'gfg.txt.\';           $linkname = \'gfglink\';          link($targetfile, $linkname);  Output : 1    Input : $targetfile = \'gfg.txt.\';           $linkname = \'gfglink\';            if(!link($targetfile, $linkname))          {             echo(\'Link has been created!\');          }          else          {            echo(\'Link cannot be created!\');          }  Output : Link has been created!Below programs illustrate the link() function.Program 1<?php// target file$targetfile = \'gfg.txt\';// name of the link$linkname = \'gfglink\';// creating a symbolic link for the target filelink($targetfile, $linkname);?>Output:1Program 2<?php// target file$targetfile = \'gfg.txt\';// name of the link$linkname = \'gfglink\';// creating a symbolic link for the target fileif(!link($targetfile, $linkname)) {    echo(\'Link has been created!\'); }else {    echo(\'Link cannot be created!\'); }?>Output:Link has been created!Related Article: PHP | symlink( ) function");create(getIdByTitle(this.context,"Functions"),"PHP | mkdir( ) Function","The mkdir() creates a new directory with the specified pathname. The path and mode are sent as parameters to the mkdir() function and it returns TRUE on success or FALSE on failure.The mode parameter in mkdir() function is ignored on Windows platforms.Syntax:mkdir(path, mode, recursive, context)Parameters Used:The mkdir() function in PHP accepts four parameters.path : It is a mandatory parameter which specifies the path.mode : It is an optional parameter which specifies permission.The mode parameter consists of four numbers:The first number is always zero.The second number specifies permissions for the owner.The third number specifies permissions for the owner’s user group.The fourth number specifies permissions for everybody else.The set of possible values are :1 = execute permissions2 = write permissions4 = read permissionsMultiple permissions can be set by adding up the following numbers.recursive: It is an optional parameter which can be used to set recursive mode.context : It is an optional parameter which specifies the behavior of the stream.Return Value:It returns TRUE on success or FALSE on failure.Errors And Exception:Mode parameter in the mkdir() function must be specified in octal representation making it lead with a zero.An E_WARNING level error is generated if the directory already exists.An E_WARNING level error is generated if the relevant permissions prevent creating the directory.Examples:  Input : mkdir(\"/documents/gfg/articles/\");  Output : 1    Input : mkdir(\"/documents/gfg/articles/\", 0770)  Output : 1    Input : $nest = \'./node1/node2/node3/\';          if (!mkdir($nest, 0777, true))           {            echo(\'Folders cannot be created recursively\');          }          else          {            echo(\'Folders created recursively\');          }    Output : Folders created recursivelyBelow programs illustrate the mkdir() function.Program 1<?php// making a directory with default mode i.e 0777mkdir(\"/documents/gfg/articles/\");?>Output:1Program 2<?php// making a directory with the provision of all// permissions to the owner and the owner\'s user groupmkdir(\"/documents/gfg/articles/\", 0770)?>Output:1Program 3<?php$nest = \'./node1/node2/node3/\';// creating a nested structure directoryif (!mkdir($nest, 0777, true))  {     echo(\'Folders cannot be created recursively\');  }else  {     echo(\'Folders created recursively\');  }?>Output:Folders created recursivelyRelated Article: PHP | rmdir( ) Function");create(getIdByTitle(this.context,"Functions"),"PHP | is_dir( ) Function","The is_dir() function in PHP used to check whether the specified file is a directory or not. The name of the file is sent as a parameter to the is_dir() function and it returns True if the file is a directory else it returns False.Syntax:is_dir($file)Parameters Used:The is_dir() function in PHP accepts only one parameter.$file : It is a mandatory parameter which specifies the file.Return Value:It returns True if the file is a directory else it returns false.Exceptions:An E_WARNING is emitted on failure.The result of this function are cached and therefore the clearstatcache() function is used to clear the cache.is_dir() function returns false for non-existent files.Below programs illustrate the is_dir() function.Program 1<?php$myfile = \"user/home/documents/gfg\";// checking whether a file is directory or notif (is_dir($myfile))    echo (\"$myfile is a directory\");else    echo (\"$myfile is not a directory\");?>Output:  user/home/documents/gfg is a directoryProgram 2<?php$myfile = \"https://www.geeksforgeeks.org\";// checking whether a file is directory or notif (is_dir($myfile))    echo (\"$myfile is a directory\");else    echo (\"$myfile is not a directory\");?>Output:  https://www.geeksforgeeks.org is not a directory");create(getIdByTitle(this.context,"Functions"),"PHP | pclose( ) Function","The pclose() closes a pipe opened by the popen() function. The file pointer initiated by the popen() function must be closed with pclose().The pipe specified by popen() function is sent as a parameter to the pclose() function and it returns the termination status of the process that was run, or -1 in case of an error.Syntax:pclose(pipe)Parameters Used:The pclose() function in PHP accepts only one parameter.pipe : It is a mandatory parameter which specifies the pipe opened by the popen() function.Return Value:It returns the termination status of the process that was run, or -1 in case of an error.Errors And Exceptions:To obtain the real exit status code the pcntl_wexitstatus() function should be used.pclose() returns 0 on every platform in case popen() could not execute the specified command.Examples:  Input : $my_file = popen(\"/bin/ls\", \"r\");          pclose($my_file);  Output : 1    Input : $my_file = popen(\'/executable/gfg.exe\', \'r\');          echo \"\'my_file\'; \" . get_class($my_file) . \"\\n\";          $file_read = fread($my_file, 4192);          echo $file_read;          pclose($my_file);    Output : 1Below programs illustrate the pclose() function.Program 1<?php// opening a pipe$my_file = popen(\"/bin/ls\", \"r\");// closing the my_filepclose($my_file);?>Output:1Program 2<?php// opening a pipe$my_file = popen(\'/executable/gfg.exe\', \'r\');// returning name of class of an object using get_class()echo \"\'$my_file\'; \" . get_class($my_file) . \"\\n\";// reading file using fread()$filereader = fread($my_file, 4192);echo $filereader;// closing the pipepclose($my_file);?>Output:1");create(getIdByTitle(this.context,"Functions"),"PHP | vsprintf() Function","The vsprintf() function in PHP is an inbuilt function and used to display array values as a formatted string. The array elements will be inserted at the percent (%) signs in the main string. Display array values as a formatted string according to its format and accepts an array argument in place of variable number of arguments. The function returns formatted string. while vprintf() outputs a formatted stringSyntax:   vsprintf (format, arr_arguments)Parameters Used : This Function takes Two parameter which are described below-format: It has Required parameter. It Specifies how string formated to be variables. Possible format values as below:%% – Returns a percent sign%b – Binary number%d – Signed decimal number (negative, zero or positive)%u – Unsigned decimal number (equal to or greather than zero)%x – Hexadecimal number (lowercase letters)%X – Hexadecimal number (uppercase letters)%f – Floating-point number (local settings aware)%F – Floating-point number (not local settings aware)%o – Octal number%c – The character according to the ASCII value%s – String%e – Scientific notation using a lowercase (e.g. 1.2e+2)%g – shorter of %e and %f%G – shorter of %E and %f%E – Scientific notation using a uppercase (e.g. 1.2E+2)arr_arguments: An array arguments inserted at the % signs formated string.Additional format:– -> Left-justifies for variable value .[0-9] -> maximum string length for number.[0-9] -> minimum string width for variable value.+ -> Used for both[+ or-] (By default its negative number).Program 1: String space specified program.<?php$str1 = \"Geeks\";$str2 = \"Geeksforgeeksarticle\";// print string-1 onlyecho vsprintf(\"%s\\n\", array(    $str1));// print string-15 spaceecho vsprintf(\"%15s\\n\", array(    $str1));// print string-1 with spaceecho vsprintf(\"%-25s\\n\", array(    $str1));// print string with zeroecho vsprintf(\"%020s\\n\", array(    $str1));// print string with * symbolecho vsprintf(\"%\'*10s\\n\", array(    $str1));// print string-2echo vsprintf(\"%s\\n\", array(    $str2));// print string-2 with decimal pointecho vsprintf(\"%2.10s\\n\", array(    $str2));// print string-2 with spaceecho vsprintf(\"%30s\\n\", array(    $str2));// print string-2 with zeroecho vsprintf(\"%030s\", array(    $str2));?>Output:  Geeks            Geeks  Geeks                      000000000000000Geeks  *****Geeks  Geeksforgeeksarticle  Geeksforge            Geeksforgeeksarticle  0000000000GeeksforgeeksarticleProgram 2: Drive floating program %f and %F in vsprintf() function in PHP.<?php// %f and %F floating number in// vsprintf function in php$value1 = 789495321;$value2 = 8080907021;$value3 = 334422190;echo \"\\n%f (local) Floating: \";// for %f Floating-point number// for local settings aware$txt = vsprintf(\"%f %f %f\", array(    $value1,    $value2,    $value3));echo $txt;echo \"\\n%F (Not local) Floating: \";// for %F Floating-point number// for local settings aware$result = vsprintf(\"%F %F %F \", array(    $value1,    $value2,    $value3));echo $result;?>Output:  %f (local) Floating: 789495321.000000 8080907021.000000 334422190.000000  %F (Not local) Floating: 789495321.000000 8080907021.000000 334422190.000000Program 3: Implement %d, %u, %e and %E in vsprintf() function.<?php// vsprintf function in php// used %d, %u, %e, %E$value1 = 7894;$value2 = 9070;$value3 = 3344;echo \"%d Signed decimal number : \";// %d Signed decimal number// where (-, + or zero)$txt = vsprintf(\"%d %d %d\", array(    $value1,    $value2,    $value3));echo $txt;echo \"\\n%u UnSigned decimal number : \";// %d UnSigned decimal number// where (0<=zero)$tt = vsprintf(\"%u %u %u\", array(    $value1,    $value2,    $value3));echo $tt;echo \"\\n%e Scientific notation : \";// Scientific notation for lowercase$result = vsprintf(\"%e %e %e \", array(    $value1,    $value2,    $value3));echo $result;echo \"\\n%E Scientific notation : \";// Scientific notation for uppercase$result = vsprintf(\"%E %E %E \", array(    $value1,    $value2,    $value3));echo $result;?>Output:  %d Signed decimal number : 7894 9070 3344  %u UnSigned decimal number : 7894 9070 3344  %e Scientific notation : 7.894000e+3 9.070000e+3 3.344000e+3   %E Scientific notation : 7.894000E+3 9.070000E+3 3.344000E+3Program 4: Implement %%, %b, %o, %x, and %Xin vsprintf() function in PHP.<?php// vsprintf function in php// used %%, %b, %o, %x, %X$value1 = 789495;$value2 = 334455;// Returns [%] signecho \"% ->Returns [%] sign: \";$txt = vsprintf(\"%% %%\", array(    $value1,    $value2));echo $txt;// Returns [%b] binary numberecho \"\\n%b ->binary number : \";$tt = vsprintf(\"%b %b\", array(    $value1,    $value2));echo $tt;// Returns [%o] octal numberecho \"\\n%o ->octal number : \";$result = vsprintf(\"%o %o \", array(    $value1,    $value2));echo $result;// Returns [%x] Hexadecimal number[lowercase]echo \"\\n%x ->Hexadecimal number Lc : \";$result = vsprintf(\"%x %x\", array(    $value1,    $value2));echo $result;// Returns [%X] Hexadecimal number[Uperercase]echo \"\\n%X ->Hexadecimal number Uc : \";$result = vsprintf(\"%X %X\", array(    $value1,    $value2));echo $result;?>Output:  % ->Returns [%] sign: % %  %b ->binary number : 11000000101111110111 1010001101001110111  %o ->octal number : 3005767 1215167   %x ->Hexadecimal number Lc : c0bf7 51a77  %X ->Hexadecimal number Uc : C0BF7 51A77Program 5:Implement %g %G and %c(ASCII) vsprintf() function in PHP.<?php// vsprintf function in php$value1 = 75;$value2 = 55;$char   = 97;$char2  = 69;// shorter of %e and %fecho \"%g shorter of %e and %f: \";$txt = vsprintf(\"%g %g\", array(    $value1,    $value2));echo $txt;// %G – shorter of %E and %fecho \"\\n%G shorter of %E and %f : \";$tt = vsprintf(\"%G %G\", array(    $value1,    $value2));echo $tt;// ASCII valueecho \"\\n%c ASCII value : \";$result = vsprintf(\"%c %c \", array(    $char,    $char2));echo $result;?>Output:  %g shorter of %e and %f: 75 55  %G shorter of %E and %f : 75 55  %c ASCII value : a ERelated Article: PHP | vprintf() functionReferences: http://php.net/manual/en/function.vsprintf.php");create(getIdByTitle(this.context,"Functions"),"PHP | ctype_cntrl() Function","The ctype_cntrl() is an inbult function in PHP which is used to check all the characters in string/text are control characters. Control characters are e.g. line feed, tab, escape.Syntax:bool ctype_cntrl ( $str )Parameters: This function accepts a single parameter $str. It is a mandatory parameter which specifies the string.Return Value: It returns True if a string contains only control characters and False on failure.Examples:  Input: GeeksforGeeks  Output: No  Explanation: String (GeeksforGeeks) contains only the alphanumeric characters.    Input: \\n\\t  Output: Yes  Explanation: String (\\n\\t) contains only the control character.Below programs illustrate the ctype_cntrl() function.Program 1:<?php// PHP program to check if a string has all// control characters$str1 = \"GeeksforGeeks\";    if ( ctype_cntrl($str1))        echo \"Yes\\n\";    else        echo \"No\\n\";$str2 = \"\\n\\t\";    if ( ctype_cntrl($str2))        echo \"Yes\\n\";    else        echo \"No\\n\";?>Output:  No  YesProgram 2: Implementation of ctype_cntrl() function which takes input of an array of string that contains integers and special Symbol.<?php// PHP program to check if a string has all// control characters$str = array(    \"Geeks\",    \"Geeks space\",    \"@@##-- /\",    \"\\n\",    \"\\t \\r\",    \"\\r\\t\\n\");// Check the above strings by using// ctype_cntrl() functionforeach ($str as $test) {    if (ctype_cntrl($test))        echo \"Yes\\n\";    else        echo \"No\\n\";}?>Output:  No  No  No  Yes  No  YesReferences: http://php.net/manual/en/function.ctype-cntrl.php");create(getIdByTitle(this.context,"Functions"),"PHP | metaphone() Function","The metaphone() function is a built-in function in PHP and is used to calculate the metaphone key of a given string. The Metaphone key is a phonetic algorithm for indexing of words by their pronunciation. It uses the larger set of rules for English pronunciation.Syntax:string metaphone ( $str, $key )Parameters: This function accepts two parameters as mentioned above and described below:$str: It is Required parameter which represents the string to find the Metaphone key.$key: It is a optional parameter which specified for Maximum length of the metaphone key.Return Value: It returns the metaphone key as a string, and return FALSE in failure.Examples:Input: $str = \"Contribute Article on GeeksforGeeks\"  Output: KNTRBTRTKLNJKSFRJKS    Input: $str = \"Contribute Article on GeeksforGeeks\"  $key = 5  Output: KNTRBBelow programs illustrate the metaphone() function in PHP:Program 1:<?php$str1 = \"Contribute Article on GeeksforGeeks\";echo metaphone($str1) . \"\\n\";$str2 = \"A computer science portal\";echo metaphone($str2);?>Output:  KNTRBTRTKLNJKSFRJKS  AKMPTRSNSPRTLProgram 2:<?php$str1 = \"Contribute Article on GeeksforGeeks\";echo metaphone($str1, 6) . \"\\n\";$str2 = \"A computer science portal\";echo metaphone($str2, 5);?>Output:  KNTRBT  AKMPTRelated Article: PHP | soundex() Function");create(getIdByTitle(this.context,"Functions"),"PHP | date_modify() Function","The date_modify() function is an inbuilt function in PHP. Through the help of this function, we can modify or can alter the timestamp of DateTime object. The DateTime object and string modify are parameters in the calling function.Syntax:  date_modify(DateTime $object, string $modify);Parameters:The function accepts two parameters as described below:$object : This is a mandatory parameter. It specifies a DateTime object returned by date_create() .This object is modified by the above mentioned function.$modify : This is also a mandatory parameter. This specifies a date/time string. It is incremented or decremented to modify the DateTime object.Return Values :This function returns a DateTime object on success. And returns FALSE on failure.Below programs illustrate the date_modify() function :Program 1 :<?php// PHP program to illustrate date_modify()// function// creating DateTime object$date=date_create(\"2018-04-08\");// calling of date modify function// with two required parametersdate_modify($date, \"+15 days\");// printing the modified date in \"y-m-d\" formatecho date_format($date, \"Y-m-d\");?>Output:  2018-04-13Program 2: This program will be increase months by one<?php// PHP program to illustrate date_modify()// function// creating a DateTime object$date = date_create(\'2000-10-14\');// calling date_modify function with// two required parametersdate_modify($date, \'+1 month\');// printing the modified dateecho date_format($date, \'Y-m-d\');?>Output:  2000-11-14Referencehttp://php.net/manual/en/datetime.modify.php");create(getIdByTitle(this.context,"Functions"),"PHP | is_bool()","is_bool() is an inbuilt function in php. The is_bool() function is used to find whether a variable is an a boolean or not.Syntax:boolean is_bool($variable_name)  $variable_name:the variable we want to check.return value: It is a boolean function so returns TRUE when $variable_name is a boolean value, otherwise FALSE.Example 1:<?php//php code$variable_name1 = false;$variable_name2 = 32;//$variable_name1 is boolean, gives TRUEif (is_bool($variable_name1))echo \"Variable is a boolean. \\n\";elseecho \'Variable is not a boolean. \\n\';//$variable_name2 is boolean, gives FALSEif (is_bool($variable_name2))echo \'32 is a boolean.\\n\';elseecho \'32 is not a boolean.\';?>Output:  Variable is a boolean.   32 is not a boolean.Example 2:<?php// PHP codefunction square($num){    return (is_bool($num));}echo square(TRUE) .\"\\n\";   // outputs \'1\'.echo square(FALSE) .\"\\n\";   // outputs \'1\'.echo square(56) .\"\\n\";   // nothing is returned.?>Output:  1  1refrence:http://php.net/manual/en/function.is-bool.php");create(getIdByTitle(this.context,"Functions"),"PHP | is_a() function","The is_a() is a built-in function in PHP and is used to check whether a given object is of a given class or not. It also checks if the given class is one of the parents of the given object or not.Syntax:  boolean is_a($object, $class)Parameters: This function accepts two parameters as shown in the above syntax and explained below:$object: The given object to be tested.$class: The name of the class.Return Type: It returns TRUE if the object given by the parameter $object is of $class or has this $class as one of its parents otherwise it returns FALSE.Below programs illustrate the is_a() function:Program 1:<?php// PHP program to illustrate the// is_a() function// sample classclass GeeksforGeeks{    var $store = \'geek\';}// create a new object$geek = new GeeksforGeeks();// checks if $geek is an object// of class GeeksforGeeksif (is_a($geek, \'GeeksforGeeks\')){    echo \"YES\";}?>Output:  YESProgram 2:<?php// PHP program to illustrate the// is_a() functioninterface parentClass{    public function A();}class childClass implements parentClass{    public function A ()    {        print \"A\";    }}$object = new childClass();if(is_a($object, \'parentClass\')){    echo \"YES\";}else{    echo \"NO\";}?>Output:  YES");create(getIdByTitle(this.context,"Functions"),"PHP | print_r() Function","The print_r() function is a built-in function in PHP and is used to print or display information stored in a variable.Syntax:print_r( $variable, $isStore )Parameters: This function accepts two parameters as shown in above syntax and described below.$variable: This parameter specifies the variable to be printed and is a mandatory parameter.$isStore: This an option parameter. This parameter is of boolean type whose default value is FALSE and is used to store the output of the print_r() function in a variable rather than printing it. If this parameter is set to TRUE then the print_r() function will return the output which it is supposed to print.Return Value: If the $variable is an integer or a float or a string the function prints the value of the variable. If the variable is an array the function prints the array in a format which displays the keys as well as values, a similar notation is used for objects. If the parameter $isStore is set to TRUE then the print_r() function will return a string containing the information which it is supposed to print.Below programs illustrate the print_r() function:Program 1:<?php// PHP program to illustrate// the print_r() function// string variable$var1 = \"Welcome to GeeksforGeeks\";// integer variable$var2 = 101;// array variable$arr = array(\'0\' => \"Welcome\", \'1\' => \"to\", \'2\' => \"GeeksforGeeks\");// printing the variablesprint_r($var1);echo\"\\n\";print_r($var2);echo\"\\n\";print_r($arr);?>Output:  Welcome to GeeksforGeeks  101  Array  (      [0] => Welcome      [1] => to      [2] => GeeksforGeeks  )Program 2:<?php// PHP program to illustrate the print_r()// function when $isStore is set to true// array variable$arr = array(\'0\' => \"Welcome\", \'1\' => \"to\",                     \'2\' => \"GeeksforGeeks\");// storing output of print_r() function// in another variable$results = print_r($arr, true);echo $results;?>Output:  Array  (      [0] => Welcome      [1] => to      [2] => GeeksforGeeks  )");create(getIdByTitle(this.context,"Functions"),"PHP | time() Function","The time() function is a built-in function in PHP which returns the current time measured in the number of seconds since the Unix Epoch. The number of seconds can be converted to the current date using date() function in PHP.Syntax:int time()Parameter: This function does not accepts any parameters as shown above.Return Value: This function returns the current time measured in the number of seconds since the Unix Epoch.Note: All output of programs corresponds to the date when the article was written.Below programs illustrate the time() function:Program 1: The program below prints the current time in term of seconds.<?php// PHP program to demonstrate the use of current// time in seconds since Unix Epoch// variable to store the current time in seconds$currentTimeinSeconds = time();// prints the current time in secondsecho $currentTimeinSeconds;?>Output:1525376494Program 2: The program below prints the current time in date format.<?php// PHP program to demonstrate the use of current// date since Unix Epoch// variable to store the current time in seconds$currentTimeinSeconds = time();// converts the time in seconds to current date$currentDate = date(\'Y-m-d\', $currentTimeinSeconds);// prints the current dateecho ($currentDate);?>Output:2018-05-03");create(getIdByTitle(this.context,"Functions"),"PHP | strtotime() Function","The strtotime() function is a built-in function in PHP which is used to convert an English textual date-time description to a UNIX timestamp. The function accepts a string parameter in English which represents the description of date-time. For e.g., “now” refers to the current date in English date-time description. The function returns the time in seconds since the Unix Epoch. We can return the English textual date-time in date format using the date() function.Syntax:strtotime ($EnglishDateTime, $time_now)Parameters: The function accepts two parameters as shown above and described below:$EnglishDateTime – This parameter specifies the English textual date-time description, which represents the date or time to be returned. The function parses the string and returns us the time in seconds. The parameter is mandatory$time_now This parameter specifies the timestamp used to calculate the returned value. It is an optional parameter.Note: Since the time/date is not static, therefore the output will vary.Below programs illustrate the strtotime() function.Program 1: The below program demonstrates the strtotime()function when the english text is “now”.<?php// PHP program to demonstrate the strtotime()// function when the english text is \"now\"// prints current time in second// since now means currentecho strtotime(\"now\"), \"\\n\";// prints the current time in date formatecho date(\"Y-m-d\", strtotime(\"now\")).\"\\n\";?>Output:1525378260  2018-05-03Program 2: The below program demonstrates the strtotime()function when the english text is a date.<?php// PHP program to demonstrate the strtotime()// function when the english text is a date// prints the converted english text in secondecho strtotime(\"12th february 2017\"), \"\\n\";// prints the above time in date formatecho date(\"Y-m-d\", strtotime(\"12th february 2017\")).\"\\n\";?>Output:1486857600  2017-02-12Program 3: The below program demonstrates the strtotime()function when the english text corresponds to any day.<?php// PHP program to demonstrate the strtotime()// function when the english text corresponds to any// day// prints the converted english text in secondecho strtotime(\"next sunday\"), \"\\n\";// prints the above time in date formatecho date(\"Y-m-d\", strtotime(\"next sunday\")).\"\\n\";?>Output:1525564800  2018-05-06");create(getIdByTitle(this.context,"Functions"),"PHP | checkdate() Function","The checkdate() function is a built-in function in PHP which checks the validity of the date passed in the arguments. It accepts the date in the format mm/dd/yyyy. The function returns a boolean value. It returns true if the date is a valid one, else it returns false.Syntax:checkdate ( $month, $day, $year )Parameters: The function accepts three mandatory parameters as shown above and described below:$month – This parameter specifies the month. The month has to be in between 1 to 12 for a valid date.$day – This parameter specifies the day. The day can be in range 1-31 depending on the month entered for it to be a valid day. In case of a leap year, the day is in range 1-29 and for a non-leap year the day is in range 1-28.$year – This parameter specifes the year. The year has to be in range 1-32767 inclusive depending on the $month and $day for it to be a valid date.Return Value: The function returns a boolean value. It returns true if the passed date is a valid date. It returns false if the passed date is not a valid one.Examples:  Input : $month = 12 $day = 31 $year = 2017  Output : true    Input : $month = 2 $day = 29 $year = 2016  Output : true     Input : $month = 2 $day = 29 $year = 2017  Output : falseBelow programs illustrate the checkdate() function in PHP :Program 1: The program below check if the date is a valid one or not.<?php// PHP program to demonstrate the checkdate() function$month = 12;$day = 31;$year = 2017;// returns a boolean value after validation of datevar_dump(checkdate($month, $day, $year));?>Output:bool(true)Program 2: The program below check if the date is a valid one or not in case of a leap year and non-leap year.<?php// PHP program to demonstrate the checkdate() function// in case of leap year$month = 2;$day = 29;$year = 2016;// returns a boolean value after validation of date// leap yearvar_dump(checkdate($month, $day, $year));$month = 2;$day = 29;$year = 2017;// returns a boolean value after validation of date// non-leap yearvar_dump(checkdate($month, $day, $year));?>Output:bool(true)  bool(false)");create(getIdByTitle(this.context,"Functions"),"PHP | Date and Time","Date and time are some of the most frequently used operations in PHP while executing SQL queries or designing a website etc. PHP serves us with predefined functions for these tasks. Some of the predefined functions in PHP for date and time are discussed below.PHP date() FunctionThe PHP date() function converts a timestamp to a more readable date and time format.Why do we need the date() function?The computer stores dates and times in a format called UNIX Timestamp, which measures time as number of seconds since the beginning of the Unix epoch (midnight Greenwich Mean Time on January 1, 1970 i.e. January 1, 1970 00:00:00 GMT ).Since this is an impractical format for humans to read, PHP converts a timestamp to a format that is readable and more understandable to humans.Syntax:date(format, timestamp)Explanation:The format parameter in the date() function specifies the format of returned date and time.Timestamp is an optional parameter,if it is not included then current date and time will be used.Below program explains usage of date() function in PHP:<?phpecho \"Today\'s date is :\";$today = date(\"d/m/Y\");echo $today;?>Output:  Today\'s date is :05/12/2017Formatting options available in date() function: The format parameter of the date() function is a string that can contain multiple characters allowing to generate dates in various formats.Date-related formatting characters that are commonly used in format string:d – Represents day of the month; two digits with leading zeros (01 or 31).D – Represents day of the week in text as an abbreviation (Mon to Sun).m – Represents month in numbers with leading zeros (01 or 12).M – Represents month in text, abbreviated (Jan to Dec).y – Represents year in two digits (08 or 14).Y – Represents year in four digits (2008 or 2014).The parts of the date can be separated by inserting other characters, like hyphens (-), dots (.), slashes (/), or spaces to add additional visual formatting.<?phpecho \"Today\'s date in various formats:\" . \"\\n\";echo date(\"d/m/Y\") . \"\\n\";echo date(\"d-m-Y\") . \"\\n\";echo date(\"d.m.Y\") . \"\\n\";echo date(\"d.M.Y/D\");?>Output:  Today\'s date in various formats:  05/12/2017  05-12-2017  05.12.2017  05.Dec.2017/TueThe following characters can be used along with date() function to format the time string:h – Represents hour in 12-hour format with leading zeros (01 to 12).H – Represents hour in in 24-hour format with leading zeros (00 to 23).i – Represents minutes with leading zeros (00 to 59).s – Represents seconds with leading zeros (00 to 59).a – Represents lowercase ante meridian and post meridian (am or pm).A – Represents uppercase ante meridian and post meridian (AM or PM).<?phpecho date(\"h:i:s\") . \"\\n\";echo date(\"M,d,Y h:i:s A\") . \"\\n\";echo date(\"h:i a\");?>Output:  03:04:17  Dec,05,2017 03:04:17 PM  03:04 pmPHP time() FunctionThe time() function is used to get the current time as a Unix timestamp (the number of seconds since the beginning of the Unix epoch: January 1 1970 00:00:00 GMT).The following characters can be used to format the time string:h – Represents hour in 12-hour format with leading zeros (01 to 12).H – Represents hour in in 24-hour format with leading zeros (00 to 23).i – Represents minutes with leading zeros (00 to 59).s – Represents seconds with leading zeros (00 to 59).a – Represents lowercase ante meridian and post meridian (am or pm).A – Represents uppercase ante meridian and post meridian (AM or PM).Below program explains usage of time() function in PHP:<?php$timestamp = time();echo($timestamp);echo \"\\n\";echo(date(\"F d, Y h:i:s A\", $timestamp));?>Output:  1512486297  December 05, 2017 03:04:57 PMPHP mktime() FunctionThe mktime() function is used to create the timestamp for a specific date and time.If no date and time is provided, the timestamp for the current date and time is returned.Syntax:mktime(hour, minute, second, month, day, year)Input:<?phpecho mktime(23, 21, 50, 11, 25, 2017);?>Output:  1511652110The above code creates a time stamp for 25th Nov 2017 ,23 hrs 21mins 50secs.");create(getIdByTitle(this.context,"Functions"),"PHP | mktime() Function","The mktime() function is an inbuilt function in PHP which is used to return the Unix timestamp for a date. The timestamp returns a long integer containing the number of seconds between the Unix Epoch (January 1, 1970, 00:00:00 GMT) and the time specified. The hour, minute, second, month, day and year are sent as parameters to the mktime() function and it returns an integer Unix timestamp on success and False on error.Syntax:int mktime( $hour, $minute, $second, $month, $day, $year, $is_dst)Parameters: This function accepts seven parameters as mentioned above and described below:$hour: It is an optional parameter which specifies the hour.$minute: It is an optional parameter which specifies the minute.$second: It is an optional parameter which specifies the second.$month: It is an optional parameter which specifies the month.$day: It is an optional parameter which specifies the day.$year: It is an optional parameter which specifies the year.$is_dst: It is an optional parameter which can be set to 1 if the time is during daylight savings time (DST), or 0 if it is not.Return Value: This function returns an integer Unix timestamp on success and False on error.Exceptions:PHP 5.3.0 version throws an E_DEPRECATED error if the is_dst parameter is used.The mktime() function throws a E_NOTICE on every call to a date/time if the time zone is not valid.Below programs illustrate the mktime() function in PHP:Program 1:<?php// Using mktime() function to know the dayecho \"December 1, 2002 was on a \" . date(\"l\",                 mktime(0, 0, 0, 12, 1, 2002));?>Output:  December 1, 2002 was on a SundayProgram 2:<?php// Using mktime() function to know the complete dateecho date(\"M-d-Y\", mktime(0, 0, 0, 12, 1, 2002)) . \"<br>\";// Using mktime() function to know the// complete date for an out-of-range inputecho date(\"M-d-Y\", mktime(0, 0, 0, 12, 40, 2002));?>Output:  Dec-01-2002Jan-09-2003Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | microtime() Function","The microtime() function is an inbuilt function in PHP which is used to return the current Unix timestamp with microseconds. The $get_as_float is sent as a parameter to the microtime() function and it returns the string microsec sec by default.Syntax:microtime( $get_as_float )Parameters: This function accepts single parameter $get_as_float which is optional. If $get_as_float is set to TRUE then it specify that the function should return a float, instead of a string.Return Value: It returns the string microsec sec by default, where sec is the number of seconds since the Unix Epoch (0:00:00 January 1, 1970, GMT), and microsec is the microseconds part. If the $get_as_float parameter is set to TRUE, it returns a float representing the current time in seconds since the Unix epoch accurate to the nearest microsecond.Exceptions: The microtime() function is only available on operating systems that support the gettimeofday() system call.Below programs illustrate the microtime() function in PHP:Program 1:<?php// Displaying the micro time as a stringecho (\"The micro time is :\");echo(microtime());?>Output:  The micro time is :0.51423700 1535452933Program 2:<?php// Displaying the micro time as a float typeecho (\"The micro time is :\");echo(microtime(true));?>Output:  The micro time is :1535452935.2589Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | localtime() Function","The localtime() function is an inbuilt function in PHP which is used to return the local time. The array returned by the localtime() function is similar to the structure returned by the C function call. The $timestamp and $is_associative are sent as parameters to the localtime() function and it returns an array that contains the components of a Unix timestamp.Syntax:array localtime( $timestamp, $is_associative )Parameters: This function accepts two parameters as mentioned above and described below.$timestamp: It is an optional parameter which specifies the Unix timestamp. Its default value is current local time.$is_associative: It is an optional parameter which specifies whether to return an associative or indexed array. The value of associative array are:tm_sec: seconds, 0 to 59tm_min: minutes, 0 to 59tm_hour: hours, 0 to 23tm_mday: day of the month, 1 to 31tm_mon: month of the year, 0 (Jan) to 11 (Dec)tm_year: years since 1900tm_wday: day of the week, 0 (Sun) to 6 (Sat)tm_yday: day of the year, 0 to 365tm_isdst: is daylight savings time in effect? Positive if yes, 0 if not, negative if unknown.Return Value: This function returns an array that contains the components of a Unix timestamp.Exceptions:The localtime() function generates a E_NOTICE if the time zone specified is not valid.The localtime() function generates a E_STRICT or E_WARNING message if using the system settings or the TZ environment variableBelow programs illustrate the localtime() function in PHP:Program 1:<?php// Displaying the local time as// a numerically indexed arrayecho (\"The local time is :\");print_r(localtime());?>Output:  The local time is :Array  (      [0] => 22      [1] => 24      [2] => 10      [3] => 28      [4] => 7      [5] => 118      [6] => 2      [7] => 239      [8] => 0  )Program 2:<?php// Displaying the local time as// an associative arrayecho (\"The local time is :\");print_r(localtime(time(), true));?>Output:  The local time is :Array  (      [tm_sec] => 23      [tm_min] => 24      [tm_hour] => 10      [tm_mday] => 28      [tm_mon] => 7      [tm_year] => 118      [tm_wday] => 2      [tm_yday] => 239      [tm_isdst] => 0  )Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | gmstrftime() Function","The gmstrftime() function is an inbuilt function in PHP which is used to format a GMT/UTC time/date according to local settings. The gmstrftime() function in PHP behaves in the same way as strftime() except that the time returned by the gmstrftime() function is Greenwich Mean Time (GMT). The $format and $timezone are sent as parameters to the gmstrftime() function and returns a string formatted according to the format specified using the given timestamp.Syntax:string gmstrftime( $format, $timestamp )Parameters: This function accepts two parameters as mentioned above and described below:$format: It is a mandatory parameter which is used to specify the format of result.$timestamp: It is an optional parameter which is used to specify the UNIX timestamp that represents the date and/or time to be formatted.Return Value: This function returns a formatted string according to the format specified by the given timestamp.Exceptions:Month, weekday names and other language-dependent strings respect the current locale set with setlocale() function.If a timestamp is not given in the gmstrftime() function, it defaults to the value of time() or in other words to the current local time.Below programs illustrate the gmstrftime() function in PHP:Program 1:<?php// Using gmstrftime() function to return the GMT timeecho(gmstrftime(\"%B %d %Y, %X %Z\", mktime(14, 0, 0, 8, 31, 18)));?>Output:  August 31 2018, 14:00:00 GMTProgram 2:<?php// Using gmstrftime() function to return the GMT timesetlocale(LC_ALL, \'en_US\');echo(gmstrftime(\"%B %d %Y, %X %Z\"));?>Output:  August 31 2018, 09:55:21 GMTRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | gmmktime() Function","The gmmktime() function is an inbuilt function in PHP which is used to return the Unix timestamp for a GMT date. The $hour, $minute, $second, $month, $day, $year and $is_dst are sent as parameters to the gmmktime() function and it returns an integer Unix timestamp on success or False on error.Syntax:int gmmktime( $hour, $minute, $second, $month, $day, $year, $is_dst)Parameters: This function accepts seven parameters as mentioned above and described below:$hour: It is an optional parameter which is used to specify the hour time.$minute: It is an optional parameter which is used to specify the minute.$second: It is an optional parameter which is used to specify the second.$month: It is an optional parameter which is used to specify the month.$day: It is an optional parameter which is used to specify the day.$year: It is an optional parameter which is used to specify the year.$is_dst: It is an optional parameter which can be set to 1 if the time is during daylight savings time (DST), or 0 if it is not.Return Value: This function returns an integer Unix timestamp on success or False on error.Exception: PHP 5.3.0 version throws an E_DEPRECATED error if the $is_dst parameter is used.Below program illustrate the gmmktime() function in PHP:Program 1:<?php// Using gmmktime() function to know the dayecho \"August 30, 2018 was on \". date(\"l\", gmmktime(0, 0, 0, 8, 30, 2018));?>Output:  August 30, 2018 was on ThursdayProgram 2:<?php// Using gmmktime() function to know// the complete dateecho date(\"M-d-Y\", gmmktime(0, 0, 0, 12, 1, 2012))        . \"<br>\";// Using gmmktime() function to know the// complete date for an out-of-range inputecho date(\"M-d-Y\", gmmktime(0, 0, 0, 12, 20, 2017));?>Output:  Dec-01-2012Dec-20-2017Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_date_set() Function","The date_date_set() function is an inbuilt function in PHP which is used to set a new Date. This function has four parameters $object, $year, $month and $day and returns DateTime object on success or false on failure. The date_date_set() function is an alias of DateTime::setDate() function.Syntax:date_date_set( $object, $year, $month, $day )Parameters: This function accepts four parameters as mentioned above and described below:$object: It is a mandatory parameter which is used to specify the DateTime object which is returned by the date_create() function.$year: It is a mandatory parameter which is used to specify the year of the date.$month: It is a mandatory parameter which is used to specify the month of the date.$day: It is a mandatory parameter which is used to specify the day of the date.Return Value:This function returns a new DateTime object on success or FALSE on failure.Below programs illustrate the date_date_set() function in PHP.Program 1: Procedural style to print DateTime.<?php// Date_create() returns a new DateTime object.$date = date_create();// date_date_set() functiondate_date_set($date, 2018, 8, 31);// Print the date in a formatecho date_format($date, \"Y/m/d\");?>Output:  2018/08/31Program 2: Object oriented style to print DateTime.<?php// Declare DateTime object.$date = new DateTime();// date_date_set() function$date->setDate(2018, 8, 31);// Print the date in a formatecho $date->format(\'Y/m/d\');?>Output:  2018/08/31Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | idate() Function","The idate() function is an inbuilt function in PHP which is used to format a local time/date as an integer. The $format and $timestamp are sent as parameters to the idate() function and it returns an integer formatted according to the specified format using the given timestamp. Unlike the function date(), idate() accepts just one char in the format parameter.Syntax:int idate( $format, $timestamp )Parameters: This function accepts two parameters as mentioned above and described below:$format: It is a mandatory parameter which specifies the format of the result. The format parameter can have the following values:B – Swatch Beat/Internet Timed – Day of the monthh – Hour (12 hour format)H – Hour (24 hour format)i – MinutesI – returns 1 if DST (daylight saving time) is activated, 0 otherwiseL – returns 1 for leap year, 0 otherwisem – Month numbers – Secondst – Days in current monthU – Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)w – Day of the week (Sunday=0)W – ISO-8601 week number of year (week starts on Monday)y – Year (1 or 2 digits)Y – Year (4 digits)z – Day of the yearZ – Timezone offset in seconds$timestamp: It is an optional parameter which specifies a Unix timestamp that represents the date/time to be formatted.Return Value: It returns an integer value according to the specified format using the given timestamp.Exceptions:The idate() function throws a E_NOTICE on every call to a date/time if the time zone is not valid.The idate() function throws a E_STRICT or E_WARNING message if using the system settings or the TZ environment variable.Below programs illustrate the idate() function in PHP:Program 1:<?php// Formatting local date/time as Yearecho idate(\"Y\") . \"<br>\";// Formatting local date/time as Hour(24 hr format)echo idate(\"H\") . \"<br>\";// Formatting local date/time as Minutesecho idate(\"i\") . \"<br>\";// Formatting local date/time as day of the yearecho idate(\"z\") . \"<br>\";?>Output:  20181122238Program 2:<?php// Parsing English textual datetime description into a Unix timestamp$timestamp = strtotime(\'24th August 2018\');// Formatting local date/time as Yearecho idate(\'Y\', $timestamp);?>Output:  2018Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_get_last_errors() Function","The date_get_last_errors() function is an inbuilt function in PHP which is used to returns the warnings and errors. This function parse a date/time string and returns an array of warnings and errors.Syntax:Procedural style:array date_get_last_errors( void )Object oriented style:array DateTime::getLastErrors( void )Parameters: This function does not accept any parameter.Return Value: This function returns an array containing information about warnings and errors.Below programs illustrate the date_get_last_errors() function in PHP:Program 1:<?php$date = date_create();print_r(date_get_last_errors());?>Output:  Array  (      [warning_count] => 0      [warnings] => Array          (          )        [error_count] => 0      [errors] => Array          (          )    )Program 2:<?phptry {    $date = new DateTime(\'vgdgh\');}catch (Exception $e) {    // For demonstration purposes only...    print_r(DateTime::getLastErrors());}?>Output:  Array  (      [warning_count] => 0      [warnings] => Array          (          )        [error_count] => 1      [errors] => Array          (              [0] => The timezone could not be found in the database          )    )Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_offset_get() Function","The date_offset_get() function is an inbuilt function in PHP which is used to returns the timezone offset. This function returns the timezone offset in seconds from UTC (Universal Time Coordinated) on success or FALSE on failure.Syntax:Procedural Style:int date_offset_get( $object )Object Oriented Style:int DateTime::getOffset( void )  int DateTimeImmutable::getOffset( void )  int DateTimeInterface::getOffset( void )Parameters: This function accepts single parameter $object which is mandatory in procedural style. The DateTime object returned by date_create() function. But in case of object oriented style no parameter required.Return Value: This function returns the timezone offset in seconds from UTC(Universal Time Coordinated) on success or FALSE on failure.Below programs illustrate the date_offset_get() function in PHP:Program 1:<?php$date1 = date_create(\'2018-09-12\', timezone_open(\'Asia/Kolkata\'));$date2 = date_create(\'20018-09-18\', timezone_open(\'Asia/Singapore\'));echo date_offset_get($date1) . \"\\n\";echo date_offset_get($date2) . \"\\n\";?>Output:  19800  28800Program 2:<?php$date1 = new DateTime(\'2018-09-12\', new DateTimeZone(\'Asia/Kolkata\'));$date2 = new DateTimeImmutable(\'2018-09-18\', new DateTimeZone(\'Asia/Singapore\'));echo $date1->getOffset() . \"\\n\";echo $date2->getOffset() . \"\\n\";?>Output:  19800  28800Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_isodate_set() Function","The date_isodate_set() function is an inbuilt function in PHP which is used to sets the ISO (International Organization for Standardization ) date. This function set the date according to the ISO 8601 standard, using weeks and day offsets rather than specific dates.Syntax:Procedural style:date_isodate_set ( $object, $year, $week, $day )Object oriented style:DateTime::setISODate ( $year, $week, $day )Parameters: This function accepts four parameters as mentioned above and described below:$object: This parameter is used in procedural style only. This parameter is created by date_create() function. The function modifies this object.$year: This parameter is used to set year of the date.$week:This parameter set the Week of the date.$day: This parameter set offset from the first day of week.Return Value: This function returns the DateTime object for method chaining on success or False on failure.Below programs illustrate the date_isodate_set() function in PHP:Program 1:<?php$date = date_create();date_isodate_set($date, 2018, 9);echo date_format($date, \'Y-m-d\') . \"\\n\";date_isodate_set($date, 2018, 8, 17);echo date_format($date, \'Y-m-d\') . \"\\n\";date_isodate_set($date, 2018, 12, 23);echo date_format($date, \'Y-m-d\') . \"\\n\";date_isodate_set($date, 2015, 8, 24);echo date_format($date, \'Y-m-d\');?>Output:  2018-02-26  2018-03-07  2018-04-10  2015-03-11Program 2:<?php$date = new DateTime();$date->setISODate(12, 05, 2018);echo $date->format(\'d-m-Y\') . \"\\n\";$date->setISODate(2018, 2, 27);echo $date->format(\'Y-m-d\') . \"\\n\";?>Output:  08-08-0017  2018-02-03Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_sunrise() Function","The date_sunrise() is an inbuilt function in PHP which is used to find the sunrise time for a specified day and location. This function returns the time of the sunrise, in the specified format, on success. FALSE on failure.Syntax:date_sunrise ( $timestamp, $format, $latitude, $longitude, $zenith, $gmtoffset )Parameters: The date_sunrise() function accepts four parameters as mentioned above and described below:$timestamp: It is a mandatory parameter which specifies the timestamp of the day from which the sunrise time is taken.$format: It is an optional parameter which specifies format to return the result.SUNFUNCS_RET_STRING: Returns a string. e.g. 16:46 (by default)SUNFUNCS_RET_DOUBLE: Returns a float. e.g. 16.78243132SUNFUNCS_RET_TIMESTAMP: Returns the result as integer (timestamp) e.g. 1095034606.$latitude: It is an Optional parameter which specifies the latitude of the location. By default, it set as North. To specify a value for South, pass in a negative value.$longitude: It is an Optional parameter which specifies the longitude of the location. By defaults it set as East. To modify a value for West, pass in a negative value.$zenith: It is an Optional parameter. The is the angle between the center of the sun and a line perpendicular to earth’s surface. By default it is date.sunrise_zenith.$gmtoffset: It is Optional parameter and used to specifies the difference between GMT and local time in hours.Return Value: It returns the time of sunrise, in the specified format, on success. FALSE on failure.Exceptions: This function generates E_NOTICE error if date/time function is invalid and E_STRICT or E_WARNING if using the system setting or the TZ environment variable.Below programs illustrate the date_sunrise() function.Program 1:<?php// PHP program to show sunrise time// of New delhi india for current day// Longitude and latitude of Delhi India// 28.6139° N, 77.2090° E// GMT(Greenwich Mean Time) +5.30// Zenith ~= 90echo date(\"D M d Y\");echo(\"\\nsunrise time: \");echo(date_sunrise(time(), SUNFUNCS_RET_STRING,                  28.6139, 77.2090, 90, 5.30));?>Output:  Tue Jun 26 2018  sunrise time: 05:16Program 2:<?php// PHP program to show sunrise time// of GFG Noida for a Current day// Longitude and latitude of GeeksforGeeks Noida// 28°30\'04.0\"N 77°24\'36.0\"E// GMT(Greenwich Mean Time) +5.30// Zenith ~= 90echo date(\"D M d Y\");echo(\"\\nsunrise time: \");echo(date_sunrise(time(), SUNFUNCS_RET_STRING,              28.501120, 77.409989, 90, 5.30));?>Output:  Tue Jun 26 2018  sunrise time: 05:15");create(getIdByTitle(this.context,"Functions"),"PHP | date_sun_info() Function","The date_sun_info() is an inbuilt function in PHP which is used to find the information about sunset/sunrise and twilight begin/end for a specified day and location.Syntax:array date_sun_info($timestamp, $latitude, $longitude)Parameters: This function accepts three parameters as mentioned above and described below:$timestamp: It is a mandatory parameter which specifies the timestamp of the day from which the sunrise time is taken.$latitude: It is an mandatory parameter which specifies the latitude of the location. By default, it set as North. To specify a value for South, pass in a negative value.$longitude: It is an mandatory parameter which specifies the longitude of the location. By defaults, it set as East. To modify a value for West, pass in a negative value.Return Value: It returns an array containing information about sunset/sunrise and twilight begin/end, for a specified day and location and returns False on failure.Exceptions: In PHP versions 5.2.2 the order of parameters $latitude and $longitude has been swapped.Below programs illustrate the date_sun_info() function.Program 1:<?php// PHP program to print information// about sunset/sunrise and twilight// begin/end for sprecified location// New Delhi India/* ********New Delhi********Latitude = 28.6139° NLongitude = 77.2090° E*/$arr =  date_sun_info(strtotime(\"June-26-2018\"),                             28.61, 77.2090 );foreach ($arr as $key => $val) {    echo \"$key: \" . date(\"H:i:s\", $val) . \"\\n\";}?>Output:  sunrise: 23:55:58  sunset: 13:53:02  transit: 06:54:30  civil_twilight_begin: 23:29:08  civil_twilight_end: 14:19:52  nautical_twilight_begin: 22:56:35  nautical_twilight_end: 14:52:25  astronomical_twilight_begin: 22:21:59  astronomical_twilight_end: 15:27:01Program 2:<?php// PHP program to print information// about sunset/sunrise and twilight// begin/end for sprecified location// USA Washington, D.C.// Latitude = 38.9072° N// Longitude = 77.0369° W$arr =  date_sun_info(strtotime(\"June-26-2018\"),                             38.9072, 77.0369 );foreach ($arr as $key => $val) {    echo \"$key: \" . date(\"H:i:s\", $val) . \"\\n\";}?>Output:  sunrise: 23:28:58  sunset: 14:21:24  transit: 06:55:11  civil_twilight_begin: 22:57:03  civil_twilight_end: 14:53:20  nautical_twilight_begin: 22:16:45  nautical_twilight_end: 15:33:38  astronomical_twilight_begin: 21:30:31  astronomical_twilight_end: 16:19:51Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_sunset() Function","The date_sunset() is an inbuilt function in PHP which is used to find the sunset time for a specified day and location.Syntax:date_sunset ( $timestamp, $format, $latitude, $longitude, $zenith, $gmtoffset )Parameters: This function accepts four parameters as mentioned above and described below.$timestamp: It is a required parameter which specifies the timestamp of the day from which the sunset time is taken.$format: It is an optional parameter which specifies the format to return the result. Return format are given below:SUNFUNCS_RET_STRING: Returns a string. e.g. 16:46 (by default)SUNFUNCS_RET_DOUBLE: Returns a float. e.g. 16.12345SUNFUNCS_RET_TIMESTAMP: Returns the result as integer (timestamp). e.g. 987123569$latitude: It is an optional parameter which specifies the latitude of the location. By default, it set as North. To specify a value for South, pass in a negative value.$longitude: It is an optional parameter which specifies the longitude of the location. By default, it set as East. To modify a value for West, pass in a negative value.$zenith: It is an Optional parameter. The is the angle between the center of the sun and a line perpendicular to earth’s surface, by default it is date.sunset_zenith.$gmtoffset: It is optional parameter and used to specifies the difference between GMT and local time in hours.Return Value: It returns the time of the sunset, in the specified format, on success. FALSE on failure.Exceptions: This function generates E_NOTICE error if date/time function is invalid and E_STRICT or E_WARNING if using the system setting or the TZ environment variable.Below programs illustrate the date_sunset() function in PHP.Program 1:<?php// PHP program to show sunset time// of New delhi india for current day// Longitude and latitude of Delhi India// 28.6139° N, 77.2090° E// GMT(Greenwich Mean Time) +5.30// Zenith ~= 90echo date(\"D M d Y\");echo(\"\\nSunset time: \");echo(date_sunset(time(), SUNFUNCS_RET_STRING,                 28.6139, 77.2090, 90, 5.30));?>Output:  Wed Jun 27 2018  Sunset time: 19:07Program 2:<?php// PHP program to show sunset time// of GFG Noida for a Current day// Longitude and latitude of GeeksforGeeks// Noida 28°30\'04.0\"N 77°24\'36.0\"E// GMT(Greenwich Mean Time) +5.30// Zenith ~= 90echo date(\"D M d Y\");echo(\"\\nSunset time: \");echo(date_sunset(time(), SUNFUNCS_RET_STRING,              28.501120, 77.409989, 90, 5.30));?>Output:  Wed Jun 27 2018  Sunset time: 19:06Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_create(), date_format(), add_date() Functions","There is some point in time when we need to add a number of days, months, years, hours, minutes and seconds to Date and time. PHP serves us with several built-in functions to do this. Some built-in functions that we will discuss here are date_create(), date_format() and date_add().date_create() FunctionThis function is used to create a DateTime object by using a date/time string and timezone. The default value of the date/time string is current date/time.Syntax:  DateTime date_create(time, timezone);Parameters:This function accepts two parameters:time : (optional) Specifies a date/time string. NULL or default valueindicates the current date/time. You may refer to this link for supported date and time formats in PHP.timezone : (optional) Time zone of the time.Return Value: This function returns a new DateTime object which specifies a date.date_format() FunctionThe date_format() function formats a given date. The date is supplied as DateTime instance which is generally returned by the date_create() function and format is a string according to which we want to format the date.Syntax:  string date_format(object, format);Parameters : This function accepts two parameters, all of this which are mandatory to be supplied.object : Specifies a DateTime object returned by date_create()format : Specifies the format for the date. It accepts the formats that is supported by date() function in PHP. Example – H(24-hr Format), h(12-hr Format), i(minutes:00 to 59), s(seconds: 00 to 59) etc.Return Value: The date_format() function returns a string which represents the date formatted according to the specified format on successful formatting otherwise it returns false on faliure.<?php// using date_create() function to create// DateTime object$date=date_create(\"2018-03-15\");// using date_format() function to format dateecho date_format($date, \"Y/m/d H:i:s\");?>Output:  2018/03/15 00:00:00date_add() FunctionThe date_add() function is used to add days, months, years, hours, minutes and seconds to a Date. The Date is supplied as a DateTime object to the date_add() function and the interval which we want to add to our Date is supplied as a DateInterval object.Syntax:  DateTime date_add(object, interval);Parameters:This function accepts three parameters, all of this which are mandatory to be supplied.Object : Specifies a DateTime object returned by date_create(). This function returns a new DateTime object.Interval : Specifies a DateInterval object i.e it stores either a fixed amount of time (in years, months, days, hours etc) or a relative time string in the format that DateTime’s constructor supports.Return Value : This function returns a DateTime object on success else FALSE on failure.Below programs illustrate the date_add() function in PHP:Example-1<?php// PHP program to add 40 days in date$date=date_create(\"2018-12-10\");date_add($date, date_interval_create_from_date_string(\"40 days\"));echo date_format($date, \"Y-m-d\");?>Output:  2019-01-19Example-2<?php//PHP program to add 1 year, 10 mins, 23 secs in date$date=date_create(\"2018-12-10\");date_add($date, date_interval_create_from_date_string(\"1 year                                      + 10 mins + 23 secs\"));echo date_format($date, \"Y-m-d H:i:s\");?>Output:  2019-12-10 00:10:23Note : Using ‘+’ operator we can add more to date and time.:");create(getIdByTitle(this.context,"Functions"),"PHP | date_parse_from_format() Function","The date_parse_from_format() is an inbuilt function in PHP which is used to get information about given date formatted according to the specified format. The date_parse_from_format() function accepts two parameters and returns associative array with detailed information about given date.Syntax:array date_parse_from_format ( $format, $date )Parameters: This function accepts two parameters as mentioned above and described below:$format: It is a required parameters which is used to specify the date format. The following parameters string are used in format.Day:d and j: It represents the day of the month, 2 digits with or without leading zeros.D and l: A textual representation of a day.S: English ordinal suffix for the day of the month, 2 characters. It’s ignored while processing.z: The day of the year (starting from 0)Month:F and M: A textual representation of a month, such as January or Septm and n: Numeric representation of a month, with or without leading zerosYear:Y: A full numeric representation of a year, 4 digitsy: A two digit representation of a year (which is assumed to be in the range 1970-2069, inclusive)Time:a and A: Ante meridiem and Post meridiemg and h: 12-hour format of an hour with or without leading zeroG and H: 24-hour format of an hour with or without leading zerosi: Minutes with leading zeross: Seconds, with leading zerosu: Microseconds (up to six digits)Timezone:e, O, P and T: Timezone identifier, or difference to UTC in hours, or difference to UTC with colon between hours and minutes, or timezone abbreviationFull Date/Time:U: Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)Whitespace and Separators:(space): One space or one tab#: One of the following separation symbol: ;, :, /, .,,, -, ( or );, :, /, .,,, -, ( or ): The specified character.?: A random byte*: Random bytes until the next separator or digit!: Resets all fields (year, month, day, hour, minute, second, fraction and timezone information) to the Unix Epoch|: Resets all fields (year, month, day, hour, minute, second, fraction and timezone information) to the Unix Epoch if they have not been parsed yet+: If this format specifier is present, trailing data in the string will not cause an error, but a warning instead$date: This is the mandatory parameter which is used to representing the date.Return Value: This function returns an array containing the detail description about date.Below programs illustrate the date_parse_from_format() function in PHP.<?php// Declare and initialize date variable.$date = \"0.9.2018 5:00+01:00\";// Function is used to return the detail about date.print_r(date_parse_from_format(\"j.n.Y H:iP\", $date));?>Output:  Array  (      [year] => 2018      [month] => 9      [day] => 0      [hour] => 5      [minute] => 0      [second] => 0      [fraction] =>       [warning_count] => 1      [warnings] => Array          (              [19] => The parsed date was invalid          )        [error_count] => 0      [errors] => Array          (          )        [is_localtime] => 1      [zone_type] => 1      [zone] => -60      [is_dst] =>   )Program 2:<?php// Declare and initialize date variable.$date = \"2015.0.9\";// Function is used to return the detail about date.print_r(date_parse_from_format(\"Y.z.n\", $date));?>Output:  Array  (      [year] => 2015      [month] => 9      [day] => 1      [hour] =>       [minute] =>       [second] =>       [fraction] =>       [warning_count] => 0      [warnings] => Array          (          )        [error_count] => 0      [errors] => Array          (          )        [is_localtime] =>   )Related Article:");create(getIdByTitle(this.context,"Functions"),"PHP | cal_days_in_month()","cal_days_in_month() is an inbuilt function which returns the number of days in a particular month of a specified calendar. We have to pass calendar type, month and year as the parameter and the function will return the number of days in that month of the specified year of the calendar.Syntax  int cal_days_in_month ( int $calendar, int $month, int $year )Parameters :Calender : Calendar type to use for calculation. This value is required.Month : Month in the selected calendar. This value is required.Year : Year in the selected calendar. This value is required too.Below is the the list of possible values that ‘calendar’ parameter can hold :CAL_GREGORIANCAL_JULIANCAL_JEWISHCAL_FRENCHCAL_NUM_CALSCAL_DOW_DAYNOCAL_DOW_SHORTCAL_DOW_LONGCAL_MONTH_GREGORIAN_SHORTCAL_MONTH_GREGORIAN_LONGCAL_MONTH_JULIAN_SHORTCAL_MONTH_JULIAN_LONGCAL_MONTH_JEWISHCAL_MONTH_FRENCHCAL_EASTER_DEFAULTCAL_EASTER_ROMANCAL_EASTER_ALWAYS_GREGORIANCAL_EASTER_ALWAYS_JULIANCAL_JEWISH_ADD_ALAFIM_GERESHCAL_JEWISH_ADD_ALAFIMCAL_JEWISH_ADD_GERESHAYIMReturn Value : Returns the number of days in the month of the year for the specified calendar.<!DOCTYPE html><html><body><?php$d = cal_days_in_month(CAL_GREGORIAN, 2, 1965); // Calendar Type - Gregorianecho \"There was $d days in February 1965.<br>\";$d = cal_days_in_month(CAL_GREGORIAN, 2, 2004); // Calendar Type - Gregorianecho \"There was $d days in February 2004.\";?></body></html>Output :  There was 28 days in February 1965.  There was 29 days in February 2004.");create(getIdByTitle(this.context,"Functions"),"PHP | cal_days_in_month( ) Function","The cal_days_in_month( ) function in PHP is an inbuilt function which is used to return the number of days in a month for a specific year and according to a specific calendar such as Gregorian calendar, French calendar, Jewish calendar etc.The cal_days_in_month() function takes three parameters which are the calendar, month and year and returns the number of days according to a specified month, year and calendar.Syntax:cal_days_in_month($calendar, $month, $year)Parameters: The cal_days_in_month() function in PHP accepts three parameters as described below:$calendar: It specifies the calendar you want to consider such as French, Gregorian, Jewish etc.$month: It specifies the month in the calendar you have opted.$year: It specifies the year in the calendar you have opted.Return Value: It returns the number of days according to a specified month, year and calendar.Errors And Exception:The cal_days-in_month function gives wrong output when the date used is before 1550.The cal_days-in_month function gives wrong output for dates which were before the discovery of leap year.Examples:  Input: cal_days_in_month(CAL_JEWISH, 2, 1966);  Output: 29  Explanation: February 1966 had 29 days.    Input: cal_days_in_month(CAL_GREGORIAN, 2, 2004);  Output: 29  Explanation: February 2004 had 29 daysBelow programs illustrate the cal_days_in_month() function:Program 1:<?php// Using cal_days_in_month() function to// know the number of days in february, 1966$days = cal_days_in_month(CAL_JEWISH, 2, 1966);echo \"February 1966 had $days days.<br>\";?>Output:February 1966 had 29 days.Program 2:<?php// Using cal_days_in_month() function to// know the number of days in february, 2004$days = cal_days_in_month(CAL_GREGORIAN, 2, 2004);echo \"February 2004 had $days days\";?>Output:February 2004 had 29 days");create(getIdByTitle(this.context,"Functions"),"PHP | cal_info( ) Function","The cal_info() function in PHP is an inbuilt function which is used to return information about a specified calendar. The cal_info() function returns an array which contains the calname, month, abbrevmonth and maxdaysinmonth and calsymbol.It takes the calendar as a parameter and returns the information respective to the specified calendar.Syntax:cal_info($calendar)Parameters: The cal_info() function in PHP accepts only one parameter $calender. This parameter specifies a number which indicates the calendar you want to know about. Below is the list of valid numbers which can be used as value for this parameter.0 = CAL_GREGORIAN1 = CAL_JULIAN2 = CAL_JEWISH3 = CAL_FRENCHReturn Value: It returns information about a specified calendar.Errors And Exception:If no calendar is specified in the parameters, the cal_info() function returns information about all the calendars.To specify a calendar as a parameter for the cal_info() function, one needs to mention its respective numerical value instead of the calendar name such as “0” for Gregorian calendar.Below programs illustrate the cal_info() function.Program 1:<?php// displaying information// regarding gregorian calendarprint_r (cal_info(0));?>Output:  Array  (      [months] => Array          (              [1] => January              [2] => February              [3] => March              [4] => April              [5] => May              [6] => June              [7] => July              [8] => August              [9] => September              [10] => October              [11] => November              [12] => December          )        [abbrevmonths] => Array          (              [1] => Jan              [2] => Feb              [3] => Mar              [4] => Apr              [5] => May              [6] => Jun              [7] => Jul              [8] => Aug              [9] => Sep              [10] => Oct              [11] => Nov              [12] => Dec          )        [maxdaysinmonth] => 31      [calname] => Gregorian      [calsymbol] => CAL_GREGORIAN  )Program 2:<?php// displaying information// regarding jewish calendarprint_r (cal_info(2));?>Output:  Array  (      [months] => Array          (              [1] => Tishri              [2] => Heshvan              [3] => Kislev              [4] => Tevet              [5] => Shevat              [6] => Adar I              [7] => Adar II              [8] => Nisan              [9] => Iyyar              [10] => Sivan              [11] => Tammuz              [12] => Av              [13] => Elul          )        [abbrevmonths] => Array          (              [1] => Tishri              [2] => Heshvan              [3] => Kislev              [4] => Tevet              [5] => Shevat              [6] => Adar I              [7] => Adar II              [8] => Nisan              [9] => Iyyar              [10] => Sivan              [11] => Tammuz              [12] => Av              [13] => Elul          )        [maxdaysinmonth] => 30      [calname] => Jewish      [calsymbol] => CAL_JEWISH  )");create(getIdByTitle(this.context,"Functions"),"PHP | (Include and Require)","As we know PHP allows us to create various functions and various elements that are used multiple times in multiple pages. Scripting the same function in multiple pages is a task of great effort and would consume time. This can be avoided if we follow and use the concept of file inclusion which helps us to include various files including text or codes into a single program which saves the effort of writing the full function or code multiple times. This also provides another advantage. If we want to change any code then instead of editing it in all the files, we just need to edit the source file and all codes will be automatically changed. There are two functions which help us to include files:include() functionrequire() functionThe include() functionThis function is used to copy all the contents of a file called within the function, text wise into a file from which it is called. This happens before the server exceutes the code. Example:Lets have a file called even.php with the following code:<?php// file to be includedecho \"Hello GeeksforGeeks\"?>Now let us try to include this file into another php file index.php file. We will see that the contents of both the file are shown.<?php    include(\"even.php\");    echo \"<br>Above File is Included\"?>Output:The require() functionThe require() function performs same as the include() function. It also takes the file that is required and copies the whole code into the file from where the require() function is called. There is a single difference between the include() and require() function which we will see following this example:Lets have a file called even.php with the following code:<?php// file to be includedecho \"Hello GeeksforGeeks\"?>Now if we try to include this file using require() function this file into a web page we need to use a index.php file. We will see that the contents of both the file are shown.<?php    require(\"even.php\");    echo \"<br>Above File is Required\"?>Output:include() VS require()The both function acts as same and produce same results, but if by any chance a fatal error is arised, then the difference comes into the surface. Let’s look at the following code:<?php    include(\"even.php\");    echo \"<br>Above File is Included\"?>Now if we don’t have a file named even.php, then in the case of the include(), following output will be shown with warnings about missing file, but atleast the output will be shown from the index.php file:In the case of the require(), if the file PHP file is missing, a fatal error will rise and no output is shown and the execution halts.This is the only difference. This also shows that require() function is better than include() function since the script should not continue executing if files are missing or such error is generated.");create(getIdByTitle(this.context,"Functions"),"PHP | Imploding and Exploding","Imploding and Exploding are couple of important functions of PHP that can be applied on strings or arrays. PHP provides us with two important builtin functions implode() and explode() to perform these operations. As the name suggests Implode/implode() method joins array elements with a string segment that works as a glue and similarly Explode/explode() method does the exact opposite i.e. given a string and a delimiter it creates an array of strings separating with the help of the delimiter.implode() methodSyntax:  string implode (glue ,pieces)or,  string implode (pieces)Parameters:The function accepts two parameters as described below.glue (optional): This parameter expects a string segment that is used as the glue to join the pieces of the array. This is an optional parameter with default value being an empty string.pieces: This parameter expects an array whose elements are to be joined together to construct the final imploded string.Return Type: This function traverses the input array and concatenates each element with one glue segment separating them to construct and return the final imploded string.Below program illustrates the working of implode() in PHP:<?php// PHP code to illustrate the working of implode()$array1 = array(\'www\', \'geeksforgeeks\', \'org\');echo(implode(\'.\',$array1).\"<br>\");$array2 = array(\'H\', \'E\', \'L\', \'L\', \'O\');echo(implode($array2));?>Output:  www.geeksforgeeks.org  HELLOYou may refer to the article on PHP | implode() function to learn about implode() in details.explode() methodSyntax:  array explode (delimiter, string, limit)Parameters:The function accepts three parameters as described below.delimiter: This parameter expects a string segment that can be used as the separator. If the delimiter itself is not present in the string then the resultant will be an array containing the string as its sole element.string: This parameter expects a string which is to be exploded.limit: This parameter expects an integer (both positive and negative). This is an optional parameter with default value of PHP_INT_MAX. The limit refers to the maximum number of divisions that are to be made on the input string.Return Type: This function returns an array of strings containing the separated segments.Below program illustrates the working of explode() in PHP:<?php// PHP code to illustrate the working of explode()$str1 = \'1,2,3,4,5\';$arr = explode(\',\',$str1);foreach($arr as $i)echo($i.\'<br>\');?>Output:  1  2  3  4  5You may refer to the article on PHP | explode() function to learn about explode() in details.Important Points to Note:The implode() function implodes the elements of an array and returns the resultant string.Although not advised, the implode() function can take the parameters irrespective of their orderThe is an alias of implode() function.");create(getIdByTitle(this.context,"Functions"),"PHP | var_dump() Function","Debugging is as important as coding in the field of development. There might occur a case when the developer needs to check information of a variable such as if a function returns an array it is best to check the return type and the contents of the returned value. A developer may echo all the contents but PHP itself provides a method to do the same and as well as checks the datatype.The var_dump() function is used to dump information about a variable. This function displays structured information such as type and value of the given variable. Arrays and objects are explored recursively with values indented to show structure. This function is also effective with expressions.Syntax:  void var_dump ($expsn)Parameters: The function takes a single argument $expsn that may be one single variable or an expression containing several space separated variables of any type.Return Type: This function has no return type.Examples:  Input :  $expsn = 2.7;     Output : float(2.7)    Input : $expsn = array(1, 2, array(3, 4, 5));  Output : array(3) {               [0]=> int(1)               [1]=> int(2)               [2]=> array(3) {                       [0]=> int(3)                       [1]=> int(4)                       [2]=> int(5)                }             }Below program illustrates the working of var_dump() in PHP:<?php// PHP code to illustrate the working//  of var_dump() Functionvar_dump(var_dump(2, 2.1, TRUE, array(1, 2, 3, 4)));?>Output:  int(2)   float(2.1)   bool(true)   array(4) {     [0]=> int(1)     [1]=> int(2)     [2]=> int(3)     [3]=> int(4)   }  NULLImportant points to note:All properties of objects whether public, private or protected will be returned in the output unless the object implements a __debugInfo() method.");create(getIdByTitle(this.context,"Functions"),"PHP | Sending mails using mail() function","PHP is a server side scripting language that is enriched with various utilities required. Mailing is one of the server side utilities that is required in most of the web servers today. Mailing is used for advertisement, account recovery, subscription etc.In order to send mails in PHP, one can use the mail() method.Syntax:  bool mail(to , subject , message , additional_headers , additional_parameters)Parameters: The function has two required parameters and one optional parameter as described below:to: Specifies the email id of the recipient(s). Multiple email ids can be passed using commassubject: Specifies the subject of the mail.message: Specifies the message to be sent.additional-headers(Optional): This is an optional parameter that can create multiple header elements such as From (Specifies the sender), CC (Specifies the CC/Carbon Copy recipients), BCC (Specifies the BCC/Blind Carbon Copy Recipients. Note: In order to add multiple header parameters one must use ‘\\r\\n’.additional-parameters(Optional): This is another optional parameter and can be passed as an extension to the additional headers. This can specify a set of flags that are used as the sendmail_path configuration settings.Return Type: This method returns TRUE if mail was sent successfully and FALSE on Failure.Examples:Sending a Simple Mail in PHP<?php  $to = \"recipient@example.com\";  $sub = \"Generic Mail\";  $msg=\"Hello Geek! This is a generic email.\";  if (mail($to,$sub,$msg))      echo \"Your Mail is sent successfully.\";  else      echo \"Your Mail is not sent. Try Again.\";?>Output :  Your Mail is sent successfully.Sending a Mail with Additional Options<?php  $to = \"recipient@example.com\";  $sub = \"Generic Mail\";  $msg = \"Hello Geek! This is a generic email.\";  $headers = \'From: sender@example.com\' . \"\\r\\n\" .\'CC: another@example.com\';  if(mail($to,$sub,$msg,$headers))      echo \"Your Mail is sent successfully.\";  else      echo \"Your Mail is not sent. Try Again.\";?>Output :  Your Mail is sent successfully.Summary:Using mail() method one can send various types of mails such as standards, html mail.The mail() method opens the SMTP socket, attempts to send the mail, closes the socket thus is a secure option.mail() method should not be used for bulk mailing as it is not very cost-efficient.The mail() method only checks for parameter or network failure, thus a success in the mail() method doesn’t guarantee that the intended person will receive the mail.");create(getIdByTitle(this.context,"Functions"),"PHP | rand() function","The rand() is an inbuilt-function in PHP used to generate a random number.Syntax:  rand()   The rand() function is use to generate a random integer.To generate a random integer in some range:Syntax  rand(min,max)  min specifies the lowest value that will be returned.  max specifies the highest value to be returned.    This function will generate a random value in the range [min,max]NoteIf the min and max value is not specified, default is 0 and getrandmax() respectively.Examplerand() will return a random integer between 0 and getrandmax().rand(15,35) will return a random integer in the range [15,35].<?php    // Generating a random number    $randomNumber = rand();    // Print    print_r($randomNumber);    // New Line    print_r(\"\\n\");    // Generating a random number in a    // Specified range.    $randomNumber = rand(15,35);    // Print    print_r($randomNumber);?>Note :The output of the code may change every time it is run. So the output may not match with the specified output.Output:  1257424548  28");create(getIdByTitle(this.context,"Functions"),"PHP | is_link( ) Function","The is_link() function in PHP used to check whether the specified file is a symbolic link or not. The path to the file is sent as a parameter to the is_link() function and it returns TRUE if the filename exists and is a symbolic link, otherwise it returns FALSE.Syntax:is_link(file)Parameters Used:The is_link() function in PHP accepts only one parameter.file : It is a mandatory parameter which specifies the path of the file.Return Values:It returns TRUE if the filename exists and is a symbolic link, otherwise it returns FALSE.Exceptions:An E_WARNING is emitted on failure.The result of this function are cached and therefore the clearstatcache() function is used to clear the cache.Examples:  Input : $mylink = \"gfg\";          if(is_link($mylink))          {           echo (\"$mylink is a symbolic link!\");          }          else          {           echo (\"$mylink is not a symbolic link!\");          }    Output : gfg is a symbolic link!    Input : $mylink = \"gfg\";          if (is_link($mylink))           {           echo (\"$mylink is a symbolic link!\");           echo \"Reading the link :\\n\";           echo(readlink($mylink));          }          else           {           symlink(\"gfg\", $mylink);          }  Output : gfg is a symbolic link!           Reading the link :           A portal for geeks!Below programs illustrate the is_link() function.Program 1<?php$myfile = \"gfg\";// checking whether the file is a symbolic link or notif (is_link($mylink)) {    echo (\"$mylink is a symbolic link!\");} else {    echo (\"$mylink is not a symbolic link!\");}?>Output:  gfg is a symbolic link!Program 2<?php$myfile = \"gfg\";// checking whether the file// is a symbolic link or notif (is_link($mylink)) {    echo (\"$mylink is a symbolic link!\");    // Reading the link    echo \"Reading the link :\\n\";    echo (readlink($mylink));}// creating a symbolic link of the// file if it doesn\'t existelse {    symlink(\"gfg\", $mylink);}?>Output:  gfg is a symbolic link!  Reading the link :  A portal for geeks!");create(getIdByTitle(this.context,"Functions"),"PHP | expm1() Function","Euler’s Number or commonly known as e is a very popular irrational number which approximates to 2.718281828 and is one of the most important mathematical constants. e is the base of the Natural system of logarithms. The exponential values are broadly used in many occasions such as Compound Interests, Bernoulli trials, Normal Distribution, Calculus and many more.The expm1() function is an inbuilt function in PHP and is used to calculate e raised to the power of the given argument minus one.Syntax:float expm1($power)Parameter: This function takes a single parameter $power which defines the power e has to be raised to.Return Value: This function returns a floating point value which is the value of e raised to the $power of the given argument -1. That is, it will return (e$power-1).Examples:  Input : $power = 1   Output : (e1-1) = 1.718281828459    Input : $power = 0   Output : (e0-1) = 0Below programs illustrate the expm1() function in PHP:Program 1: PHP program to demonsrate the expm1() function.<?php// PHP program to demonsrate the expm1() function$n1 = 1;$n2 = 0;//prints value of e^1 - 1echo \"e^\", $n1, \"-1 = \", expm1($n1), \"\\n\";//prints value of e^0 - 1echo \"e^\", $n2, \"-1 = \", expm1($n2), \"\\n\";?>Output:  e^1-1 = 1.718281828459  e^0-1 = 0Program 2: PHP program to demonstrate the expm1() function using an array.<?php// PHP code to illustrate the working// of expm1() Function// input array$array = array(2, 3, 1, 5);// print all the e^x-1 value in the arraysforeach($array as $i)    echo \'e^\'.$i.\'-1 = \'.expm1($i).\"\\n\";?>Output:  e^2-1 = 6.3890560989307  e^3-1 = 19.085536923188  e^1-1 = 1.718281828459  e^5-1 = 147.41315910258");create(getIdByTitle(this.context,"Functions"),"PHP | rmdir( ) Function","The rmdir() function in PHP is an inbuilt function which is used to remove an empty directory. It is mandatory for the directory to be empty, and it must have the relevant permissions which are required to delete the directory.The directory to be deleted is sent as a parameter to the rmdir() function and it returns True on success or False on failure.Syntax:rmdir(dirname, context)Parameters Used:The rmdir() function in PHP accepts two parameters.dirname : It is a mandatory parameter which specifies the directory to be deleted.context : It is an optional parameter which specifies the behavior of the stream .Return Value:It returns True on success or False on failure.Errors And ExceptionThe rmdir() function generates an E_WARNING level error on failure.opendir() must be closed before using rmdir() function else it gives permission denied error.PHP checks whether the directory in which the script is operating has the same UID (owner) as the script that is being executed when it is in safe mode.Examples:  Input : mkdir(\'gfg\');          $dirname= \"gfg\";          rmdir($dirname);  Output : 1    Input : $dirname = \"gfg\";          if(rmdir($dirname))          {            echo (\"$dirname successfully removed\");          }          else          {            echo (\"$dirname couldn\'t be removed\");           }  Output : gfg successfully removedBelow programs illustrate the rmdir() function.Program 1<?php// creating a directory named gfgmkdir(\'gfg\');$dirname= \"gfg\";// removing directory using rmdir()rmdir($dirname);?>Output:1Program 2<?php// creating a directory named gfg $dirname = \"gfg\";// removing directory using rmdir()if(rmdir($dirname)){  echo (\"$dirname successfully removed\");}else{ echo ($dirname . \"couldn\'t be removed\");}?>Output:gfg successfully removed");create(getIdByTitle(this.context,"Functions"),"PHP | vprintf() function","The vprintf() function in PHP is an inbuilt function which is used to display array values as a formatted stringDisplay array values as a formatted string according to format it is work similar as printf() but accepts an array of arguments, in place of variables number of arguments. Returns the length of the outputted string on success.Syntax:vprintf (format, array_arguments)Parameters:format: it is required parameter it specifies how will the string formated.Possible format values:%% – Returns a percent sign%b – Binary number%d – Signed decimal number (negative, zero or positive)%u – Unsigned decimal number (equal to or greather than zero)%x – Hexadecimal number (lowercase letters)%X – Hexadecimal number (uppercase letters)%f – Floating-point number (local settings aware)%F – Floating-point number (not local settings aware)%o – Octal number%c – The character according to the ASCII value%s – String%e – Scientific notation using a lowercase (e.g. 1.2e+2)%g – shorter of %e and %f%E – Scientific notation using a uppercase (e.g. 1.2E+2)%G – shorter of %E and %farray_arguments array arguments here for which need to format.Program 1: This program will be showing uses of % b d u x X f F o formats using vprintf function.<?php$obj = new stdClass();$obj->val1 = 9;$obj->val2 = 10;$obj->val3 = 15;$obj->val4 = -1;echo \"using %% format: \";// below is using of vprintf function// for printing % formatvprintf(\'%% %% %% %%\', $obj);echo \"\\nusing %b format: \";// below is using of vprintf function// for format %b will print equivalent// binary numbervprintf(\'%b %b %b %b\', $obj);echo \"\\nusing %d format: \";// below is using of vprintf function// for  %d formatvprintf(\'%d %d %d %d\', $obj);echo \"\\nusing %u format: \";// below is using of vprintf function// for  % u (unsigned decimal) formatvprintf(\'%u %u %u %u\', $obj);echo \"\\nusing %x format: \";// below is using of vprintf function// for  %x  Hexadecimal number (lowercase letters) formatvprintf(\'%x %x %x %x\', $obj);echo \"\\nusing %X format: \";// below is using of vprintf function// for  %X  Hexadecimal number (uppercase letters) formatvprintf(\'%X %X %X %X\', $obj);echo \"\\nusing %f format: \";// below is using of vprintf function// for  %f  Floating-point number (local settings aware)vprintf(\'%f %f %f %f\', $obj);echo \"\\nusing %F format: \";// below is using of vprintf function// for  %F Floating-point number (not local settings aware)vprintf(\'%F %F %F %F\', $obj);echo \"\\nusing %o format: \";// below is using of vprintf function// for  %o octal numbervprintf(\'%o %o %o %o\', $obj);?>Output:  using %% format: % % % %  using %b format: 1001 1010 1111 1111111111111111111111111111111111111111111111111111111111111111  using %d format: 9 10 15 -1  using %u format: 9 10 15 18446744073709551615  using %x format: 9 a f ffffffffffffffff  using %X format: 9 A F FFFFFFFFFFFFFFFF  using %f format: 9.000000 10.000000 15.000000 -1.000000  using %F format: 9.000000 10.000000 15.000000 -1.000000  using %o format: 11 12 17 1777777777777777777777Program 2: This program will be showing uses of c and s formats using vprintf function.<?php$obj = new stdClass();$obj->val1 = 65;$obj->val2 = 66;$obj->val3 = 97;$obj->val4 = 98;echo \"using %c format: \";// below is using of vprintf function// for printing %c format will be print// ASCII charactervprintf(\'%c %c %c %c\', $obj);echo \"\\nusing %s format: \";// below is using of vprintf function// for format %s will print as stringvprintf(\'%s %s %s %s\', $obj);?>Output:  using %c format: A B a b  using %s format: 65 66 97 98Program 3: This program will be showing uses of e g E G formats using vprintf function.<?php$obj = new stdClass();$obj->val1 = 999999999;$obj->val2 = 145956566;$obj->val3 = 111111111;$obj->val4 = 100000000;echo \"using %e format: \";// below is using of vprintf function// for printing %e format will be print// Scientific notation (lowercase)vprintf(\'%e %e %e %e\', $obj);echo\"\\nusing %g format: \";// below is using of vprintf function// for format %g will be print// Shorter of %e and %fvprintf(\'%g %g %g %g\', $obj);echo \"\\nusing %E format: \";// below is using of vprintf function// for format %E will print// Scientific notation (uppercase)vprintf(\'%E %E %E %E\', $obj);echo \"\\nusing %G format: \";// below is using of vprintf function// for format %G will be print// Shorter of %E and %fvprintf(\'%G %G %G %G\', $obj);?>Output:  using %e format: 1.000000e+9 1.459566e+8 1.111111e+8 1.000000e+8  using %g format: 1.0e+9 1.45957e+8 1.11111e+8 1.0e+8  using %E format: 1.000000E+9 1.459566E+8 1.111111E+8 1.000000E+8  using %G format: 1.0E+9 1.45957E+8 1.11111E+8 1.0E+8Program 4: In this program, all four variable will be print respectively 10 20 30 40 space separated using vprintf function.<?php$obj = new stdClass();$obj->val1 = \'gfg 1\';$obj->val2 = \'gfg 2\';$obj->val3 = \'gfg 3\';$obj->val4 = \'gfg 4\';// below is using of vprintf functionvprintf(\'%-10s %-20s %-30s %-40s\', $obj);?>Output:  gfg 1      gfg 2                gfg 3                          gfg 4");create(getIdByTitle(this.context,"Functions"),"PHP | is_float() Function","is_float() is an inbuilt function in PHP. The is_float() function is used to find whether a variable is a float or not.Syntax: boolean  is_float($variable_name)Parameter: This function contains a single parameter as shown in above syntax and and described below$variable_name: the variable we want to check.Return value:It is a boolean function so returns TRUE when $variable_name is an integer, otherwise FALSE.Below example illustrates the working of the function is_float().Example 1::<?php// php code demonstrate working of is_float()$variable_name1 = 67.099;$variable_name2 = 32;$variable_name3 = \"abc\";$variable_name4 = FALSE;// $variable_name1 is float, gives TRUEif (is_float($variable_name1))    echo \"$variable_name1 is a float value. \\n\";else    echo \"$variable_name1 is not a float value. \\n\";// $variable_name2 is not float, gives FALSEif (is_float($variable_name2))    echo \"$variable_name2 is a float value. \\n\";else    echo \"$variable_name2 is not a float value. \\n\";// $variable_name3 is not float, gives FALSEif (is_float($variable_name3))    echo \"$variable_name3 is a float value. \\n\";else    echo \"$variable_name3 is not a float value. \\n\";// $variable_name4 is not float, gives FALSEif (is_float($variable_name4))    echo \"FALSE is a float value. \\n\";else    echo \"FALSE is not a float value. \\n\";?>Output:  67.099 is a float value.   32 is not a float value.   abc is not a float value.   FALSE is not a float value.Example 2:<?php// PHP code demonstrate working of is_float()function square($num){    return (is_float($num));}echo square(9.09) .\"\\n\";  // outputs \'1\'.echo square(FALSE) .\"\\n\"; // gives no output.echo square(14) .\"\\n\";    // gives no output.echo square(56.30) .\"\\n\";  // outputs \'1\'?>Output:  1      1reference : http://php.net/manual/en/function.is-float.php");create(getIdByTitle(this.context,"Functions"),"PHP | chr() Fucntion","The chr() function is a built-in function in PHP and is used to convert a ASCII value to a character. It accepts an ASCII value as a parameter and returns a string representing a character from the specified ASCII value. The ASCII value can be specified in decimal, octal, or hex values.Octal values are defined by a leading 0.Hex values are defined by a leading 0x.The ASCII values table can be referred from here.Syntax:string chr( $asciiVal)Parameter: This function accepts a single parameter $asciiVal. This parameter contains a valid ASCII value. The chr() fucntion returns the corresponding character of the ASCII value we pass to it as the parameter $asciiVal.Return Value: The function returns the character whose ASCII value we pass.Examples:  Input :  ASCII=35 ASCII=043 ASCII=0x23  Output : # # #   Explanation: The decimal, octal and hex value of \'#\' is   35, 043 and 0x23 respectively    Input : ASCII=48   Output : 0Below programs illustrate the chr() function in PHP:Program 1: Program to demonstrate the chr() fucntion when different ASCII are passed but their equivalent character is same.<?php// PHP progam to demonstrate the chr() fucntion$n1 = 35;$n2 = 043;$n3 = 0x23;echo \"The equivalent character for ASCII 35 in decimal is \";echo chr($n1), \"\\n\";// Decimal valueecho \"The equivalent character for ASCII 043 in octal is \";echo chr($n2), \"\\n\"; // Octal valueecho \"The equivalent character for ASCII 0x23 in hex is \";echo chr($n3); // Hex value?>Output:  The equivalent character for ASCII 35 in decimal is #  The equivalent character for ASCII 043 in octal is #  The equivalent character for ASCII 0x23 in hex is #Program 2: Program to demonstrate the chr() fucntion using arrays.<?php// PHP progam to demonstrate the chr() fucntion// in array$a=[48, 49, 50];foreach($a as $i){    echo \"The character equivalent of                 ASCII value of \", $i, \" is \";    echo chr($i), \"\\n\";}?>Output:  The character equivalent of ASCII value of 48 is 0  The character equivalent of ASCII value of 49 is 1  The character equivalent of ASCII value of 50 is 2");create(getIdByTitle(this.context,"Functions"),"PHP | popen( ) Function","The popen() function used to open a pipe to the program specified by the user using the command parameter. It returns a file pointer which is identical to that returned by fopen(), but it is unidirectional in nature i.e it can be only used for reading or writing. The popen() pointer can be used with fgets(), fgetss(), and fwrite(). The file pointer initiated by the popen() function must be closed with pclose().The command and the mode are sent as parameters to the popen() function and it returns a unidirectional file pointer on success or FALSE on failure.Syntax:popen(command, mode)Parameters Used:The popen() function in PHP accepts two parameters.command : It is a mandatory parameter which specifies the command to be executed.mode : It is a mandatory parameter which specifies the connection mode such as read only(r) or write only(w).Return Value:It returns a file pointer which is identical to that returned by fopen(), but it is unidirectional in nature.Errors And Exceptions:The file pointer initiated by the popen() function must be closed with pclose().If the command to be executed could not be found, then the popen() function returns a valid resource.Examples:  Input : $my_file= popen(\"/bin/ls\", \"r\");  Output : 1    Input : $my_file= popen(\'/executable/gfg.exe\', \'r\');          echo \"\'my_file\'; \" . get_class($my_handle) . \"\\n\";          $file_read = fread($my_file, 4192);          echo $file_read;          pclose($my_file);  Output : 1Below programs illustrate the popen() function.Program 1<?php// opening a pipe$my_file= popen(\"/bin/ls\", \"r\");?>Output:1Program 2<?php// opening a pipe$my_file= popen(\'/executable/gfg.exe\', \'r\');// returning name of class of an object using get_class()  echo \"\'$my_file\'; \" . get_class($my_file) . \"\\n\";// reading file using fread()$filereader = fread($my_file, 4192);   echo $filereader;// closing the pipepclose($my_file);?>Output:1Related Article: PHP | pclose( ) Function");create(getIdByTitle(this.context,"Functions"),"php | chdir() Function","The chdir() function in PHP used to change PHP’s current directory to new directory path. It takes only a single argument as new directory path.Syntax :  bool chdir(string $new_directory_path)Parameters Used : This function accepts only one parameter and which is mandatory to be passed.$new_directory_path : This parameter represents the new directory path (i.e. destination path).Return Value : It returns a boolean operator as return value, but actually changes the current directory as desired.Examples :  Input : CWD: /home/          chdir(\"gfg\")  Output : CWD: /home/gfg  Explanation : Current working directory(CWD)  was changed from \'/home/\' to \'/home/gfg\'.      Input : CWD: /home/Documents/          chdir(\"foldergfg/inside_folder_gfg\")  Output : CWD: /home/Documents/foldergfg/inside_folder_gfg    Explanation : Current working directory (CWD)  was changed from \'/home/Documents/\' to \'/home/  Documents/folder_gfg/inside_folder_gfg\'.Errors and Exceptions :This function returns TRUE on success and FALSE on failure. So, it gives an error / E_WARNING on failure. Generally, failure conditions occur when the destination directory path is not valid.Applicable versions :This function is applicable in PHP 4, PHP 5, PHP 7.Program 1:<?php// To get current working directoryecho getcwd() . \"<br>\";// Change directory functionchdir(\"testing_gfg\");// To get current working directoryecho getcwd();?>Output :  /var/www/html  /var/www/html/testing_gfgInitially current working directory was ‘/var/www/html’. After applying chdir() function, current working directory changed to ‘/var/www/html/testing_gfg’ directory. Similarly, chdir() function can be used to change directory.Program 2:<?php// To get current working directoryecho getcwd() . \"<br>\";// Change directory functionchdir(\"GFG/Geeks\");// To get current working directoryecho getcwd();?>Output :  /home  /home/GFG/Geeks");create(getIdByTitle(this.context,"Functions"),"PHP | rename( ) Function","The rename() function in PHP is an inbuilt function which is used to rename a file or directory. It makes an attempt to change an old name of a file or directory with a new name specified by the user and it may move between directories if necessary.If the new name specified by the user already exists, the rename() function overwrites it. The old name of the file and the new name specified by the user are sent as parameters to the rename() function and it returns True on success and a False on failure.Syntax:rename(oldname, newname, context)Parameters Used:The rename() function in PHP accepts three parameter.oldname : It is a mandatory parameter which specifies the old name of the file or directory.newname : It is a mandatory parameter which specifies the new name of the file or directory.context : It is an optional parameter which specifies the behavior of the stream .Return Value:It returns True on success and a False on failure.Errors And ExceptionThe rename() function generates a Warning if the newname already exists while renaming a directory.The wrapper used in oldname must match the wrapper used in newname.If the destination filesystem doesn’t permit chown() or chmod() system calls to be made on files, then rename() function may generate Warnings.Examples:  Input : $old_name = \"gfg.txt\" ;           $new_name = \"newgfg.txt\" ;           rename( $new_name, $old_name) ;    Output : 1    Input : $old_name = \"gfg.txt\" ;          $new_name = \"newgfg.txt\" ;           if(file_exists($new_name))          {              echo \"Error While Renaming $old_name\" ;          }          else          {             if(rename( $old_name, $new_name))             {              echo \"Successfully Renamed $old_name to $new_name\" ;             }            else            {             echo \"A File With The Same Name Already Exists\" ;            }          }    Output : Successfully Renamed gfg.txt to newgfg.txtBelow programs illustrate the rename() function.Suppose there is a file named “gfg.txt”Program 1<?php// Old Name Of The file$old_name = \"gfg.txt\" ;// New Name For The File$new_name = \"newgfg.txt\" ;// using rename() function to rename the filerename( $old_name, $new_name) ;?>Output:1Program 2<?php// Old Name Of The file$old_name = \"gfg.txt\" ;// New Name For The File$new_name = \"newgfg.txt\" ;// Checking If File Already Existsif(file_exists($new_name)) {   echo \"Error While Renaming $old_name\" ; }else {   if(rename( $old_name, $new_name))     {        echo \"Successfully Renamed $old_name to $new_name\" ;     }     else     {        echo \"A File With The Same Name Already Exists\" ;     }  }?>Output:Successfully Renamed gfg.txt to newgfg.txtRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | settype() Function","The settype() function is a built-in function in PHP. The settype() function is used to the set the type of a variable. It is used to set type or modify type of an existing variable.Syntax:boolean settype($variable_name, $type)Parameters: The settype() function accepts two parameters as shown in above syntax and are described below.$variable_name: This parameter specifies the name of variablewhose type we want to modify. This parameter can be of any type that is, it can be of integer type or a string type etc.$type: This parameter specifies the type of variable that is needed. Possible values of this parameter are: boolean, integer, float, string, array, object, null.Return value: This function returns a boolean type value. It returns TRUE in case of success and FALSE in case of failure.Below programs illustrate the settype() function in PHP:Program 1:<?php// PHP program to illustrate settype() function$var1 = \"123xyz\";$var2 = 3;$r = true;settype($var1, \"integer\");settype($var2, \"float\");settype($r, \"string\");echo $var1.\"\\n\";echo $var2.\"\\n\";echo $r.\"\\n\";?>Output:  123  3  1Program 2:<?php// PHP program to illustrate settype() function$var1 = \"a12b\";$var2 = 3.566;$r = true;settype($var1, \"integer\");settype($var2, \"integer\");settype($r, \"string\");echo $var1.\"\\n\";echo $var2.\"\\n\";echo $r.\"\\n\";?>Output:  0  3  1");create(getIdByTitle(this.context,"Functions"),"PHP | function_exists() Function","The function_exists() is an inbuilt function in PHP. The function_exists() function is useful in case if we want to check whether a function() exists or not in the PHP script. It is used to check for both built-in functions as well as user-defined functions.Syntax:boolean function_exists($function_name)Parameter: This function accepts a single parameter $function_name. This is the name of function that we want to search in the list of defined function. This is a string type parameter.Return Values: This function returns a Boolean value. In case a function with the name $function_name exists it returns TRUE, otherwise it returns FALSE. This function will also return FALSE for constructs like “include_once”, “echo” etc.Below programs illustrate the function_exists() function in PHP:Program 1:<?php// PHP program to illustrate function_exists()// checking if the in_array() built-in function// exists or notif (function_exists(\'in_array\')){    echo \"in_array() function is available.\\n\";}else{    echo \"in_array() function is not available.\\n\";}?>Output:in_array() function is available.Program 2:<?php// PHP program to illustrate function_exists()// declaring a function named WelcomeMsgfunction WelcomeMsg(){    echo \"Welcome to GeeksforGeeks\";}// checking if the function named WelcomeMsg// exists or notif (function_exists(\'WelcomeMsg\')){    echo \"WelcomeMsg() function is available.\\n\";}else{    echo \"WelcomeMsg() function is not available.\\n\";}?>Output:WelcomeMsg() function is available.");create(getIdByTitle(this.context,"Functions"),"PHP | jewishtojd() Function","The jewishtojd() function is a built-in function which converts a Jewish Date to a Julian Day Count. The function accepts three parameters in format $month / $day / $year, which represents the date in Jewish or Hebrew calendar and converts it to a Julian Day count.Syntax:jewishtojd( $month, $day, $year)Parameters: The function accepts three mandatory parameters as shown above and described below:$month – This parameter specifies the month number in Jewish calendar. The month number is in range 1-13 inclusive. If a month number in excess of 12 or less than 1 is passed, the Julian day is returned as 0.$day – This parameter specifies the day in Jewish calendar. The day number is in range 1-30 inclusive. If a day number in excess of 31 or less than 1 is passed, the Julian day is returned as 0. Leap years are not taken into consideration$year – This parameter specifies the year in Jewish calendar. The year number is in range 1-9999 inclusive.Return Value: The function returns the Jewish date converted to a Julian Day count.Examples:  Input : $month=4, $day=8, $year=13  Output : 352465    Input : $month=4, $day=8, $year=898  Output : 675707Below programs illustrate the jewishtojd() function.Program 1: The program below demonstrates the use of jewishtojd() function.<?php// PHP program to demonstrate the// use of jewishtojd() function// converts date to julian integer$jd = jewishtojd(4, 8, 13);// prints the julian day integerecho ($jd);?>Output:352465Program 2: The program below demonstrates when day and month out of range.<?php// PHP program to demonstrate the// use of jewishtojd() function// converts date to julian integer// month is out of range$jd = jewishtojd(22, 8, 11);// prints the julian day integerecho ($jd), \"\\n\";// day is out of range$jd=jewishtojd(4, 32, 11);echo ($jd);?>Output:0  0");create(getIdByTitle(this.context,"Functions"),"PHP | frenchtojd() Function","The frenchtojd() function is a built-in function which converts a French date to a Julian Day Count. The function accepts three parameters in format $month / $day / $year, which represents the date in French republican calendar and converts it to a Julian Day count.Syntax:frenchtojd( $month, $day, $year)Parameters: The function accepts three mandatory parameters as shown above and described below:$month – This parameter specifies the month number in French calendar. The month number is in range 1-13 inclusive. If a month number in excess of 12 or less than 0 is passed, the Julian day is returned as 0.$day – This parameter specifies the day in French calendar. The day number is in range 1-30 inclusive. If a day number in excess of 31 or less than 0 is passed, the Julian day is returned as 0. Leap years are not taken into consideration$year – This parameter specifies the year in French calendar. The year number is in range 1-14 inclusive. If a year number in excess of 14 or less than 1 is passed, the Julian day is returned as 0. Leap years are not taken into considerationReturn Value: The function returns the French date converted to a Julian Day count.Examples:  Input : $month=3, $day=11, $year=12  Output : 2379928     Input : $month=4, $day=8, $year=13  Output : 2380320Below program illustrate the frenchtojd() function.Program 1: The program below demonstrates the use of frenchtojd() function.<?php// PHP program to demonstrate the// use of frenchtojd() function// converts date to julian integer$jd=frenchtojd(4, 8, 13);// prints the julian day integerecho ($jd);?>Output: 2380320Program 2: The program below demonstrates when day and month out of range.<?php// PHP program to demonstrate the// use of frenchtojd() function// converts date to julian integer// month is out of range$jd=frenchtojd(22, 8, 11);// prints the julian day integerecho ($jd), \"\\n\";// day is out of range$jd=frenchtojd(4, 32, 11);echo ($jd);?>Output:0  0");create(getIdByTitle(this.context,"Functions"),"PHP | jdtounix( ) Function","The jdtounix() function in PHP is a built-in function which is used to convert a Julian day date into a Unix Timestamp. This function returns a Unix timestamp corresponding to the Julian Day which is used as a parameter or it returns FALSE if entered date is not inside the Unix epoch i.e Gregorian years between 1970 and 2037 or 2440588 <= Julian day date <= 2465342.The jdtounix() function returns time according to the Universal Time Coordinated(UTC).Syntax:jdtounix($jd)Parameters: The jdtounix() function in PHP accepts only one parameter $jd. This parameter specifies a Julian Day number between 2440588 and 2465342.Return Value: It returns a Unix timestamp corresponding to the Julian Day which is used as a parameter or it returns FALSE if entered date is not inside the Unix epoch.Errors And Exception:The Julian Date used as a parameter must be in the range of 2440588 – 2465342.The jdtounix() function ignores the decimal part of the julian day count and therefore it may give improper results in many cases.Examples:  Input : $julian_date = gregoriantojd(01, 02, 1997);          echo jdtounix($julian_date);  Output : 852163200    Input : $julian_date = gregoriantojd(11, 21, 2017);          echo jdtounix($julian_date);  Output : 1511222400Below programs illustrate the jdtounix() function:Program 1:<?php// converting Gregorian date to Julian date$julian_date = gregoriantojd(01, 02, 1997);// Converting Julian date to Unix Timestampecho jdtounix($julian_date);?>Output:852163200Program 2:<?php// converting Gregorian date to Julian date$julian_date=gregoriantojd(11, 21, 2017);// Converting Julian date to Unix Timestampecho jdtounix($julian_date);?>Output:1511222400");create(getIdByTitle(this.context,"Functions"),"PHP | unixtojd() Function","The unixtojd() is a built-in function in PHP which converts the unix timestamp to Julian Day count. The UNIX timestamp is a way to track time as a running total of seconds. This count starts at the Unix Epoch on January 1st, 1970 at UTC. Therefore, the UNIX timestamp is merely the number of seconds between a particular date and the Unix Epoch.Syntax:unixtojd( $unix )Parameter: The function accepts a single parameter as shown above which is optional. $unix specifies the unix timestamp whihc is converted to Julian Day count.Return Value: The function returns the unix timestamp passed as parameter converted to Julian day Integer. If no parameter is passed, it returns the current Julian Day integer. We can convert the Julian day integer to Gregorian date to know the exact date using jdtogregorian() function.Examples:  Input : $unix = 1524909427  Output : 2458237  Explanation: The Gregorian date is 4/28/2018 of   the given unix timestamp     Input : $unix = 5677896  Output : 2440653  Explanation: The Gregorian date is 3/7/1970 of   the given unix timestampNote: The function can only take Julian Day integer till Gregorian date 1/19/2038 since on this date the Unix Time Stamp will cease to work due to a 32-bit overflow.Below programs illustrate the unixtojd() Function.Program 1: The program below demonstrates the use of function when no parameter is passed.<?php// PHP program to demonstrate the use of unixtojd()// function when no parameter is passed// takes the current date as unix timestamp$jd = unixtojd();// prints the julian Day integerecho \"The Julian Day integer is \", ($jd), \"\\n\";// prints the corresponding Gregorian dateecho \"The Gregorian date is \", jdtogregorian($jd);?>Output:The Julian Day integer is 2458237  The Gregorian date is 4/28/2018Program 2: The program below demonstrates the use of function when parameter is passed.<?php// PHP program to demonstrate the use of unixtojd()// function when parameter is passed// takes a unix timestamp in parameter$jd = unixtojd(5677896);// prints the julian Day integerecho \"The Julian Day integer is \", ($jd), \"\\n\";// prints the corresponding Gregorian dateecho \"The Gregorian date is \", jdtogregorian($jd);?>Output:The Julian Day integer is 2440653  The Gregorian date is 3/7/1970");create(getIdByTitle(this.context,"Functions"),"PHP | jdtofrench() Function","The jdtofrench() function is a built-in function which converts a Julian Day Integer to French date. The function accepts a Julian Day integer and returns the converted French Date in $month / $day / $year.Syntax:jdtofrench($jd)Parameters: The function accepts one mandatory parameter $jd which specifies the Julian day.Return Value: The function returns the French date. The return format of the date is $month / $day / $year. If the Julian day integer is passed as 0, then 0/0/0 is returned as output.Examples:  Input : 2379254  Output : 5/8/10     Input : 2380229  Output : 1/7/13Below programs illustrate the jdtofrench() function.Program 1: The program below illustrate the use of jdtofrench() function.<?php// PHP program to demonstrate the// use of jdtofrench() function// converts date to julian integer$jd = frenchtojd(1, 7, 13);// prints the julian day integerecho \"The julian day integer is \", $jd, \"\\n\";// converts the Julian day to French date$date = jdtofrench($jd);// prints the dateecho \"The french date initially taken was \", ($date), \"\\n\";?>Output:The julian day integer is 2380229  The french date initially taken was 1/7/13Program 2: The program below shows the output when an invalid Julian day integer is passed.<?php// PHP program to demonstrate the// use of jdtofrench() function// in case of out of range parameter is passed// converts date to julian integer$jd = frenchtojd(1, 7, 18);// prints the julian day integer as 0 as year is out of rangeecho \"The julian day integer is \", $jd, \"\\n\";// converts the Julian day to French date$date = jdtofrench($jd);// prints the date as 0/0/0 as french year is out of rangeecho \"The french date initially taken was \", ($date), \"\\n\";?>Output:The julian day integer is 0  The french date initially taken was 0/0/0");create(getIdByTitle(this.context,"Functions"),"PHP | easter_days() Function","The easter_days() Function is a built-in function in PHP which returns the number of days after March 21, that the Easter Day is in the given year. When no year is given, the current year is taken as the default value.Syntax:easter_days( $year, $method )Parameters: The function accepts two optional parameters as shown above and explained below:$year This parameter specifies the year. When no parameter is passed the current year is taken as the default value.$method – This parameter allows you to calculate easter dates based on other calendars. If the $method is set to CAL_EASTER_ROMAN, it uses the Gregorian calendar during the years 1582 – 1752.Return Value: The function returns the number of days after March 21, that the Easter Day is in the given year. When no $year is passed as an argument the current year is taken as the default year and the number of days after March 21 of the current year is returned.Examples:  Input :  $year = 2018  Output : 11    Input : $year = 2017  Output : 26      Input: $year = 2015 $method = CAL_EASTER_ROMAN  Output : 15Below programs illustrates the use of easter_days() function:Program 1: The program below explains the working of easter_days() function when no parameter is passed.<?php// PHP program to demonstrate the// easter_days() function// when no parameter is passedecho easter_days(), \"\\n\";// verified by passing current year$year = 2018;echo easter_days($year);?>Output:11  11Program 2: The program below explains the working of easter_days() function when $year parameter is passed<?php// PHP program to demonstrate the// easter_days() function// when $year parameter is passed$year = 2015;// no of days for Easter after march 21 of year 2015echo easter_days($year), \"\\n\";// the Easter date of year 2015echo date(\"M-d-Y\", easter_date($year));?>Output:15  Apr-05-2015Program 3: The program below explains the working of easter_days() function when both the parameters is passed.<?php// PHP program to demonstrate the// easter_days() function// when both parameters are passed$year = 2014;// no of days for Easter after march 21 of year 2014// of Gregorian Calendarecho easter_days($year, CAL_EASTER_ROMAN), \"\\n\";?>Output:30");create(getIdByTitle(this.context,"Functions"),"PHP | easter_date() Function","The easter_date() function is a built-in function in PHP which returns the Easter date in the year passed as an argument. The current year is taken as default year when no arguments are passed as parameter.Syntax:easter_date( $year )Parameter: The function accepts one optional parameter $year which specifies the year whose Easter date is to be returned. The year can be a number between 1970 and 2037 only. It returns an error message when the year is out of range.Return Value: It returns the Easter date on the given year which is passed in the argument. If no parameter is passed, it returns the Easter date of the current year.Examples:  Input : 2018  Output : Apr-01-2018    Input : 2017  Output : Apr-16-2017Below programs illustrates the easter_date() function:Program 1: The program demonstrates the function when no parameter is passed.<?php// PHP program to demonstrate the// working of easter_date() function// when no parameter is passed// prints the date of Easter of year 2018// when no parameter is passedecho date(\"M-d-Y\", easter_date()), \"\\n\";// current year to verify$year = 2018;echo date(\"M-d-Y\", easter_date($year));?>Output:Apr-01-2018  Apr-01-2018Program 2: The program demonstrates the function when parameter is passed.<?php// PHP program to demonstrate the// working of easter_date() function// when parameter is passed$year = 2017;echo date(\"M-d-Y\", easter_date($year)), \"\\n\";$year = 2010;echo date(\"M-d-Y\", easter_date($year)), \"\\n\";$year = 2000;echo date(\"M-d-Y\", easter_date($year));?>Output:Apr-16-2017  Apr-04-2010  Apr-23-2000Program 3: The program demonstrates the function when parameter is passed out of range.<?php// PHP program to demonstrate the// working of easter_date() function// when parameter is out of range$year = 2050;echo date(\"M-d-Y\", easter_date($year)), \"\\n\";?>Output:  PHP Warning:  easter_date(): This function is only valid   for years between 1970 and 2037 inclusive in  /home/df540ecbab7094243e7668326260e785.php on line 8");create(getIdByTitle(this.context,"Functions"),"PHP | gregoriantojd() Function","The gregoriantojd() function is a built-in function which converts a Gregorian date to a Julian Day Count. The function accepts three parameters in format $month / $day / $year, which represents the date in Gregorian calendar and converts it to a Julian Day count.Syntax:gregoriantojd( $month, $day, $year)Parameters: The function accepts three mandatory parameters as shown above and described below:$month – This parameter specifies the month number in Gregorian calendar. The month number is in range 1-12 inclusive. If a month number in excess of 12 or less than 0 is passed, the Julian day is returned as 0.$day – This parameter specifies the day in Gregorian calendar. The day number is in range 1-31 inclusive. If a day number in excess of 31 or less than 0 is passed, the Julian day is returned as 0. Leap years are not taken into consideration$year – This parameter specifies the year in Gregorian calendar.Return Value: The function returns the Gregorian date converted to a Julian Day count.Examples:  Input : $month=3, $day=31, $year=2018   Output : 2458209    Input : $month=4, $day=27, $year=2018  Output : 2458236Below program illustrate the gregoriantojd() function.Program 1: The program below demonstrates the use of gregoriantojd() function.<?php// PHP program to demonstrate the// use of gregoriantojd() function// converts date to julian integer$jd=gregoriantojd(4, 27, 2018);// prints the julian day integerecho ($jd);?>Output: 2458236Program 2: The program below demonstrates when day and month out of range.<?php// PHP program to demonstrate the// use of gregoriantojd() function// converts date to julian integer// month is out of range$jd=gregoriantojd(4, 32, 2018);// prints the julian day integerecho ($jd), \"\\n\";// day is out of range$jd=gregoriantojd(13, 29, 2018);echo ($jd);?>Output:0  0");create(getIdByTitle(this.context,"Functions"),"PHP | jdtogregorian() Function","The jdtogregorian() function is a built-in function which converts a Julian Day Integer to Gregorian date. The function accepts a Julian Day integer and returns the converted Gregorian Date in $month / $day / $year.Syntax:jdtogregorian($jd)Parameters: The function accepts one mandatory parameter $jd which specifies the Julian day.Return Value: The function returns the Gregorian date. The return format of the date is $month / $day / $year.Examples:  Input : 2458209  Output : 3/31/2018    Input : 2458236  Output : 4/27/2018Below programs illustrate the jdtogregorian() function.Program 1: The program below illustrate the use of jdtogregorian() function.<?php// PHP program to demonstrate the// use of jdtogregorian() function// converts date to julian integer$jd = gregoriantojd(3, 31, 2018);// converts the Julian day to Gregorian date$date = jdtogregorian($jd);// prints the dateecho ($date), \"\\n\";?>Output:3/31/2018Program 2: The program below shows the output when an invalid Julian day integer is passed.<?php// PHP program to demonstrate the output// of jdtogregorian() function when 0 is// passed as Julian Day, which is invalid// converts the Julian day to Gregorian date// invalid hence outputs 0/0/0$date = jdtogregorian(0);// prints the dateecho ($date), \"\\n\";?>Output:0/0/0");create(getIdByTitle(this.context,"Functions"),"PHP | jdmonthname() Function","The jdmonthname() function is a built-in function in PHP which returns the month name of a Julian day number passed as the argument. The return value is of six types depending on the mode passed in the function which is explained briefly below in the parameter part.Syntax: jdmonthname($jd, $mode)Parameters: The function accepts two parameters as shown above and described below:$jd – This paramater specifies the Julian Day as an integer. It is a mandatory parameter.$mode – This is a mandatory parameter which specifies the type of return value. The mode can be in range 0-5 inclusive.0 – It returns the abbreviated form (Jan, Feb, Mar, etc.) of month name in Gregorian calendar when mode is passed as 0.1 – It returns the month name (January, February, March, etc.) in Gregorian calendar when mode is passed as 1.2 – It returns the abbreviated form (Jan, Feb, Mar, etc.) of month name in Julian calendar when mode is passed as 2.3 – It returns the month name (January, February, March, etc.) in Julian calendar when mode is passed as 3.4 – It returns the month name(Tishri, Heshvan, Kislev, etc.) in Jewish calendar when mode is passed as 4.5 – In returns the month name(Vendemiaire, Brumaire, Frimaire, etc.) in French Republican when mode is passed as 5.Return Value: The function returns the month name depending on the mode passed. If any value other then 0-5 is passed as mode, then the mode is taken as 0.Examples:  Input : $jd = 2458236, $mode = 0   Output : Apr  Explanation: In program below we have converted the   date(4/27/2018) to the Julian Day integer which is   2458236    Input : $jd = 2457031, $mode = 4   Output : Tevet  Explanation: date(1/8/2015) in Julian Day integer is 2457031.   Tevet is the month on this Julian Day integer.Below programs illustrate the jdmonthname() function:Program 1: The program below demonstrates the jdmonthname() function when mode is passed as 0.<?php// PHP program to demonstrate the use// of jdmonthname() function// when mode is passed as 0// converts the gregorian date to julian day integer$jd = gregoriantojd(4, 27, 2018);// prints the month name when mode is passed as 0echo (jdmonthname($jd, 0)), \"\\n\";?>Output:AprProgram 2: The program below demonstrates the jdmonthname() function when mode is passed as 1.<?php// PHP program to demonstrate the use// of jdmonthname() function// when mode is passed as 1// converts the gregorian date to julian day integer$jd = gregoriantojd(4, 27, 2018);// prints the month name when mode is passed as 1echo (jdmonthname($jd, 1)), \"\\n\";?>Output:AprilProgram 3: The program below demonstrates the jdmonthname() function when mode is passed as 2.<?php// PHP program to demonstrate the// use of jdmonthname() function// when mode is passed as 2// converts the gregorian date to julian day integer$jd = gregoriantojd(4, 27, 2018);// prints the month name when mode is passed as 2echo (jdmonthname($jd, 2)), \"\\n\";?>Output:AprProgram 4: The program below demonstrates the jdmonthname() function when mode is passed as 3.<?php// PHP program to demonstrate the// use of jdmonthname() function// when mode is passed as 3// converts the gregorian date to julian day integer$jd = gregoriantojd(4, 27, 2018);// prints the month name when mode is passed as 3echo (jdmonthname($jd, 3)), \"\\n\";?>Output:AprilProgram 5: The program below demonstrates the jdmonthname() function when mode is passed as 4.<?php// PHP program to demonstrate the// use of jdmonthname() function// when mode is passed as 4// converts the gregorian date to julian day integer$jd = gregoriantojd(4, 27, 2018);// prints the month name when mode is passed as 3echo (jdmonthname($jd, 4)), \"\\n\";?>Output:IyyarProgram 6: The program below demonstrates the jdmonthname() function when mode is passed out of range.<?php// PHP program to demonstrate the// use of jdmonthname() function// when mode is passed out of range// converts the gregorian date to julian day integer$jd = gregoriantojd(4, 27, 2018);// prints the month name when mode is passed out of rangeecho (jdmonthname($jd, 8)), \"\\n\";?>Output:AprRefernce:http://php.net/manual/en/function.jdmonthname.php");create(getIdByTitle(this.context,"Functions"),"PHP | jddayofweek() Function","The jddayofweek() function is a built-in function in PHP which returns the given day of the week of a Julian integer passed in the argument. The return value is of three types depending on the mode passed in the function. It returns three types of values which represents the day of the week. If the mode is passed as 0, it returns 0, 1, 2… which denotes Sunday, Monday, Tuesday… It returns Sunday, Monday, Tuesday… when 1 is passed as the mode. When 2 is passed as the mode, it returns the abbreviation Sun, Mon, Tue… as the day of the week.Syntax:jddayofweek($jd, $mode)Parameters: The function accepts two parameters as shown above and described below.$jd – This is a mandatory parameter which specifies the julian day number as integer. The Gregorian calendar date is converted to julian day integer using gregoriantojd($month, $day, $year).$mode – This is an optional parameter which specifies the type of return value. It accepts value in range 0-2 inclusive. The default value is taken as 0. The three types of mode of return are described below:0 – When mode is passed as 0, it returns 0, 1, 2, 3.. denoting Sunday, Monday, Tuesday… respectively as the day of the week. This is the default value of mode when no mode parameter is missing or any value out of range is passed.1 – When mode is passed as 1, it returns Sunday, Monday, Tuesday…2 – When mode is passed as 2, it returns the abbreviation form of MSunday, Monday, Tuesdae as Sun, Mon, Tues..Return value: The function returns the day of the week depending on the value of the mode passed in the argument as described above.Examples:  Input : $jd = 4/27/2018 ,  mode=0   Output : 5    Input : $jd = 4/27/2018 ,  mode=1   Output : FridayBelow programs illustrate the jddayofweek() functionProgram 1: The program below demonstrates the output when mode is not passed and default mode is taken.<?php// PHP program to demonstrate the// use of jddayofweek() function// when second parameter is not passed// converts date to julian integer$jd=gregoriantojd(4, 27, 2018);// prints the day on the given dateecho jddayofweek($jd);?>Output:5Program 2: The program below demonstrates the output when mode is 1.<?php// PHP program to demonstrate the// use of jddayofweek() function// when mode is 1// converts date to julian integer$jd=gregoriantojd(4, 27, 2018);// prints the day on the given dateecho jddayofweek($jd, 1);?>Output:FridayProgram 3: The program below demonstrates the output when mode is 2.<?php// PHP program to demonstrate the// use of jddayofweek() function// when mode is 2// converts date to julian integer$jd=gregoriantojd(4, 27, 2018);// prints the day on the given dateecho jddayofweek($jd, 2);?>Output:FriProgram 4: The program below demonstrates the output when mode is out of range.<?php// PHP program to demonstrate the// use of jddayofweek() function// when mode is out of range// converts date to julian integer$jd=gregoriantojd(4, 27, 2018);// prints the day on the given dateecho jddayofweek($jd, 4);?>Output:5");create(getIdByTitle(this.context,"Functions"),"PHP | rewind( ) Function","The rewind() function in PHP is an inbuilt function which is used to set the position of the file pointer to the beginning of the file.Any data written to a file will always be appended if the file is opened in append (“a” or “a+”) mode regardless of the file pointer position.The file on which the pointer has to be edited is sent as a parameter to the rewind() function and it returns True on success or False on failure.Syntax: rewind(file)Parameters Used:The rewind() function in PHP accepts one parameter.file : It is a mandatory parameter which specifies the file to be edited.Return Value:It returns True on success or False on failure.Errors And Exception:The rewind() function generates an E_WARNING level error on failure.The stream must be “seekable” for using the rewind() function.If the file is opened in append mode, the data written will be appended regardless of the position of the pointer.Examples:  Input: $myfile = fopen(\"gfg.txt\", \"r\");          fseek($myfile, \"10\");          rewind($myfile);          fclose($file);    Output: 1    Input : $myfile = fopen(\"gfg.txt\", \"r+\");          fwrite($myfile, \'geeksforgeeks\');          rewind($myfile);          fwrite($myfile, \'portal\');          rewind($myfile);          echo fread($myfile, filesize(\"gfg.txt\"));          fclose($myfile);    Output : portalforgeeks  Here all characters of the file as it is after rewind \"portal\"Below are the programs to illustrate the rewind() function.Program 1<?php$myfile = fopen(\"gfg.txt\", \"r\");// Changing the position of the file pointerfseek($myfile, \"10\");// Setting the file pointer to 0th// position using rewind() functionrewind($myfile);// closing the filefclose($file);?>Output:1Program 2<?php$myfile = fopen(\"gfg.txt\", \"r+\");// writing to filefwrite($myfile, \'geeksforgeeks a computer science portal\');// Setting the file pointer to 0th// position using rewind() functionrewind($myfile);// writing to file on 0th positionfwrite($myfile, \'geeksportal\');rewind($myfile);// displaying the contents of the fileecho fread($myfile, filesize(\"gfg.txt\"));fclose($myfile);?>Output:geeksportalks a computer science portal");create(getIdByTitle(this.context,"Functions"),"PHP | unlink() function","The unlink() function in PHP is an inbuilt function which is used to delete a file. It is similar to the unlink() function found on Unix.The filename of the file which has to be deleted is sent as a parameter and the function returns True on success and False on failure.Syntax: unlink(filename, context)Parameters Used:The unlink() function in PHP accepts two parameter.filename : It is a mandatory parameter which specifies the filename of the file which has to be deleted.context : It is an optional parameter which specifies the context of the file handle which can be used to modify the nature of the stream.Return Value:It returns True on success and False on failure.Errors And ExceptionThe unkink() function generates an E_WARNING level error on failure.The web server user must have write permissions to the directory for using the unlink() function.The unlink() function returns Boolean False but many times it happens that it returns a non-Boolean value which evaluates to False.Examples:  Input : $file_pointer = \"gfg.txt\";          if (!unlink($file_pointer))          {             echo (\"$file_pointer cannot be deleted due to an error\");          }          else          {             echo (\"$file_pointer has been deleted\");          }    Output : 1    Input : $file_pointer = fopen(\'gfg.txt\');          fwrite($file_pointer, \'A computer science portal for geeks!\');          fclose($file_pointer);          unlink(\'gfg.txt\');    Output : 1Below programs illustrate the unlink() function.Suppose there is a file named “gfg.txt”Program 1<?php// PHP program to delete a file named gfg.txt// using unlike() function$file_pointer = \"gfg.txt\";// using unlink() function to delete a fileif (!unlink($file_pointer))  {  echo (\"$file_pointer cannot be deleted due to an error\");  }else  {  echo (\"$file_pointer has been deleted\");  }?>Output:1<?php// PHP program to delete a file named gfg.txt// using unlike() function$file_pointer = fopen(\'gfg.txt\');// writing on a file named gfg.txtfwrite($file_pointer, \'A computer science portal for geeks!\');fclose($file_pointer);// using unlink() function to delete a fileunlink(\'gfg.txt\');?>Output:1");create(getIdByTitle(this.context,"Functions"),"PHP | touch( ) function","The touch() function in PHP is an inbuilt function which is used setting the access and modification time of a specified file.The filename of the file whose access and modification time has to be set is sent as a parameter along with the time to the touch() function and it returns True on success and False on failure. A file is created first if it doesn’t exist.Syntax:touch(filename, time, atime)Parameters Used:The touch() function in PHP accepts three parameters.filename : It is a mandatory parameter which specifies the filename of the file whose access and modification time have to be changed.time : It is an optional parameter which specifies the time.By default it takes the current system time.atime : It is an optional parameter which specifies the access time. By default it takes the current system time if no parameters are set.Return Value:It returns True on success and False on failure.Errors And ExceptionThe time resolution may differ from one file system to another therefore you may get unexpected results sometimes.The $time parameter in the touch() function has a future limit around 1000000 seconds.The touch() function used on a directory returns FALSE and prints “Permission denied” on NTFS and FAT Filesystem.Examples:  Input : $file_pointer = \"gfg.txt\";          if (touch($file_pointer))           {             echo (\"$file_pointer modification time has been set to current system time.\");          }           else           {             echo (\"$file_pointer modification time cannot be changed.\");          }  Output :gfg.txt modification time has been set to current system time.    Input : $file_pointer = \"gfg.txt\";          $time = time() - 18000;          if (touch($file_pointer, $time))           {             echo (\"$file_pointer modification time has been changed to 5 hours in the past.\");          }           else           {             echo (\"$file_pointer modification time cannot be changed.\");          }    Output : gfg.txt modification time has been changed to 5 hours in the past.Below programs illustrate the touch() function.Suppose there is a file named “gfg.txt”Program 1<?php$file_pointer = \"gfg.txt\";// using touch() function to change the modification// time of a file to current system timeif (touch($file_pointer)){   echo (\"$file_pointer modification time has been set to current system time.\");}else{   echo (\"$file_pointer modification time cannot be changed.\");}?>Output:gfg.txt modification time has been set to current system time.Program 2<?php$file_pointer = \"gfg.txt\";// setting touch time to 5 hours in the past$time = time() - 18000;// using touch() function to change the modification// time of a file to current system timeif (touch($file_pointer, $time)){    echo (\"$file_pointer modification time has been changed to 5 hours in the past.\"); }else{   echo (\"$file_pointer modification time cannot be changed.\");}?>Output:gfg.txt modification time has been changed to 5 hours in the past.");create(getIdByTitle(this.context,"Functions"),"PHP | symlink( ) function","The symlink() function in PHP is an inbuilt function which is used to create a symbolic link for a target which already exists. It helps to create a specific name link for a target.The target and link names are sent as parameters to the symlink() function and it returns True on success and False on failure.The symlink() function does not provide an HTML link, but a link in the file system.Syntax:symlink(target, link)Parameters Used:The symlink() function in PHP accepts two parameters.target : It is a mandatory parameter which specifies the target whose link has to be created.link : It is a mandatory parameter which specifies the link name.Return Value:It returns True on success and False on failure.Errors And ExceptionThe symlink() function does not work if the system you run PHP is prior to Windows Vista/Windows Server 2008.The symlink() function accepts only absolute paths on windows. Relative paths on windows are not supported for symlinks.The symlink() function returns Boolean False but many times it happens that it returns a non-Boolean value which evaluates to False.Examples:  Input : $target_pointer = \'gfg.txt\';          $link_name = \'geeksforgeeks\';          symlink($target_pointer, $link_name);  Output : 1    Input : $target_pointer = \"/home/user1/gfg.txt\";          $link_name = \'mylink\';          $test = symlink($target_pointer, $link_name);          if ($result)           {            echo (\"Symlink has been created!\");          }          else           {            echo (\"Symlink cannot be created!\");          }  Output : Symlink has been created!Below programs illustrate the touch() function.Suppose there is a file named “gfg.txt”Program 1<?php// specifying target$target_pointer = \'gfg.txt\';// specifiying link  name$link_name = \'geeksforgeeks\';// creating alink using symlink() functionsymlink($target_pointer, $link_name);?>Output:1Program 2<?php// specifying target$target_pointer = \"/home/user1/gfg.txt\";// specifiying link  name$link_name = \'mylink\';// creating alink using symlink() function$test = symlink($target_pointer, $link_name);if ($result){   echo (\"Symlink has been created!\");}else{   echo (\"Symlink cannot be created!\");}?>Output:Symlink has been created!");create(getIdByTitle(this.context,"Functions"),"PHP | stat( ) function","The stat() function in PHP is an inbuilt function which is used to return information of a file. The stat(0) function returns statistics of a file which is an array with the following elements :[0] or [dev] – Device number[1] or [ino] – Inode number[2] or [mode] – Inode protection mode[3] or [nlink] – Number of links[4] or [uid] – User ID of owner[5] or [gid] – Group ID of owner[6] or [rdev] – Inode device type[7] or [size] – Size in bytes[8] or [atime] – Last access (as Unix timestamp)[9] or [mtime] – Last modified (as Unix timestamp)[10] or [ctime] – Last inode change (as Unix timestamp)[11] or [blksize] – Blocksize of filesystem IO[12] or [blocks] – Number of blocks allocatedThe stat() function accepts the filename as a parameter and returns an array with the above-mentioned elements on success and False on failure.If filename is a symbolic link then statistics are from the file itself, not the symlink.Syntax:stat(filename)Parameters Used:The stat() function in PHP accepts one parameter.filename : It specifies the filename of the file whose statistics you want to know.Return Value:It returns array with the above-mentioned elements on success and False on failure.Errors And ExceptionThe results of the stat() function differs from server to server.The result of the stat() function are cached and therefore the clearstatcache() function should be used to clear the cache.The stat() function generates an E_WARNING on failure.On Windows platforms the groupid of owner, userid of owner and inode number are always 0.For files which are larger than 2GB some filesystem functions may return unexpected results since PHP’s integer type is signed and many platforms use 32bit integers.Examples:  Input : $test = stat(\'gfg.txt\');          echo \'Access time: \' .$test[\'atime\'];          echo \'Modification time: \' .$test[\'mtime\'];          echo \'Device number: \' .$test[\'dev\'];    Output :Access time: 1141666750          Modification time: 1135897503          Device number: 0    Input : $test = stat(\'gfg.txt\');          echo \'Access time: \' .$test[8];          echo \'Modification time: \' .$test[9];          echo \'Device number: \' .$test[0];    Output : Access time: 1141666750           Modification time: 1135897503           Device number: 0    Input : $test = stat(\'gfg.txt\');          $access_time = $stat[\'atime\'] + 18000;          if (touch($test, time(), $access_time))           {            echo \'Access time changed to 5 hours in the past!\';          }           else           {            echo \'Access time could not be changed.\';          }    Output : Access time changed to 5 hours in the past!Below programs illustrate the stat() function.Suppose there is a file named “gfg.txt”Program 1<?php$test = stat(\'gfg.txt\');//using stat() along with name index to display access timeecho \'Access time: \' .$test[\'atime\'];//using stat() along with name index  to display modification timeecho \'<br />Modification time: \' .$test[\'mtime\'];//using stat() along with name index  to display device numberecho \'<br />Device number: \' .$test[\'dev\'];?>Output:  Access time: 1141666750  Modification time: 1135897503  Device number: 0Program 2<?php$test = stat(\'gfg.txt\');//using stat() along with number index to display access timeecho \'Access time: \' .$test[8];//using stat() along with number index to display modification timeecho \'<br />Modification time: \' .$test[9];//using stat() along with number index to display device numberecho \'<br />Device number: \' .$test[0];?>Output:  Access time: 1141666750  Modification time: 1135897503  Device number: 0Program 3<?php$test = stat(\'gfg.txt\');//changing access time to 5 hours in the past$access_time = $stat[\'atime\'] + 18000;//using touch() function to change the access timeif (touch($test, time(), $access_time)){   echo \'Access time changed to 5 hours in the past!\';}else{   echo \'Access time could not be changed.\';}?>Output:  Access time changed to 5 hours in the past!");create(getIdByTitle(this.context,"Functions"),"PHP | ctype_punct() Function","The ctype_punct() is an inbuilt function in PHP which is used to check printable character which is not whitespace or an alphanumeric character. Every character in a string is printable, but neither alphanumeric, digit or blank then return True otherwise return False.Syntax:bool ctype_punct ( $text )Parameters: This function accepts a single parameter $text. It is a mandatory parameter which specifies the string.Return Value: It returns True if string does not contain any alphanumeric, digit or blank character and False on failure.Examples:  Input : GeeksforGeeks  Output : No  Explanation: String (GeeksforGeeks) contains only the alphanumeric characters.    Input : $%^&@  Output : Yes  Explanation: String ($%^&@) contains only the punctuation character.Below programs illustrate the ctype_punct() function.Program 1:<?php// PHP program to check the given// string is not containing any// alphanumeric or digit or blank// character$string1 = \'GeeksforGeeks\';if ( ctype_punct($string1))        echo \"Yes\\n\";    else        echo \"No\\n\";$string2 = \'$%^&@\';if ( ctype_punct($string2))        echo \"Yes\\n\";    else        echo \"No\\n\";?>Output:  No  YesProgram 2: Code for ctype_punct() function accepts input array of string which contains integers and special Symbol.<?php// PHP program to check given// string is not contain any// alphanumeric or digit or// blank character$strings = array (    \'Geeks\',    \'Geeks space\',    \'@@##-- /\',    \'12345\',    \'\\n\',    \'&%@!()^\');// Checking above given strings// by used of ctype_punct()// function .foreach ($strings as $test) {    if (ctype_punct($test))        echo \"Yes\\n\";    else        echo \"No\\n\";}?>Output:  No  No  No  No  No  Yes");create(getIdByTitle(this.context,"Functions"),"PHP | call_user_func() Function","The call_user_func() is an inbuilt function in PHP which is used to call the callback given by the first parameter and passes the remaining parameters as argument. It is used to call the user-defined functions.Syntax:mixed call_user_func ( $function_name[, mixed $value1[, mixed $... ]])Here, mixed indicates that a parameter may accept multiple types.Parameter: The call_user_func() function accepts two types of parameters as mentioned above and described below:$function_name: It is the name of function call in the list of defined function. It is a string type parameter.$value: It is mixed value. One or more parameters to be passed to the function.Return Value: This function returns the value returned by the callback function.Below programs illustrate the call_user_func() function in PHP:Program 1: Call the function<?phpfunction GFG($value){    echo \"This is $value site.\\n\";}call_user_func(\'GFG\', \"GeeksforGeeks\");call_user_func(\'GFG\', \"Content\");?>Output:  This is GeeksforGeeks site.  This is Content site.Program 2: call_user_func() using namespace name<?phpnamespace Geeks;class GFG {    static public function demo() {        print \"GeeksForGeeks\\n\";    }}call_user_func(__NAMESPACE__ .\'\\GFG::demo\');// Another way of declarationcall_user_func(array(__NAMESPACE__ .\'\\GFG\', \'demo\'));?>Output:  GeeksForGeeks  GeeksForGeeksProgram 3: Using a class method with call_user_func()<?phpclass GFG {    static function show()    {        echo \"Geeks\\n\";    }}$classname = \"GFG\";call_user_func($classname .\'::show\');// Another way to use object$obj = new GFG();call_user_func(array($obj, \'show\'));?>Output:  Geeks  GeeksProgram 4: Using lambda function with call_user_func()<?phpcall_user_func(function($arg) { print \"$arg\\n\"; }, \'GeeksforGeeks\');?>Output:  GeeksforGeeksReferences: http://php.net/manual/en/function.call-user-func.php");create(getIdByTitle(this.context,"Functions"),"PHP | create_function() Function","The create_function() is an inbuilt function in PHP which is used to create an anonymous (lambda-style) function in the PHP.Syntax:string create_function ( $args, $code )Parameters: This function accepts two parameters which is describes below:$args: It is a string type function argument.$code: It is a string type function code.Note: Usually, these parameters will be passed as single quote delimited strings. The reason for using single quoted strings is to protect the variable names from parsing, otherwise, double quotes will be needed to escape the variable names, e.g. \\$avar.Return Value: This function returns a unique function name as a string, Otherwise returns FALSE on error.Below programs illustrate the create_function() function in PHP:Program 1: Creating an anonymous function with create_function()<?php//create a function from information// gathered at run time,$newfunc = create_function(\'$a, $b\', \'return       \"ln($a) + ln($b) = \" . log($a * $b);\');echo \"New anonymous function: $newfunc\\n\";echo $newfunc(2, M_E) . \"\\n\";?>Output:  New anonymous function: lambda_1  ln(2) + ln(2.718281828459) = 1.6931471805599Program 2: Create a general function with create_function()<?php// General function that can apply a set of// operations to a list of parameters.function Program($value1, $value2, $arr){    foreach ($arr as $val) {        echo $val($value1, $value2) . \"\\n\";    }}// create a bunch of math functions$f1 = \'if ($a >= 0) { return \"b * a^2 = \".       $b * sqrt($a);} else { return false; }\';$f2 = \"return \\\"min(a, b) = \\\".min(\\$a, \\$b);\";$farr = array(    create_function(\'$x, $y\', \'return       \"a hypotenuse: \".sqrt($x * $x + $y * $y);\'),    create_function(\'$a, $b\', $f1),    create_function(\'$a, $b\', $f2));echo \"first array of anonymous functions\" .        \"\\nParameter is a = 2 and b = 3\\n\";Program(2, 3, $farr);// now make a bunch of string functions$sarr = array(    create_function(\'$a, $b\', \'return     \"Lower case : \" . strtolower($a) ;\'),    create_function(\'$a, $b\', \'return    \"Similar Character : \" .    similar_text($a, $b, $percent);\'));echo \"\\nSecond array of anonymous functions\" .      \"\\nParameter is a = GeeksForGeeks and\" .      \"b = GeeksForGeeks\\n\";Program(\"GeeksForGeeks\", \"GeeksForGeeks\", $sarr);?>Output:  first array of anonymous functions  Parameter is a = 2 and b = 3  a hypotenuse: 3.605551275464  b * a^2 = 4.2426406871193  min(a, b) = 2    Second array of anonymous functions  Parameter is a = GeeksForGeeks andb = GeeksForGeeks  Lower case : geeksforgeeks  Similar Character : 13References: http://php.net/manual/en/function.create-function.php");create(getIdByTitle(this.context,"Functions"),"PHP | is_numeric() Function","The is_numeric() function is an inbuilt function in PHP which is used to check whether a variable passed in function as a parameter is a number or a numeric string or not. The function returns a boolean value.Syntax:bool is_numeric ( $var )Parameters: The function accepts a single parameter which is mandotary and described below:$var: This input parameter is the variable which the function checks for whether it is a number or a numeric string. Based on this verification, the function returns a boolean value.Return Value: The function returns TRUE if $var is a number or a numeric string and returns FALSE otherwise.Examples:  Input : $var = 12  Output : True    Input : $var = \"Geeks for Geeks\"  Output : FalseBelow programs illustrate the is_numeric() function:Program 1: In this program, a number is passed as input.<?php$num = 12;if (is_numeric($num)) {        echo $num . \" is numeric\";    }    else {        echo $num . \" is not numeric\";    }?>Output:  12 is numericProgram 2: In this program, a string is passed as input.<?php$element = \"Geeks for Geeks\";if (is_numeric($element)) {        echo $element . \" is numeric\";    }    else {        echo $element . \" is not numeric\";    }?>Output:  Geeks for Geeks is not numericProgram 3: In this program, a numeric string is passed as input.<?php$num = \"467291\";if (is_numeric($num)) {        echo $num . \" is numeric\";    }    else {        echo $num . \" is not numeric\";    }?>Output:  467291 is numericProgram 4:<?php$array = array(    \"21/06/2018\",    4743,    0x381,    01641,   0b1010010011,    \"Geek Classes\");foreach ($array as $i) {    if (is_numeric($i)) {        echo $i . \" is numeric\".\"\\n\";    } else {        echo $i . \" is NOT numeric\".\"\\n\";    }}?>Output:  21/06/2018 is NOT numeric  4743 is numeric  897 is numeric  929 is numeric  659 is numeric  Geek Classes is NOT numeric");create(getIdByTitle(this.context,"Functions"),"PHP | number_format() Function","The number_format() function is an inbuilt function in PHP which is used to format a number with grouped thousands. It returns the formatted number on success otherwise it gives E_WARNING on failure.Syntax:string number_format ( $number, $decimals, $decimalpoint, $sep )Parameters: This function accepts four parameters as mentioned above and described below:$number: It is required parameter which specified the number to be formatted. If no other parameters are set, the number will be formatted without decimals and with the comma (, ) as the thousands separator.$decimals: It is optional parameter and used to specifies decimals. If this parameter is set, the number will be formatted with a dot (.) as the decimal point.$decimalpoint: It is optional parameter and used to specifies the string to use for the decimal point.$sep: It is optional parameter and used to specifies string to use for thousands separator. If this parameter is given, then all other parameters are required.Return Value: It returns Formatted Number in case success, otherwise it gives E_WARNING in failure.Examples:  Input: $number = 100000  Output: 10, 000    Input: $number = 10000          $decimals = 3          $decimalpoints = \".\" $sep =,  Output: 10, 0000.000Below programs illustrate The number_format() function in PHP:Program 1:<?php$num1 = \"999999.49\";// With out decimal point parameterecho number_format($num1).\"\\n\";// With decimal Point parameterecho number_format($num1, 3).\"\\n\";$num2 = \"9999999.99\";// With out decimal point parameter// return Round valueecho number_format($num2).\"\\n\";// With decimal Point parameterecho number_format($num2, 3).\"\\n\";// With All four parametersecho number_format(\"1000000.99\", 3, \"#\", \"GGG\");?>Output:  999,999  999,999.490  10,000,000  9,999,999.990  1GGG000GGG000#990Program 2: If pass anything instead of numbers it gives warning.<?php$num = \"GFG\";// With out decimal point parameterecho number_format($num).\"\\n\\n\";// With decimal Point parameterecho number_format($num, 3);?>Output:  PHP Warning:  number_format() expects parameter 1 to be float,  string given in /home/ac476aaecea758334cb8ed146bcbb8f6.php on line 5    PHP Warning:  number_format() expects parameter 1 to be float,   string given in /home/ac476aaecea758334cb8ed146bcbb8f6.php on line 8Program 3: This function does not accept three parameters, only accept 1, 2 or 4 parameters.<?php$num = 1000000;// passing 3 parameters It gives errors because function// accepting only 1, 2 or 4 parametersecho number_format($num, 3, \", \");?>Output:  PHP Warning:  Wrong parameter count for number_format()   in /home/e426108b066d9a86366249bf7b626d19.php on line 6");create(getIdByTitle(this.context,"Functions"),"PHP | strip_tags() Function","The strip_tags() function is an inbuilt function in PHP which is used to strips a string from HTML, and PHP tags. This function returns a string with all NULL bytes, HTML and PHP tags stripped from a given $str.Syntax:string strip_tags( $str, $allowable_tags )Parameters: This function accepts two parameters as mentioned above and described below:$string: It is required parameter which specifies the string to be check.$allow: It is an optional parameter which specifies allowable tags. These tags will not be removed.Return Value: This function Returns the stripped string.Exceptions:This function strip HTML comments and PHP tags. It can not be used this in $allow tags because this is already hardcoded.PHP 5.3.4 and later versions, ignored the self-closing XHTML tagsstrip_tags() does not validate the HTML.Below programs illustrate the strip_tags() function in PHP:Program 1:<?php// PHP programme to illustrate// strip_function without $allow parameterecho strip_tags(\"Hello <b>GeeksforGeeks!</b>\");?>Output:  Hello GeeksforGeeks!Program 2:<?php// PHP programme to illustrate// strip_function with $allow parameterecho strip_tags(\"Hello <b><i>GeeksorGeeks!</i></b>\", \"<b>\");?>Output:  Hello <b>GeeksorGeeks!</b>Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar digit() function","The IntlChar::digit() function is an inbuilt function in PHP which is used to get the decimal digit value of a code point for a given radix. This function returns the decimal digit value of the code point in the specified radix.Syntax:int IntlChar::digit( $codepoint, $radix )Parameters: This function accepts two parameters as mentioned above and described below:$codepoint: The value of $codepoint is an integer or character, which is encoded as a UTF-8 string.$radix: It is optional parameter. Its default value is 10.Return Value: This function returns the number represented by the character in the given radix, or False if there is no value or if the value exceeds the radix.Note: Valid and invalid function argument:If both $radix or $digit is not valid then return NULL.The $radix argument is valid if its value lies between $radix >= 2 and $radix <= 36.The digit is valid if its value is 0 <= digit < radix.The character has a decimal digit value. This characters comes under general category Nd(decimal digit numbers) and a Numeric_Type of Decimal.The character is uppercase Latin letters in between ‘A’ to ‘Z’. Then the value of character is c-‘A’+10.The character is lowercase Latin letters in between ‘a’ to ‘z’. Then the value of character is ch-‘a’+10.Latin letters from both the ASCII range (0061..007A, 0041..005A) as well as from the Full width ASCII range (FF41..FF5A, FF21..FF3A) are recognized.Below programs illustrate the IntlChar::digit() function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::digit()// function// Input data is single digitvar_dump(IntlChar::digit(\"6\"));// Input data is single digitvar_dump(IntlChar::digit(\"3\"));// Input data is character typevar_dump(IntlChar::digit(\"A\"));// // Input data is character type with basevar_dump(IntlChar::digit(\"P\", 16));// // Input data is character type with basevar_dump(IntlChar::digit(\"9\", 2));?>Output:  int(6)  int(3)  bool(false)  bool(false)  bool(false)Program 2:<?php// PHP code to illustrate IntlChar::digit()// Declare an array $arr$arr = array(\"G\", \"GeeksforGeeks\", \"^\", \"1001\", \"6\", \"\\n\",                                             \"\\n\\n\", \"\\t\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::digit($val));}?>Output:  bool(false)  NULL  bool(false)  NULL  int(6)  bool(false)  NULL  bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar getBlockCode() Function","The IntlChar::getBlockCode() function is an inbuilt function in PHP which is used to get the Unicode allocation block containing the code point. This function returns the Unicode allocation block that contains the character.Syntax:int IntlChar::getBlockCode ( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The $codepoint value is an integer values or character, which is encoded as a UTF-8 string.Return Value: This function returns the block value for $codepoint. Some block value of codepoint are listed below:IntlChar::BLOCK_CODE_BASIC_LATINIntlChar::BLOCK_CODE_GREEKIntlChar::BLOCK_CODE_MISCELLANEOUS_SYMBOLSBelow programs illustrate the IntlChar::getBlockCode() function in PHP:Program 1:<?php// PHP function to illustrate// the use of IntlChar::getBlockCode()// Input data is character typevar_dump(IntlChar::getBlockCode(\"G\") === IntlChar::BLOCK_CODE_BASIC_LATIN);// Input data is string typevar_dump(IntlChar::getBlockCode(\"ABC\") === IntlChar::BLOCK_CODE_BASIC_LATIN);// Input data is character typevar_dump(IntlChar::getBlockCode(\"*\") === IntlChar::BLOCK_CODE_GREEK);// Input data is unicode character typevar_dump(IntlChar::getBlockCode(\"\\u{2603}\") === IntlChar::BLOCK_CODE_MISCELLANEOUS_SYMBOLS);// Input data is character typevar_dump(IntlChar::getBlockCode(\"@\") === IntlChar::BLOCK_CODE_GREEK);?>Output:  bool(true)  bool(false)  bool(false)  bool(true)  bool(false)Program 2:<?php// PHP code to illustrate getBlockCode()// Declare an array $arr$arr = array(\"G\", \"GeeksforGeeks\", \"^\", \"1001\", \"6\", \"\\n\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::getBlockCode($val));}?>Output:  int(1)  NULL  int(1)  NULL  int(1)  int(1)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar getBidiPairedBracket() Function","The IntlChar::getBidiPairedBracket() function is an inbuilt function in PHP which is used to get the paired bracket character for a code point. This function mapped with paired bracket. If the character has no pair bracket then it return the character itself.Syntax:IntlChar::getBidiPairedBracket ( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The $codepoint value is an integer values or character, which is encoded as a UTF-8 string.Return Value: This function returns the mapped paired bracket. If the character has no pair bracket then it return the character itself.Below programs illustrate the IntlChar::getBidiPairedBracket() function in PHP:Program 1:<?php// PHP function to illustrate// the use of IntlChar::getBidiPairedBracket()// Input data is number typevar_dump(IntlChar::getBidiPairedBracket(91));// Input data is bracket character typevar_dump(IntlChar::getBidiPairedBracket(\'[\'));// Input data is bracket character typevar_dump(IntlChar::getBidiPairedBracket(\'}\'));// Input data is bracket character typevar_dump(IntlChar::getBidiPairedBracket(\'\"\'));// Input data is string typevar_dump(IntlChar::getBidiPairedBracket(\'ABC\'));// Input data is character typevar_dump(IntlChar::getBidiPairedBracket(\'A\'));?>Output:  int(93)  string(1) \"]\"  string(1) \"{\"  string(1) \"\"\"  NULL  string(1) \"A\"Program 2:<?php// PHP code to illustrate the// IntlChar::getBidiPairedBracket() function// Declare an array $arr$arr = array(\"G\", \"{\", \"^\", \")\", \"6\", \"{}\", \"))\", \"\\t\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::getBidiPairedBracket($val));}?>Output:  string(1) \"G\"  string(1) \"}\"  string(1) \"^\"  string(1) \"(\"  string(1) \"6\"  NULL  NULL  string(1) \"    \"Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar getFC_NFKC_Closure() Function","The IntlChar::getFC_NFKC_Closure() function is an inbuilt function in PHP which is used to get the FC_NFKC_Closure property for a code point. This function returns the FC_NFKC_Closure property string for the code point. If the code point is none then it returns empty string.Syntax:string IntlChar::getFC_NFKC_Closure( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The $codepoint value is an integer values or character, which is encoded as a UTF-8 string.Return Value: This function returns the FC_NFKC_Closure property string for the code point, or an empty string if there is none.Below programs illustrate the IntlChar::getFC_NFKC_Closure() function in PHP:Program 1:<?php// PHP function to illustrate// the use of IntlChar::getCombiningClass()// Input data is unicode character typevar_dump(IntlChar::getFC_NFKC_Closure(\"\\u{2121}\"));// Input data is unicode character typevar_dump(IntlChar::getFC_NFKC_Closure(\"\\u{1D2D}\"));// Input data is string typevar_dump(IntlChar::getFC_NFKC_Closure(\"\\p{143}\"));// Input data is character typevar_dump(IntlChar::getFC_NFKC_Closure(\" \"));// Input data is unicode character typevar_dump(IntlChar::getFC_NFKC_Closure(\"\\u{350}\"));// Input data is string typevar_dump(IntlChar::getFC_NFKC_Closure(\"XYZ\"));// Input data is unicode character typevar_dump(IntlChar::getFC_NFKC_Closure(\"\\u{0358}\"));?>Output:  string(3) \"tel\"  string(2) \"Ã¦\"  NULL  string(0) \"\"  string(0) \"\"  NULL  string(0) \"\"Program 2:<?php// PHP code to illustrate getFC_NFKC_Closure()// Declare an array $arr$arr = array(\"\\u{2121}\", \"\\u{1D2D}\", \" \", \"\\u{350}\", \"XYZ\", \"G\",                \"GeeksforGeeks\", \"^\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::getFC_NFKC_Closure($val));}?>Output:  string(3) \"tel\"  string(2) \"Ã¦\"  string(0) \"\"  string(0) \"\"  NULL  string(0) \"\"  NULL  string(0) \"\"Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar getUnicodeVersion() Function","The IntlChar::getUnicodeVersion() function is an inbuilt function in PHP which is used to get the Unicode version. The Unicode standard version information is filled into an array. For example, Unicode version 2.2.1 is represented as an array with the values [2, 2, 1, 0].Syntax:array IntlChar::getUnicodeVersion ( void )Parameters: This function does not accept any parameters.Return Value: This function returns an array containing the Unicode version number.Below programs illustrate the IntlChar::getUnicodeVersion() function in PHP:Program:<?phpvar_dump(IntlChar::getUnicodeVersion());?>Output:  array(4) {    [0]=>    int(7)    [1]=>    int(0)    [2]=>    int(0)    [3]=>    int(0)  }Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar getCombiningClass() Function","The IntlChar::getCombiningClass() function is an inbuilt function in PHP which is used to get the combining class of the code point.Syntax:int IntlChar::getCombiningClass ( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The $codepoint value is an integer values or character, which is encoded as a UTF-8 string.Return Value: This function returns the combining class of the code point.Below programs illustrate the IntlChar::getCombiningClass() function in PHP:Program 1:<?php// PHP function to illustrate// the use of IntlChar::getCombiningClass()// Input data is string typevar_dump(IntlChar::getCombiningClass(\"\\p{143}\"));// Input data is character typevar_dump(IntlChar::getCombiningClass(\" \"));// Input data is unicode character typevar_dump(IntlChar::getCombiningClass(\"\\u{350}\"));// Input data is string typevar_dump(IntlChar::getCombiningClass(\"XYZ\"));// Input data is unicode character typevar_dump(IntlChar::getCombiningClass(\"\\u{0358}\"));?>Output:  NULL  int(0)  int(230)  NULL  int(232)Program 2:<?php// PHP code to illustrate getCombiningClass()// Declare an array $arr$arr = array(\"\\u{314}\", \"GeeksforGeeks\", \"^\", \"\\u{0324}\", \"6\", \"\\n\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::getCombiningClass($val));}?>Output:  int(230)  NULL  int(0)  int(220)  int(0)  int(0)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | timezone_version_get() Function","The timezone_version_get() function is an inbuilt function in PHP which is used to return the version of the timezone database. No parameters are required to be passed in the timezone_version_get() function.Syntax:string timezone_version_get()Parameters: The timezone_version_get() function does not require any parameters.Return Value: It returns the version of the timezone database as a string.Exceptions The timezone_version_get() function produce the outputs 0.system because the PHP version hasn’t been upgraded.Below program illustrate the timezone_version_get() function in PHP:Program:<?php// Displaying the version of the timezone database$timezone_db= timezone_version_get();echo (\"Timezone Database Version: \" . $timezone_db );?>Output:  Timezone Database Version: 0.system");create(getIdByTitle(this.context,"Functions"),"PHP | timezone_open() Function","The timezone_open() function is an inbuilt function in PHP which is used to create a new DateTimeZone object. The timezone_open() function accepts the timezone as a parameter and returns the DateTimeZone object on success or False on failure.Syntax:timezone_open( $timezone )Parameters: This function accepts single parameter $timezone which is mandatory. It specify the timezone of the new DateTimeZone object to be created.Return Value: It returns the DateTimeZone object on success or False on failure.Exceptions: The timezone passed as a parameter must be a supported timezone in PHP else it may result in incorrect results.Below programs illustrate the timezone_open() function in PHP:Program 1:<?php// Creating a new DateTimeZone object$timezone = timezone_open(\"America/Chicago\");echo (\"The new DateTimeZone object created is \"              . timezone_name_get($timezone ));?>Output:  The new DateTimeZone object created is America/ChicagoProgram 2:<?php// Array of timezones$timezones = array(\'Europe/London\', \'Asia/Kolkata\');foreach ($timezones as $tz) {    $name = timezone_open($tz);    echo (\"The new DateTimeZone object created is \"                . timezone_name_get($name). \"<br>\");}?>Output:  The new DateTimeZone object created is Europe/LondonThe new DateTimeZone object created is Asia/KolkataNote: The timezone_open() function gives warning since the timezone passed is not a supported/valid timezone.");create(getIdByTitle(this.context,"Functions"),"PHP | timezone_offset_get() Function","The timezone_offset_get() function is an inbuilt function in PHP which is used to return the timezone offset from GMT. The date time object and the date-time are sent as a parameter to the timezone_offset_get() function and return the timezone offset in seconds on success or False on failure.Syntax:int timezone_offset_get( $object, $datetime )Parameters: This function accepts two parameter as mentioned above and described below:$object: It is a mandatory parameter which specifies the DateTimeZone object.$datetime: It is also a mandatory parameter which specifies the date/time from which the offset has to be computed.Return Value: It returns the timezone offset in seconds on success or False on failure.Exceptions: The timezone_offset_get() function is an alias of DateTimeZone::getOffset() function.Below programs illustrate the timezone_offset_get() function in PHP:Program 1:<?php// Open the timezone of America/Chicago$timezone = timezone_open(\"America/Chicago\");// Displaying the offset of America/Chicago and Europe/Amsterdam$datetime_eur = date_create(\"now\", timezone_open(\"Europe/Amsterdam\"));echo timezone_offset_get($timezone, $datetime_eur);?>Output:  -18000Program 2:<?php// Open the timezone of America/Chicago and Europe/Amsterdam$timezone_chicago = new DateTimeZone(\"America/Chicago\");$timezone_amsterdam = new DateTimeZone(\"Europe/Amsterdam\");$chicago = new DateTime(\"now\", $timezone_chicago);$amsterdam = new DateTime(\"now\", $timezone_amsterdam);// Calculating the offset between the timezones$Offset = $timezone_amsterdam -> getOffset($chicago);// Dumping the offset variablevar_dump($Offset);?>Output:  int(7200)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | timezone_name_get() Function","The timezone_name_get() function is an inbuilt function in PHP which is used to return the name of the timezone. The date time object is sent as a parameter to the timezone_name_get() function and it returns the name of the timezone on success or False on failure.Syntax:string timezone_name_get( $object )Parameters: This function accepts single parameter $object which is mandatory. It is used to specifies the DateTimeZone object.Return Value: This function returns the name of the timezone on success or False on failure.Exceptions: The timezone_name_get() function is an alias of DateTimeZone::getName() function.Below programs illustrate the timezone_name_get() function in PHP:Program 1:<?php// Opening the timezone of America/Chicago$timezone = timezone_open(\"America/Chicago\");// Displaying the name of the timezoneecho (\"The name of the timezone is \" . timezone_name_get($timezone));?>Output:  The name of the timezone is America/ChicagoProgram 2:<?php// Opening the default timezoneecho (\"Default time zone is \" . date_default_timezone_get());echo \"\\n\";// Declaring a new timezone$new_timezone = \'America/Chicago\';if( date_default_timezone_set( $new_timezone) ){  echo \"New time zone is \". date_default_timezone_get();}?>Output:  Default time zone is UTC  New time zone is America/ChicagoRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | timezone_name_from_abbr() Function","The timezone_name_from_abbr() function is an inbuilt function in PHP which is used to return the timezone name from abbreviation. The abbreviation is sent as a parameter to the timezone_name_from_abbr() function and it returns the name of the timezone on success or False on failure.Syntax:string timezone_name_from_abbr( $abbr, $gmtoffset, $isdst )Parameters: This function accepts three parameters as mentioned above and described below:$abbr: It is a mandatory parameter which specifies the timezone abbreviation.$gmtoffset: It is an optional parameter which specifies the offset from GMT in seconds. The default value is -1, which means that first found timezone corresponding to abbr is returned.$isdst: It is an optional parameter which specifies the daylight saving time indicator. The default value is -1, which means that whether the timezone has daylight saving or not is not taken into consideration when searching.Return Value: It returns the name of the timezone on success or False on failure.Exceptions: The timezone_name_from_abbr() function is an alias of DateTimeZone::listAbbreviations function.Below program illustrate the timezone_name_from_abbr() function in PHP:Program 1:<?php// Displaying the name of timezone using the abbreviation$abbr = timezone_name_from_abbr(\"PST\");echo (\"PST stands for \" . $abbr);?>Output:  PST stands for America/Los_AngelesProgram 2:<?php// Displaying the name of timezone using the abbreviation$abbr = timezone_name_from_abbr(\"\", 7200, 0);echo (\"The given parameter stands for \" . $abbr);?>Output:  The given parameter stands for Europe/HelsinkiRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | timezone_location_get() Function","The timezone_location_get() function is an inbuilt function in PHP which is used to return the location information for the given timezone. The date time object is sent as a parameter to the timezone_location_get() function and it returns location information related to the timezone on success or False on failure.Syntax:timezone_location_get( $object )Parameters: This function accepts single parameter $object which is mandatory. It is used to specify the DateTimeZone object.Return Value: This function returns the location information for a given timezone on success or False on failure.Exception: The timezone_location_get() function is an alias of DateTimeZone::getLocation() function.Below programs illustrate the timezone_location_get() function in PHP:Program 1:<?php// Opening a timezone$timeZone = timezone_open(\"Asia/Kolkata\");// Displaying the location details of a timezoneecho \"Location Details of the Specified Timezone: \\n\";print_r(timezone_location_get($timeZone));?>Output:  Location Details of the Specified Timezone:   Array  (      [country_code] => IN      [latitude] => 22.53333      [longitude] => 88.36666      [comments] =>   )Program 2:<?php// Declaring a timezone$timeZone = new DateTimeZone(\"Asia/Kolkata\");// Displaying the location details of a timezoneecho (\"Location Details of the Specified Timezone:\\n\");print_r($timeZone->getLocation());?>Output:  Location Details of the Specified Timezone:  Array  (      [country_code] => IN      [latitude] => 22.53333      [longitude] => 88.36666      [comments] =>   )Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | timezone_identifiers_list() Function","The timezone_identifiers_list() function is an inbuilt function in PHP which is used to return an indexed array containing all the timezone identifiers. The datetimezone object is sent as a parameter to the timezone_identifiers_list() function and it returns an indexed array on success or False on failure.Syntax:array timezone_identifiers_list( $datetimezone, $country )Parameters: This function accepts two parameter as mentioned above and described below:$datetimezone: It is an optional parameter which specifies the DateTimeZone class constant.country: It is also an optional parameter which specifies a two-letter ISO 3166-1 compatible country code.Return Value: This function returns an indexed array on success or False on failure.Exceptions: The timezone_identifiers_list() function is an alias of DateTimeZone::listIdentifiers() function.Below programs illustrate the timezone_identifiers_list() function in PHP:Program 1:<?php// Displaying all the timezone identifiers of Antarcticaecho (\"All the timezones available in this timezone are \");print_r(timezone_identifiers_list(4));?>Output:  All the timezones available in this timezone are Array  (      [0] => Antarctica/Casey      [1] => Antarctica/Davis      [2] => Antarctica/DumontDUrville      [3] => Antarctica/Macquarie      [4] => Antarctica/Mawson      [5] => Antarctica/McMurdo      [6] => Antarctica/Palmer      [7] => Antarctica/Rothera      [8] => Antarctica/Syowa      [9] => Antarctica/Troll      [10] => Antarctica/Vostok  )Program 2:<?php// Displaying the timezone identifiers of Africa$timezone_identifiers = DateTimeZone::listIdentifiers();for ($i = 0; $i < 8; $i++){    echo \"$timezone_identifiers[$i]\\n\";}?>Output:  Africa/Abidjan  Africa/Accra  Africa/Addis_Ababa  Africa/Algiers  Africa/Asmara  Africa/Bamako  Africa/Bangui  Africa/BanjulRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | timezone_abbreviations_list() Function","The timezone_abbreviations_list() function is an inbuilt function in PHP which is used to return an associative array containing dst, offset, and the timezone name. No parameters are required to send to the timezone_abbreviations_list() function and it returns an associative array on success or False on failure.Syntax:array timezone_abbreviations_list()Parameters: The timezone_abbreviations_list() function does not require any parameters.Return Value: This function returns an associative array containing dst, offset, and the timezone name.Exceptions: The timezone_identifiers_list() function is an alias of DateTimeZone::listAbbreviations() function.Below program illustrate the timezone_abbreviations_list() function in PHP:Program 1:<?php// Printing dst, offset, and timezone// name for the \"acst\" timezone$timezone_list = timezone_abbreviations_list();print_r($timezone_list[\"acst\"]);?>Output:  Array  (      [0] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/Adelaide          )        [1] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/Adelaide          )        [2] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/Broken_Hill          )        [3] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/Darwin          )        [4] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/North          )        [5] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/South          )        [6] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/Yancowinna          )        [7] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/Broken_Hill          )        [8] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/Darwin          )        [9] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/North          )        [10] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/South          )        [11] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/Yancowinna          )    )Program 2:<?php// Printing dst, offset, and timezone name// for the \"acst\" timezone$timezone_abbreviations = DateTimeZone::listAbbreviations();print_r($timezone_abbreviations[\"acst\"]);?>Output:  Array  (      [0] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/Adelaide          )        [1] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/Adelaide          )        [2] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/Broken_Hill          )        [3] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/Darwin          )        [4] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/North          )        [5] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/South          )        [6] => Array          (              [dst] =>               [offset] => 32400              [timezone_id] => Australia/Yancowinna          )        [7] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/Broken_Hill          )        [8] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/Darwin          )        [9] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/North          )        [10] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/South          )        [11] => Array          (              [dst] =>               [offset] => 34200              [timezone_id] => Australia/Yancowinna          )    )Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | timezone_transitions_get() Function","The timezone_transitions_get() function is an inbuilt function in PHP which is used to returns all transitions for the timezone. This function returns an array containing associative array of all transitions on success or False on failure.Syntax:Procedural style:timezone_transitions_get( $object, $timestamp_begin, $timestamp_end )Object oriented style:DateTimeZone::getTransitions( $timestamp_begin, $timestamp_end )Parameters: This function accepts three parameters as mentioned above and described below:$object: It is a mandatory parameter which is used to specify the DateTime object which is returned by the date_create() function.$timestamp_begin: This parameter is used to set begin timestamp.$timestamp_end: This parameter is used to set end timestamp.Return Value: This function returns an array containing associative array with all transitions on success or False on failure.Below programs illustrate the timezone_transitions_get() function in PHP:Program 1:<?php// Set time_zone object$time_zone = timezone_open(\'Asia/Kolkata\');// Set the transition of time_zone$transition = timezone_transitions_get( $time_zone );// Display an array containing associative// array of all transitionprint_r(array_slice($transition, 0, 3));?>Output:  Array  (      [0] => Array          (              [ts] => -9223372036854775808              [time] => -292277022657-01-27T08:29:52+0000              [offset] => 21200              [isdst] =>               [abbr] => HMT          )        [1] => Array          (              [ts] => -2147483648              [time] => 1901-12-13T20:45:52+0000              [offset] => 19270              [isdst] =>               [abbr] => MMT          )        [2] => Array          (              [ts] => -2019705670              [time] => 1905-12-31T18:38:50+0000              [offset] => 19800              [isdst] =>               [abbr] => IST          )    )Program 2:<?php// Set time_zone object$timezone = new DateTimeZone(\"Asia/Kolkata\");// Set the transition of time_zone$transition = $timezone->getTransitions();// Display an array containing associative// array of all transitionprint_r(array_slice($transition, 0, 3));?>Output:  Array  (      [0] => Array          (              [ts] => -9223372036854775808              [time] => -292277022657-01-27T08:29:52+0000              [offset] => 21200              [isdst] =>               [abbr] => HMT          )        [1] => Array          (              [ts] => -2147483648              [time] => 1901-12-13T20:45:52+0000              [offset] => 19270              [isdst] =>               [abbr] => MMT          )        [2] => Array          (              [ts] => -2019705670              [time] => 1905-12-31T18:38:50+0000              [offset] => 19800              [isdst] =>               [abbr] => IST          )    )Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_default_timezone_get() Function","The date_default_timezone_get() function is an inbuilt function in PHP which is used to gets the default timezone used by all date/time functions in a script.Syntax:string date_default_timezone_get( void )Parameter: This function does not accepts any parameter.Return Value: This function returns a string.Note: This function returns the default timezone by:Reading the timezone using the date_default_timezone_set() function.Before PHP 5.4.0, Reading the TZ environment variable.Reading the value of the date.timezone ini optionBefore PHP 5.4.0, Querying the host operating system (if supported and allowed by the OS). This uses an algorithm that has to guess the timezone.If any statement of above not true then date_default_timezone_get() will return a default timezone of UTC.Below programs illustrate the date_default_timezone_get() function in PHP:Program 1:<?php// Set the default timezonedate_default_timezone_set(\'Asia/Kolkata\');// Create timezone object$timezone_object = date_default_timezone_get();// If timzone object is trueif ($timezone_object) {    echo \'date_default_timezone_set: \' . date_default_timezone_get();}?>Output:  date_default_timezone_set: Asia/KolkataProgram 2:<?php// Set the default timezonedate_default_timezone_set(\'Asia/Kolkata\');echo date_default_timezone_get() . \' => \' . date(\'e\') . \' => \' . date(\'T\');?>Output:  Asia/Kolkata => Asia/Kolkata => ISTRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_default_timezone_set() Function","The date_default_timezone_set() function is an inbuilt function in PHP which is used to set the default timezone used by all date/time functions in a script. This function returns False if the timezone is not valid, or True otherwise.Syntax:bool date_default_timezone_set( $timezone_identifier )Parameters: This function accepts single parameter $timezone_identifier which is mandatory. This parameter set the timezone identifier, like UTC or Asia/Kolkata.Return Value: This function returns False if the timezone_identifier is not valid, or True otherwise.Below programs illustrate the date_default_timezone_set() function in PHP:Program 1:<?php// Set timezonedate_default_timezone_set(\'Asia/Kolkata\');// Create$timezone_object = date_default_timezone_get();// Compare the timezone with ini-set timezoneif (strcmp($timezone_object, ini_get(\'date.timezone\'))){    echo \'Script timezone differs from ini-set timezone.\';} else {    echo \'Script timezone and ini-set timezone match.\';}?>Output:  Script timezone differs from ini-set timezone.Program 2:<?php// Set the timezonedate_default_timezone_set(\'Asia/Dubai\');// Create the timezone object$timezone_object = date_default_timezone_get();// Compare the timezone with ini-set timezoneif (strcmp($timezone_object, ini_get(\'date.timezone\'))){    echo \'Script timezone differs from ini-set timezone.\';} else {    echo \'Script timezone and ini-set timezone match.\';}?>Output:  Script timezone differs from ini-set timezone.Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_timezone_set() Function","The date_timezone_set() function is an inbuilt function in PHP which is used to sets the time zone for the DateTime object. This function returns the DateTime object or False on failure.Syntax:Procedural style:date_timezone_set( $object, $timezone )Object oriented style:DateTime::setTimezone( $timezone )Parameters: This function accepts two parameters as mentioned above and described below:$object: It is a mandatory parameter which is used to specify the DateTime object which is returned by the date_create() function.$timezone: This parameter is used to set the DateTimeZone object representing the desired time zone.Return Value: This function returns the DateTime object on success or False on failure.Below programs illustrate the date_timezone_set() function in PHP:Program 1:<?php// Create DateTime object$date = date_create(\'2018-09-15\', timezone_open(\'Asia/Kolkata\'));// Display the date formatecho date_format($date, \'d-m-Y H:i:sP\') . \"\\n\";// Set the date time zonedate_timezone_set($date, timezone_open(\'Asia/Singapore\'));// Display the date formatecho date_format($date, \'d-m-Y H:i:sP\');?>Output:  15-09-2018 00:00:00+05:30  15-09-2018 02:30:00+08:00Program 2:<?php// Create DateTime object$date = new DateTime(\'2018-09-15\', new DateTimeZone(\'Asia/Kolkata\'));// Display the date formatecho $date->format(\'d-m-Y H:i:sP\') . \"\\n\";// Set the date time zone$date->setTimezone(new DateTimeZone(\'Asia/Singapore\'));// Display the date formatecho $date->format(\'d-m-Y H:i:sP\');?>Output:  15-09-2018 00:00:00+05:30  15-09-2018 02:30:00+08:00Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_timezone_get() Function","The date_timezone_get() function is an inbuilt function in PHP which is used to return time zone relative to given DateTime. This function returns a DateTimeZone object on success or False on failure.Syntax:Procedural style:date_timezone_get( $object )Object oriented style:DateTime::getTimezone( void )  DateTimeImmutable::getTimezone( void )  DateTimeInterface::getTimezone( void )Parameters: This function accepts single parameter $object which is mandatory in procedural style. It is used to specify the DateTime object which is returned by the date_create() function. The object oriented style does not require any parameter.Return Value: This function returns a DateTimeZone object on success or False on failure.Below programs illustrate the date_timezone_get() function in PHP:Program 1:<?php// Create DateTime object$date = date_create(null, timezone_open(\'Asia/Kolkata\'));// Return the timezone of given DateTime$time_zone = date_timezone_get($date);// Return the DateTimeZone objectecho timezone_name_get($time_zone);?>Output:  Asia/KolkataProgram 2:<?php// Create DateTime object using DateTimeZone$date = new DateTime(null, new DateTimeZone(\'Asia/Kolkata\'));// Return the timezone of given DateTime$time_zone = $date->getTimezone();// Return the DateTimeZone objectecho $time_zone->getName();?>Output:  Asia/KolkataRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_timestamp_get() Function","The date_timestamp_get() function is an inbuilt function in PHP which is used to gets the Unix timestamp. This function returns the Unix timestamp representing the date.Syntax:Procedural style:int date_timestamp_get( $object )Object oriented style:int DateTime::getTimestamp( void )  int DateTimeImmutable::getTimestamp( void )  int DateTimeInterface::getTimestamp( void )Parameters: This function accepts single parameter $object which is a mandatory. It is used to specify the DateTime object which is returned by the date_create() function. It is used in procedural style only. The object oriented style does not accept any parameter.Return Value: This function returns the Unix timestamp representing the date.Below programs illustrate the date_timestamp_get() function in PHP:Program 1:<?php// Create DateTime object$date = date_create();// Display Unix timestamp dateecho date_timestamp_get($date);?>Output:  1537162804Program 2:<?php// Create DateTime object$date = new DateTime();// Display Unix timestamp dateecho $date->getTimestamp();?>Output:  1537162805Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_timestamp_set() Function","The date_timestamp_set() function is an inbuilt function in PHP which is used to sets the date and time based on an Unix timestamp. This function returns the DateTime object for method chaining or False on failure.Syntax:Procedural style:date_timestamp_set( $object, $unixtimestamp )Object oriented style:DateTime::setTimestamp( $unixtimestamp )Parameters: This function accepts two parameters as mentioned above and described below:$object: It is a mandatory parameter which is used to specify the DateTime object which is returned by the date_create() function.$unixtimestamp: This parameter is used to set the Unix timestamp representing the date.Return Value: This function returns the DateTime object on success or False on failure.Below programs illustrate the date_timestamp_set() function in PHP:Program 1:<?php// Create DateTime object$date = date_create();// Display DateTime in given formatecho date_format($date, \'U = d-m-Y H:i:s\') . \"\\n\";// date_timestamp_set function to Set// Unix timestampdate_timestamp_set($date, 1373502124);// Display DateTime in given formatecho date_format($date, \'U = d-m-Y H:i:s\');?>Output:  1537159667 = 17-09-2018 04:47:47  1373502124 = 11-07-2013 00:22:04Program 2:<?php// Create DateTime object$date = new DateTime();// Display DateTime in given formatecho $date->format(\'U = d-m-Y H:i:s\') . \"\\n\";// date_timestamp_set function to Set// Unix timestamp$date->setTimestamp(1171564674);// Display DateTime in given formatecho $date->format(\'U = d-m-Y H:i:s\');?>Output:  1537159667 = 17-09-2018 04:47:47  1171564674 = 15-02-2007 18:37:54Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | date_time_set() Function","The date_time_set() function is an inbuilt function in PHP which is used to sets the time. This function resets the current time of the DateTime object to a different time.Syntax:Procedural style:date_time_set( $object, $hour, $minute, $second, $microseconds )Object oriented style:DateTime::setTime( $hour, $minute, $second, $microseconds )Parameters: This function accepts five parameters as mentioned above and described below:$object: It is a mandatory parameter which is used to specify the DateTime object which is returned by the date_create() function.$hour: This parameter is used to set hour of time.$minute: This parameter is used to set minute of time.$second: This parameter is used to set second of time.$microsecond: This parameter is used to set microsecond of time.Return Value: This function returns the DateTime object on success or False on failure.Below programs illustrate the date_time_set() function in PHP:Program 1:<?php// Create an DateTime object$date = date_create(\'2018-09-15\');// Set the new DateTimedate_time_set($date, 8, 30);// Display the date in given formatecho date_format($date, \'d-m-Y H:i:s\') . \"\\n\";// Set the new DateTimedate_time_set($date, 12, 40, 30);// Display the date in given formatecho date_format($date, \'Y-m-d H:i:s\') . \"\\n\";?>Output:  15-09-2018 08:30:00  2018-09-15 12:40:30Program 2:<?php// Create DateTime object$date = new DateTime(\'2018-09-15\');// Set the new DateTime$date->setTime(12, 30);// Display the date in given formatecho $date->format(\'d-m-Y H:i:s\') . \"\\n\";// Set the new DateTime$date->setTime(12, 30, 20);// Display the date in given formatecho $date->format(\'Y-m-d H:i:s\');?>Output:  15-09-2018 12:30:00  2018-09-15 12:30:20Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | strptime() Function","The strptime() function is an inbuilt function in PHP which is used to parse a time / date generated with strftime() function. The date and format are sent as a parameter to the strptime() function and it returns an array on success or False on failure. The array returned by the strptime() function contains the following parameters:tm_sec: It denotes the seconds after the minute (0-61).tm_min: It denotes the minutes after the hour (0-59)tm_hour: It denotes the hour since midnight (0-23)tm_mday: It denotes the day of the month (1-31)tm_mon: It denotes the months since January (0-11)tm_year: It denotes the years since 1900tm_wday: It denotes the days since Sunday (0-6)tm_yday: It denotes the days since January 1 (0-365)unparsed: It denotes the date part which was not recognized using the specified formatSyntax:array strptime( $date, $format )Parameters: This function accepts two parameter as mentioned above and described below:$date: It is a mandatory parameter which specifies the string to parse.$format: It is a mandatory parameter which specifies the format used in the date.Return Value: This function returns an array on success or False on failure.Below programs illustrate the strptime() function in PHP:Program 1:<?php// Declaring the format of date/time$format = \"%d/%m/%Y %H:%M:%S\";// Parsing the date/time$dt = strftime( $format );echo \"$dt\";print_r(strptime( $dt, $format ));?>Output:  22/08/2018 11:46:57Array  (      [tm_sec] => 57      [tm_min] => 46      [tm_hour] => 11      [tm_mday] => 22      [tm_mon] => 7      [tm_year] => 118      [tm_wday] => 3      [tm_yday] => 233      [unparsed] =>   )Program 2:<?php// Ddeclaring a different format of date/time$format=\"%d/%m/%y %I:%M:%S\";// Parsing the date/time$dt = strftime( $format );echo \"$dt\";print_r(strptime( $dt, $format ));?>Output:  22/08/18 11:46:59Array  (      [tm_sec] => 59      [tm_min] => 46      [tm_hour] => 11      [tm_mday] => 22      [tm_mon] => 7      [tm_year] => 118      [tm_wday] => 3      [tm_yday] => 233      [unparsed] =>   )Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | gettimeofday() Function","The gettimeofday() function is an inbuilt function in PHP which is used to return the current time. It is an interface to Unix system call gettimeofday(2). It returns an associative array containing the data returned from the system call. The float option is sent as a parameter to the gettimeofday() function and returns an associative array containing the current time.Syntax:gettimeofday( $return_float )Parameters: This function accepts single parameter $return_float which is optional. This parameter is used to set to TRUE, then it returns a float value instead of an array.Return Value: It returns an associative array containing the current time. If $return_float parameter is set then it return float value.The associative array consists of the following array keys:sec: It is used to specify the seconds since the Unix Epoch.usec: It is used to specify the microseconds.minuteswest: It is used to specify the minutes west of Greenwich.dsttime: It is used to specify the type of dst correction.Exception: The $return_float parameter was added since PHP 5.1.0 version.Below programs illustrate the gettimeofday() function in PHP:Program 1:<?php// Displaying the current time// as an associative arrayecho (\"Current time is: \");print_r(gettimeofday());?>Output:  Current time is: Array  (      [sec] => 1536040360      [usec] => 178383      [minuteswest] => 0      [dsttime] => 0  )Program 2:<?php// Displaying the current time// as a float valueecho (\"Current time is: \");print_r(gettimeofday(true));?>Output:  Current time is: 1536040361.1613Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | geoip_db_avail() Function","The geoip_db_avail() function is an inbuilt function in PHP which is used to check whether a GeoIP database is available or not. The function does not consider the proper existence of a file instead it checks whether it is readable or not.Syntax:bool geoip_db_avail( $database )Parameters: This function accepts a single parameter $database which is integer type and it requires GeoIP database (GeoIP refers to the method of locating a computer terminal’s geographic location by identifying the terminal’s IP address. GeoIP can point a terminal location to a city, it requires the use of a GeoIP database).Return Values: This function returns True on success (if the database exists) or False on failure (if the database is not found) and returns NULL if an error is encountered.Below programs illustrate the geoip_db_avail() function in PHP:Program 1:<?php// PHP code implementing geoip_db_avail() function// Checks if the database entered is valid or notif (geoip_db_avail(GEOIP_COUNTRY_EDITION))    echo \"True\";?>Output:TrueProgram 2:<?php// PHP code implementing geoip_db_avail() function// Checks if the database entered is valid or notif (geoip_db_avail(GEOIP_ORG_EDITION))    echo \"True\";?>Output:TrueRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | disk_total_space( ) Function","The disk_total_space() function in PHP is an inbuilt function which is used to return the total space of a specified directory. The disk_total_space() function denotes the total space in bytes. It returns the total space on a filesystem or on a disk partition.The disk_total_space() function returns the total number of bytes on the corresponding filesystem or disk partition for a specified directory inputted as a string.Syntax:float disk_total_space ( string $directory )Parameters: The disk_total_space() function in PHP accepts only one parameter $directory which is directory.Return Value: It returns the total space on a filesystem or on a disk partition.Errors And Exception:The disk_total_space() function in PHP may give improper results if a file name is given as parameter instead of a directory.The disk_total_space() function in PHP doesn’t works for remote files.It only works on files which are accessible by the server’s filesystem.Examples:  Input : disk_total_space(\"D:\");  Output : 10969328844798729    Input : disk_total_space(\"C:\");  Output : 104379834795739795Below programs illustrate the disk_total_space() function:Program 1:<?php// specifying directory to check for total spaceecho disk_total_space(\"D:\");?>Output:10969328844798729Program 2:<?php// specifying directory to// check for total space$space = disk_total_space(\"C:\");echo \"C: drive has a total capacity                    of $space bytes.\";?>Output:  C: drive has a total capacity of 104379834795739795 bytes.");create(getIdByTitle(this.context,"Functions"),"PHP | var_export() Function","The var_export() is a built-in function in PHP which is used to return the structured value(information) of a variable that is passed to this function as a parameter. This function is similar to the var_dump() function.Syntax:  var_export($var, $return)Parameters: This function accepts two parameters as shown in the above syntax and are described below:$var: This parameter represents the variable to be exported.$return: This is an optional parameter and is of boolead type. In case it is used and set to true then this function returns the variable reprentation instead of outputting it. The default value of this parameter is FALSE.Return Type: It returns the variable representation if $return parameter is used and set to true otherwise this function returns NULL.Below programs illustrate the var_export() function:Program 1:<?php// PHP program to illustrate// the var_export() function$var = \'11.89\';$res = var_export($var, true);echo $res;?>Output:  \'11.89\'Program 2:<?php// PHP program to illustrate// the var_export() function$var = +11.99;$res = var_export($var);echo $res ;?>Output:  11.99");create(getIdByTitle(this.context,"Functions"),"PHP | nl2br() Function","The nl2br() is an inbuilt function in PHP and is used to insert HTML break tags in the place of all new lines in a string. In normal text editors, the new line is generally denoted by using any of the following.\\n\\r\\r\\n\\n\\rWhere, \\n suggests the cursor to be moved to the next line and \\r tells the cursor to be moved to the beginning of the line. This function takes strings that may contain newlines and returns an altered string by inserting br tag before all the new line character sequences. Being a markup languge HTML doesn’t understand the new line character sequence, this is where the Function finds its utilization.Syntax:  nl2br($str, $isXHTML)Parameters: The function can take at most two parameters as follows.$str: The string to be altered.$isXHTML: This is an optional parameter and expects a boolean value to denote whether to use XHTML compatible line breaks or not i.e. whether to use <br /> or not. Default value is true.Return Type: This function iterates over the input string and inserts br tag before each line break and returns the altered string.Below programs illustrates the working of nl2br() in PHP:<?php// PHP code to illustrate the working of nl2br()$unaltered_string = \"Hey There! Welcome.\\n-GeeksforGeeks\";echo nl2br($unaltered_string);?>Output:  Hey There! Welcome.<br />  -GeeksforGeeks<?php// PHP code to illustrate the working of nl2br()// with optional parameter isXHTML// and every new line sequence.$unaltered_string = \"I am a line.\\r\\nI am as well.\\n\\rSame here.\\nMe too.\\r\";echo nl2br($unaltered_string, false);?>Output:  I am a line.<br>  I am as well.<br>  Same here.<br>  Me too.<br>Important points to note:It is used to display text stored in databases.Different Operating System prefer to use different character sequences as line breaks such as Windows uses \\r\\n whereas Linux uses \\n and MAC uses \\r.Similar result can be produced using simple string replacement, though it is to be remembered that the nl2br function doesn’t replace the new line sequences.");create(getIdByTitle(this.context,"Functions"),"PHP | unset() Function","The unset() function is an inbuilt function in PHP which is used to unset a specified variable. The behavior of this function depends on different things. If the function is called from inside of any user defined function then it unsets the value associated with the variables inside it, leaving the value which is initialized outside it.It means that this function unsets only local variable. If we want to unset the global variable inside the function then we have to use $GLOBALS array to do so.Syntaxunset($variable)Parameter$variable: This parameter is required, it is the variable which is needed to be unsetReturn Value: This function does not returns any value.Below programs illustrate the unset() function in PHP:Program 1:<?php      $var = \"hello\";      // No change would be reflected outside      function unset_value()      {          unset($var);      }      unset_value();      echo $var;?>Outside:  helloProgram 2:<?php      $var = \"hello\";      // Change would be reflected outside the function      function unset_value()      {          unset($GLOBALS[\'var\']);      }      unset_value();      echo $var;?>Output:  No OutputProgram 3:<?php      // user-defined function      function unset_value()      {          static $var = 0;          $var++;          echo \"Before unset:\".$var.\" \";          unset($var);          // This will create a new variable with          // existing name          $var = 5;          echo \"After unset:\".$var.\"\\n\";      }      unset_value();      unset_value();      unset_value();      unset_value();?>Output:  Before unset:1 After unset:5  Before unset:2 After unset:5  Before unset:3 After unset:5  Before unset:4 After unset:5Note: If a variable is declared static and if it is unset inside the function then, the affect will be in the rest of context of a function only. Above calls outside the function will restore the value.");create(getIdByTitle(this.context,"Functions"),"PHP | boolval() Function","The boolval() function is an inbuilt function in PHP which gives the Boolean value for a given expression.Syntax:boolean boolval( $expr )Parameter: This function accepts only one parameter as shown in above syntax and described below:$expr: The expression or the scalar which you want to change into boolean value. It can be a string type, integer type and etc.Return Value: This function will return a boolean value based on the below conditions.if $expr is evaluated to boolean true it will return TRUE.if $expr is evaluated to boolean false it will return FALSE.Below is the list of different variable types along with their values which will evaluate to TRUE or FALSE when converted to boolean value:integer – in this 0 is false and everything else is true.float – in this 0.0 is false and everything else is true.string – “0” and null string are false and everything else is true (even “0.0”)array – empty array is false and everything else is trueobject – here null is false and everything else is truenull – null is always false.Below program illustrate the boolval() function in PHP:<?php// PHP program to illustrate// the boolval() functionecho \'boolval of 3: \'.( boolval( 3 )? \'true\' : \'false\').\"\\n\";echo \'boolval of -3    : \'.( boolval( -3 )? \'true\' : \'false\').\"\\n\";echo \'boolval of 0: \' .( boolval( 0 )? \'true\' : \'false\').\"\\n\";echo \'boolval of 3.5: \'.( boolval( 3.5 )? \'true\' : \'false\').\"\\n\";echo \'boolval of -3.5: \'.( boolval( -3.5 )? \'true\' : \'false\' ).\"\\n\";echo \'boolval of 0.0: \'.( boolval( 0.0 )? \'true\' : \'false\' ).\"\\n\";echo \'boolval of \"1\": \'.( boolval( \"1\" )? \'true\' : \'false\' ).\"\\n\";echo \'boolval of \"0\": \'.( boolval( \"0\" )? \'true\' : \'false\' ).\"\\n\";echo \'boolval of \"0.0\": \'.( boolval( \"0.0\" )? \'true\' : \'false\' ).\"\\n\";echo \'boolval of \"xyz\": \'.( boolval( \"xyz\" )? \'true\' : \'false\' ).\"\\n\";echo \'boolval of \"\": \'.( boolval( \"\" )? \'true\' : \'false\' ).\"\\n\";echo \'boolval of [1, 5]: \'.( boolval( [1, 5] )? \'true\' : \'false\' ).\"\\n\";echo \'boolval of []: \'.( boolval( [] )? \'true\' : \'false\' ).\"\\n\";echo \'boolval of NULL: \'.( boolval( NULL )? \'true\' : \'false\' ).\"\\n\";?>Output:  boolval of 3: true  boolval of -3    : true  boolval of 0: false  boolval of 3.5: true  boolval of -3.5: true  boolval of 0.0: false  boolval of \"1\": true  boolval of \"0\": false  boolval of \"0.0\": true  boolval of \"xyz\": true  boolval of \"\": false  boolval of [1, 5]: true  boolval of []: false  boolval of NULL: falseRefrence:http://http://php.net/manual/en/function.boolval.php");create(getIdByTitle(this.context,"Functions"),"PHP | bccomp() Function","The bccomp() function in PHP is an inbuilt function and is used to compare two arbitrary precision numbers. This function accepts two arbitrary precision numbers as strings and returns the result of comparison of the two numbers after comparing them upto a specified precision.Syntax:int bccomp ( $num_str1, $num_str2, $scaleVal)Parameters: This function accepts three parameters as shown in the above syntax and explained below.$num_str1: This parameter is of string type and represents the left operand or one of the two numbers among which we want to perform the comparison. This parameter is mandatory.$num_str2: This parameter is of string type and represents the right operand or one of the two numbers among which we want to perform the comparison. This parameter is mandatory.$scaleVal: This parameter is of int type and is optional. This parameter tells the number of digits after decimal places that will be used in comparison. The default value of this parameter is zero.Return Value: This function returns an integral value based on the comparison of the two numbers $num_str1 and $num_str2. If both of the numbers are equal then this function returns zero. If $num_str1 is greater than $num_str2 this function returns 1 and if $num_str1 is less than $num_str2 this function returns -1.Examples:  Input:  $num_str1 = 3.22, $num_str2 = 3  Output: 0  Explanation: Since the parameter $scaleVal is not   specified so no digits after decimal is used in   comparison. So, the value of first parameter which   is 3.22 will be treated as 3 and hence both   parameters are equal.    Input:  $num_str1 = 3.222, $num_str2 = 3, $scaleVal = 2  Output: 1    Input:  $num_str1 = 3, $num_str2 = 3.222, $scaleVal = 2  Output: -1Below programs illustrate the bccomp() function in PHP :Program 1:<?php// PHP program to illustrate bccomp() function// input numbers$num_str1 = \"3.12\";$num_str2 = \"3\";// calculates the comparison of the two// numbers when $scaleVal is not specified$res = bccomp($num_str1, $num_str2, 2);// both parameters are equalecho $res;?>Output:  0Program 2:<?php// PHP program to illustrate bccomp() function// input numbers$num_str1 = \"3.12\";$num_str2 = \"3\";// scale value$scaleVal = 2;// calculates the comparison of the two// numbers when $scaleVal is specified$res = bccomp($num_str1, $num_str2, $scaleVal);// first parameter is greater than secondecho $res;?>Output:  1Program 3:<?php// PHP program to illustrate bccomp() function// input numbers$num_str1 = \"3\";$num_str2 = \"3.12\";// scale value$scaleVal = 2;// calculates the comparison of the two// numbers when $scaleVal is specified$res = bccomp($num_str1, $num_str2, $scaleVal);// first parameter is smaller than secondecho $res;?>Output:  -1Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | bcmod() Function","The bcmod() function in PHP is an inbuilt function and is used to calculate modulus of an arbitrary precision numbers. This function accepts an arbitrary precision number and returns the modulus of that number after scaling the result to a specified precision.Syntax:string bcadd ( $dividend, $modulus)Parameters: This function accepts two parameters as shown in the above syntax and explained below:$dividend: This parameter is of string type and represents the dividend which will be divided by the given modulus value $modulus. This parameter is mandatory.$modulus: This parameter is of string type and represents the modulus. This parameter is mandatory.Return Value: This function returns the remainder when $dividend is divided by $modulus. In other words, it returns the value equivalent to ($dividend % $modulus). If $modulus is zero, then this function returns NULL.Examples:  Input:  $dividend = 11, $modulus = 3  Output: 2    Input:  $dividend = 3, $modulus = 11  Output: 3Below programs illustrate the bcmod() function in PHP :Program 1:<?php// PHP program to illustrate bcmod() function// input numbers with arbitrary precision$dividend = \"11\";$modulus = \"3\";// calculates the modulus$res = bcmod($dividend, $modulus);echo $res;?>Output:  2Program 2:<?php// PHP program to illustrate bcmod() function// input numbers with arbitrary precision$dividend = \"3\";$modulus = \"11\";// calculates the modulus$res = bcmod($dividend, $modulus);echo $res;?>Output:  3Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | bcdiv() Function","The bcdiv() function in PHP is an inbuilt function and is used to divide two arbitrary precision numbers. This function accepts two arbitrary precision numbers as strings and returns the division of the two numbers after scaling the result to a specified precision.Syntax:string bcdiv ( $num_str1, $num_str2, $scaleVal)Parameters: This function accepts three parameters as shown in the above syntax and explained below:$num_str1: This parameter is of string type and represents the dividend. This parameter is mandatory.$num_str2: This parameter is of string type and represents the divisor. This parameter is mandatory.$scaleVal: This parameter is of int type and is optional. This parameter tells the number of digits that will appear after the decimal in the result of division. It’s default value is zero.Return Value: This function returns the division of the number $num_str1 by $num_str2 as string.Examples:  Input:  $num_str1 = 11.222, $num_str2 = 3  Output: 3  Since the parameter $scaleVal is not specified so  no digits after decimal is appeared in the   result after division.    Input:  $num_str1 = 11.222, $num_str2 = 3, $scaleVal = 4  Output: 3.7406Below programs illustrate the bcdiv() function in PHP :Program 1:<?php// PHP program to illustrate bcdiv() function// input numbers$num_str1 = \"11.222\";  // dividend$num_str2 = \"3\";  // divisor// calculates the division of// the two numbers when $scaleVal is// not specified$res = bcdiv($num_str1, $num_str2);echo $res;?>Output:  3Program 2:<?php// PHP program to illustrate bcdiv() function// input numbers$num_str1 = \"11.222\";  // dividend$num_str2 = \"3\";  // divisor// scale value$scaleVal = 4;// calculates the division of the two// numbers when $scaleVal is specified$res = bcdiv($num_str1, $num_str2, $scaleVal);echo $res;?>Output:  3.7406Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | bcmul() Function","The bcmul() function in PHP is an inbuilt function and is used to multiply two arbitrary precision numbers. This function accepts two arbitrary precision numbers as strings and returns the multiplication of the two numbers after scaling the result to a specified precision.Syntax:string bcmul ( $num_str1, $num_str2, $scaleVal)Parameters: This function accepts three parameters as shown in the above syntax and explained below:$num_str1: This parameter is of string type and represents the left operand or one of the two numbers among which we want to perform the multiplication. This parameter is mandatory.$num_str2: This parameter is of string type and represents the right operand or one of the two numbers among which we want to perform the multiplication. This parameter is mandatory.$scaleVal: This parameter is of int type and is optional. This parameter tells the number of digits that will appear after the decimal in the result of multiplication. It’s default value is zero.Return Value: This function returns the multiplication of the two numbers $num_str1 and $num_str2 as string.Examples:  Input:  $num_str1 = 3, $num_str2 = 11.222  Output: 33  Explanation: Since the parameter $scaleVal is not   specified so no digits after decimal is appeared   in the result after multiplication.    Input:  $num_str1 = 3, $num_str2 = 11.222, $scaleVal = 4  Output: 36.6660Below programs illustrate the bcmul() function in PHP :Program 1:<?php// PHP program to illustrate bcmul() function// input numbers with arbitrary precision$num_str1 = \"3\";$num_str2 = \"11.222\";// calculates the multiplication of the two// numbers when $scaleVal is not specified$res = bcmul($num_str1, $num_str2);echo $res;?>Output:  33Program 2:<?php// PHP program to illustrate bcmul() function// input numbers with arbitrary precision$num_str1 = \"3\";$num_str2 = \"11.222\";// scale value$scaleVal = 3;// calculates the multiplication of the two// numbers when $scaleVal is specified$res = bcmul($num_str1, $num_str2, $scaleVal);echo $res;?>Output:  33.666Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | bcpow() Function","The bcpow() function in PHP is an inbuilt function and is used to calculate the value of an arbitrary precision base number raised to another exponent number. This function accepts two arbitrary precision numbers as strings and returns the base number raised to exponent after scaling the result to a specified precision.Syntax:string bcpow ( $base, $exponent, $scaleVal )Parameters: This function accepts three parameters as shown in the above syntax and explained below:$base: This parameter is of string type and represents the base in which the power will be raised. This parameter is mandatory.$exponent: This parameter is of string type and represents the exponent. This parameter is mandatory.$scaleVal: This parameter is of int type and is optional. This parameter tells the number of digits that will appear after the decimal in the result of baseexponent. It’s default value is zero.Return Value: This function returns the $base$exponent result as string.Examples:  Input:  $base = 2, $exponent = 3   Output: 8  Since the parameter $scaleVal is not specified so  no digits after decimal is appeared in the   result after evaluating result    Input:  $base = 2, $exponent = 3, $scaleVal = 2  Output: 8  Note: Instead of 8.00, output of 8 is given.   This is an exception in bc math functions.Below programs illustrate the bcpow() function in PHP :Program 1:<?php// PHP program to illustrate bcpow() function// input numbers with arbitrary precision$base = \"2\";$exponent = \"3\";// calculates the base^exponent// the two numbers when $scaleVal is// not specified$res = bcpow($base, $exponent);echo $res;?>Output:  2Program 2:<?php// PHP program to illustrate bcpow() function// input numbers with arbitrary precision$base = \"2\";$exponent = \"3\";// scale value$scaleVal = 4;// calculates the base^exponent// the two numbers when $scaleVal is// specified$res = bcpow($base, $exponent, $scaleVal);echo $res;?>Output:  2Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | bcpowmod() Function","The bcpowmod() function in PHP is an inbuilt function and is used to raise an arbitrary precision base number to another exponent number reduced by a specified modulus. This function accepts three arbitrary precision numbers as strings and returns the base number raised to exponent modulo under a number after scaling the result to a specified precision.Syntax:string bcpowmod ( $base, $exponent, $mod, $scaleVal )Parameters: This function accepts four parameters as shown in the above syntax and explained below:$base: This parameter is of string type and represents the left operand or the number which is the bas in which the power will be raised. This parameter is mandatory.$exponent: This parameter is of string type and represents the right operand or one of the number which represent the exponent. This parameter is mandatory.$mod: This parameter is of string type and accepts a operand or a number which represents the modulos. This parameter is mandatory.$scaleVal: This parameter is of int type and is optional. This parameter tells the number of digits that will appear after the decimal in the result of (baseexponent)%mod. It’s default value is zero.Return Value: This function returns the ($base$exponent) % $mod result as string.Examples:  Input:  $base = 2, $exponent = 3 $mod = 3  Output: 2  Since the parameter $scaleVal is not specified so  no digits after decimal is appeared in the   result after evaluating result    Input:  $base = 2, $exponent = 3, $mod = 3, $scaleVal = 2  Output: 2.00Below programs illustrate the bcpowmod() function in PHP :Program 1:<?php// PHP program to illustrate bcpowmod() function// input numbers with arbitrary precision$base = \"2\";$exponent = \"3\";$mod = \"3\";// calculates the base^exponent % mod// when $scaleVal is not specified$res = bcpowmod($base, $exponent, $mod);echo $res;?>Output:  2Program 2:<?php// PHP program to illustrate bcpowmod() function// input numbers with arbitrary precision$base = \"2\";$exponent = \"3\";$mod = \"3\";// scale value$scaleVal = 4;// calculates the base^exponent % mod// when $scaleVal is specified$res = bcpowmod($base, $exponent, $mod, $scaleVal);echo $res;?>Output:  2.0000Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | bcscale() Function","The bcscale() function is an inbuilt function in PHP. It sets the default scale parameters for all bc math function calls. When we call the function bcscale() in a program, the parameter passed in this function thus becomes the default scale factor which by default is zero.Syntax:int bcscale($scale)Parameters: This function accepts a single parameter $scale and is of int type and is mandatory. This parameter tells the number of digits that will appear after the decimal in the result of function call of all bc math functions. Its default value is zero.Return Value: This function returns the old scale value.Below programs illustrate the bcscale() function in PHP :Program 1:<?php// default scale : 3bcscale(3);// takes the default scale value as 3// which is declared at the beginningecho bcadd(\'111\', \'6.55957\'), \"\\n\"; // 16.007// this is not the same without bcscale()echo bcadd(\'111\', \'6.55957\', 1), \"\\n\"; // 16.007//  takes the default scale value as 3// which is declared at the beginningecho bcadd(\'111\', \'6.55957\'), \"\\n\";?>Output:  117.559   117.5   117.559Program 2:<?php// default scale : 3bcscale(5);// takes the default scale value as 3// which is declared at the beginningecho bcadd(\'111\', \'6.55957\'), \"\\n\"; // 16.007// this is not the same without bcscale()echo bcadd(\'111\', \'6.55957\', 1), \"\\n\"; // 16.007// default scale value changesbcscale(2);// takes the default scale value as 2// which is declaredecho bcadd(\'111\', \'6.55957\'), \"\\n\";?>Output:  117.55957   117.5   117.55Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | bcadd() Function","The bcadd() function in PHP is an inbuilt function and is used to add two arbitrary precision numbers. This function accepts two arbitrary precision numbers as strings and returns the addition of the two numbers after scaling the result to a specified precision.Syntax:string bcadd ( $num_str1, $num_str2, $scaleVal)Parameters: This function accepts three parameters as shown in the above syntax and explained below:$num_str1: This parameter is of string type and represents the left operand or one of the two numbers among which we want to perform the addition. This parameter is mandatory.$num_str2: This parameter is of string type and represents the right operand or one of the two numbers among which we want to perform the addition. This parameter is mandatory.$scaleVal: This parameter is of int type and is optional. This parameter tells the number of digits that will appear after the decimal in the result of addition. It’s default value is zero.Return Value: This function returns the addition of the two numbers $num_str1 and $num_str2 as string.Examples:  Input:  $num_str1 = 3, $num_str2 = 11.222  Output: 14  Since the parameter $scaleVal is not specified so  no digits after decimal is appeared in the   result after addition.    Input:  $num_str1 = 3, $num_str2 = 11.222, $scaleVal = 4  Output: 14.2220Below programs illustrate the bcadd() function in PHP :Program 1:<?php// PHP program to illustrate bcadd() function// input numbers with arbitrary precision$num_str1 = \"3\";$num_str2 = \"11.222\";// calculates the addition of// the two numbers when $scaleVal is// not specified$res = bcadd($num_str1, $num_str2);echo $res;?>Output:  14Program 2:<?php// PHP program to illustrate bcadd() function// input numbers with arbitrary precision$num_str1 = \"3\";$num_str2 = \"11.222\";// scale value$scaleVal = 4;// calculates the addition of the two// numbers when $scaleVal is specified$res = bcadd($num_str1, $num_str2, $scaleVal);echo $res;?>Output:  14.2220Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | bcsub() Function","The bcsub() function in PHP is an inbuilt function and is used to subtract one arbitrary precision number from another. This function accepts two arbitrary precision numbers as strings and returns the subtraction of the two numbers after scaling the result to a specified precision.Syntax:string bcsub ( $num_str1, $num_str2, $scaleVal)Parameters: This function accepts three parameters as shown in the above syntax and explained below:$num_str1: This parameter is of string type and represents the left operand or one of the two numbers among which we want to perform the subtraction. This parameter is mandatory.$num_str2: This parameter is of string type and represents the right operand or one of the two numbers among which we want to perform the subtraction. This parameter is mandatory.$scaleVal: This parameter is of int type and is optional. This parameter tells the number of digits that will appear after the decimal in the result of addition. It’s default value is zero.Return Value: This function returns the subtraction of two numbers $num_str1 and $num_str2 as string.Examples:  Input:  $num_str1 = 11.222, $num_str2 = 3  Output: 14  Since the parameter $scaleVal is not specified so  no digits after decimal is appeared in the   result after subtraction.    Input:  $num_str1 = 11.222, $num_str2 = 3, $scaleVal = 4  Output: 8.2220Below programs illustrate the bcsub() function in PHP :Program 1:<?php// PHP program to illustrate bcsub() function// input numbers with arbitrary precision$num_str1 = \"11.222\";$num_str2 = \"3\";// calculates the subtraction of// the two numbers when $scaleVal is// not specified$res = bcsub($num_str1, $num_str2);echo $res;?>Output:  8Program 2:<?php// PHP program to illustrate bcsub() function// input numbers with arbitrary precision$num_str1 = \"11.222\";$num_str2 = \"3\";// scale value$scaleVal = 4;// calculates the subtraction of the two// numbers when $scaleVal is specified$res = bcsub($num_str1, $num_str2, $scaleVal);echo $res;?>Output:  8.2220Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | bcsqrt() Function","The bcsqrt() function in PHP is an inbuilt function and is used to evaluate the square root of an arbitrary precision number. This function accepts an arbitrary precision number as a string and returns the square root of the number after scaling the result to a specified precision.Syntax:string bcsqrt ( $num_str, $scaleVal)Parameters: This function accepts three parameters as shown in the above syntax and explained below:$num_str: This parameter is of string type and represents the operand or a number whose square root is to be evaluated. This parameter is mandatory.$scaleVal: This parameter is of int type and is optional. This parameter tells the number of digits that will appear after the decimal in the result. It’s default value is zero.Return Value: This function returns the square root of a number $num_str as string.Examples:  Input:  $num_str = 26  Output: 5  Since the parameter $scaleVal is not specified so  no digits after decimal is appeared in the   result after finding out square root.     Input:  $num_str = 26, $scaleVal = 4  Output: 5.0990Below programs illustrate the bcsqrt() function in PHP :Program 1:<?php// PHP program to illustrate bcsqrt() function// input numbers with arbitrary precision$num_str = \"26\";// calculates the square root when// $scaleVal is not specified$res = bcsqrt($num_str);echo $res;?>Output:  5Program 2:<?php// PHP program to illustrate bcsqrt() function// input numbers with arbitrary precision$num_str = \"26\";$scale = \"4\";// calculates the square root when// $scaleVal is specified$res = bcsqrt($num_str, $scale);echo $res;?>Output:  5.0990Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | md5(), sha1(), hash() Functions","PHP is a server-side scripting language which implies that PHP is responsible for all the back-end functionalities required by the website. The authentication system is one of the most important parts of a website and it is one of the most commonplace where developers commit mistakes leaving out vulnerabilities for others to exploit. One example could be storing and using user passwords in its true form, which may lead to a situation where an unauthorized person gets the access to the database and the whole system is compromised.This situation can be easily prevented using password hashing. Password Hashing is a method which takes the user password( a variable-length sequence of characters) and encrypts it to a fixed-length password containing random characters from a larger set. PHP has a few functions that can be used to achieve the same.md5() FunctionSyntax:  string md5 ($string, $getRawOutput)Parameters: The function an take up to a maximum of two parameters as follows:$string: This parameter expects the string to be hashed.$getRawOutput: This optional parameter expects a boolean value, on TRUE the function returns the hash in a raw binary format of length 16.Return Type: This function returns the hashed string (either in lowercase hex character sequence of length 32 or raw binary form of length 16).sha1() FunctionSyntax:  string sha1($string, $getRawOutput)Parameters: The function an take up to a maximum of two parameters as follows:$string: This parameter expects the string to be hashed.$getRawOutput: This optional parameter expects a boolean value, on TRUE the function returns the hash in a raw binary format of length 20.Return Type: This function returns the hashed string (either in lowercase hex character sequence of length 40 or raw binary form of length 20).hash() FunctionSyntax:  string hash($algo, $string, $getRawOutput)Parameters: The function an take up to a maximum of three parameters as follows:$algo: This parameter expects a string defining the hashing algorithm to be used. PHP has a total of 46 registered hashing algorithms among which “sha1”, “sha256”, “md5”, “haval160, 4” are the most popular ones.$string: This parameter expects the string to be hashed.$getRawOutput: This optional parameter expects a boolean value, on TRUE the function returns the hash in a raw binary format.Return Type: This function returns the hashed string (either in lowercase hex character sequence or raw binary form).Below program illustrates the working of md5(), sha1() and hash() in PHP:<?php// PHP code to illustrate the working// of md5(), sha1() and hash()$str = \'Password\';$salt = \'Username20Jun96\';echo sprintf(\"The md5 hashed password of %s is: %s\\n\",                                $str, md5($str.$salt));echo sprintf(\"The sha1 hashed password of %s is: %s\\n\",                                $str, sha1($str.$salt));echo sprintf(\"The gost hashed password of %s is: %s\\n\",                        $str, hash(\'gost\', $str.$salt));?>Output:  The md5  hashed password of Password is:   a59a0e0fcfab450008571e94a5549225  The sha1 hashed password of Password is:   a69652ddbc8401ae93b5d2f0390d98abd94fc2f4  The gost hashed password of Password is:  5376160a0d848c327949364b96fb9fd6e13a9b20c58fbab50f418ea9eea3b67fImportant points to note:The complexity of a hashing algorithm defines how good the hashing is itself. Both sha1 and md5 are not very complex thus experts suggest we should use the following algorithms only if the risk factor is not condemnable.Using only the Password as input string gives a mediocre result, but using salt we can enhance the result. Salt in hashing is a term that refers to a random string that is used explicitly with the password. Many developers prefer to use the username and some other field (such as Date of birth in the example) as the salt which increases the randomness.A hashing algorithm should preferably be a one-way route i.e. there should not exist a decrypt method, but all these known algorithms can be guessed with a proper implementation of Brute Force and Dictionary attack.Reference:");create(getIdByTitle(this.context,"Functions"),"PHP | crypt(), password_hash() Functions","In the previous article on md5(), sha1(), and hash() Functions we saw that one of the major drawbacks of the method was that these algorithms were very fast due to less complexity and thus more vulnerable to attacks, they are even suggested not to use in a full-fledged project of greater importance. Thus, PHP now provides with a couple new methods to hash user passwords in a much more optimized and secure way. The methods are discussed as follows:crypt() FunctionSyntax:  string crypt ($string, $salt)Parameters: The function an take up to a maximum of two parameters as follows:$string: This parameter expects the string to be hashed.$salt: This is an optional parameter by definition but it is almost never expected to leave the salt field undefined. The salt parameter expects a random string to be used as the base of the hashing. Many developers tend to use the combination of some specific fields and random characters appended together.Return Type: This function returns the hashed string.As crypt() was better than its predecessors it was widely used, but the reliability of the function was questionable, hence PHP now provides a built-in function to serve the purpose of Password Hashing and is recommended for use.password_hash() FunctionSyntax:  string password_hash($string, $algo, $options)Parameters: The function an take up to a maximum of three parameters as follows:$string: This parameter expects the string to be hashed.$algo: This parameter expects an integer value that refers to the algorithm to be used for the purpose. Three algorithms are available as follows:PASSWORD_DEFAULT: This is the recommended algo, as the developer team of PHP are adding new algorithms and updating the following to be the best option.PASSWORD_BCRYPT: This algorithm uses the CRYPT_BLOWFISH algorithm and generates a crypt() equivalent hash.PASSWORD_ARGON2I: Uses the Argon2 Hashing Algorithm.$options: This is an optional parameter that expects an array of advanced options as described. The supported options for each algorithm slightly differs from each other. The supported options are as follows:Supported options for PASSWORD_BCRYPT:Cost: Maximum Algorithmic Cost to be applied. Default value is 10. Algorithmic cost directly affects the loading time and depends significally on the hardware running.Salt: Developers can provide manual salts as well, but it is not recommended.Supported options for PASSWORD_ARGON2I:Memory cost: Maximum Memory Cost to be applied to generate the hash.Time cost: Maximum Time to be taken to calculate the hash.Threads: Number of threads to be used.Return Type: This function returns the hashed string on success or FALSE.Below program illustrates the working of crypt() and password_hash() in PHP:<?php// PHP code to illustrate the working of// crypt() and password_hash()$str = \'Password\';$options = [               \'cost\' => 10,               \'salt\' => \'$P27r06o9!nasda57b2M22\'           ];echo sprintf(\"Result of crypt() on %s is %s\\n\",             $str, crypt($str, $options[\'salt\']));echo sprintf(\"Result of DEFAULT on %s is %s\\n\",      $str, password_hash($str, PASSWORD_DEFAULT));echo sprintf(\"Result of BCRYPT on %s is %s\\n\", $str,    password_hash($str, PASSWORD_BCRYPT, $options));?>Output:  Result of crypt() on Password is $PFKQN2rkmKu6  Result of DEFAULT on Password is $2y$10$yqFvDGy  v2Tz4d/A/yulbFe5ISH9oR3gvU7GQLMYRKR7XQJnGpQOau  Result of BCRYPT on Password is $2y$10$JFAyN3Iw  Nm85IW5hc2RhNOlEBYnR992.gf.5FqZhHSbln3a4jtQpiImportant points to note:A hashing algorithm should preferably be a one-way route i.e. there should not exist a decrypt method, following this concept, the described functions has no decrypt method.Not having any decrypting method the validation of password would require to crypting every input provided by the user on time of login, thus PHP provides password_verify() Function to validate the same.crypt() and password_hash() are both compatible with each other. We can say that password_hash() method is a much more user friendly wrapper of the crypt() method itself.Reference:");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_legendre() Function","The gmp_legendre() function is an in-built function in PHP which computes the Legendre symbol of two GMP numbers (GNU Multiple Precision: For large numbers) $num1 and $num2 passed as parameters to the function and returns it. $num2 must be positive and odd.Syntax:gmp_legendre( $num1, $num2 )Parameters Used:The function accepts two mandatory parameters $num1 and $num2 as shown in the above syntax. These parameters can be GMP objects in PHP version 5.6 and later, or numeric strings can be passed to the function provided that it is possible to convert those strings to numbers.Return Value :This function returns a GMP number (in PHP 5.5 and earlier) or a GMP object (in PHP 5.6 and later) which is the Legendre symbol of the two numbers.Examples:  Input : $num1 = 2, $num2 = 3  Output : -1    Input : $num1 = 6, $num2 = 15  Output : 0Below programs will illustrate the gmp_legendre() function:Program 1<?php// PHP program to calculate the// legendre of two GMP numbers$num1 = 13;$num2 = 9907;//Display the resultecho gmp_legendre($num1, $num2);?>Output1Program 2<?php// PHP program to calculate the// legendre of two GMP numbers// creating GMP numbers using gmp_init()$num1 = gmp_init(\"124567812\");$num2 = gmp_init(\"271290907\");//Display the resultecho gmp_legendre($num1, $num2);?>Output-1Reference : http://php.net/manual/en/function.gmp-legendre.php");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_div_qr() Function","The gmp_div_qr() function is an in-built function in PHP which performs the division operation between two GMP numbers (GNU Multiple Precision : For large numbers) and returns the quotient and remainder.Syntax :gmp_div_qr($num1, $num2)Parameters : This function accepts two GMP numbers, $num1 and $num2 as mandatory parameters as shown in the above syntax. These parameters can be GMP objects in PHP version 5.6 and later, or numeric strings can be passed to the function provided that it is possible to convert those strings to numbers.Return Value : This function returns an array with two components :First being the quotient of the division.Second being the remainder of the division.Examples:  Input : $num1 = 146, $num2  = 12  Output : Quotient = 12, Remainder = 2            Array ( [0] => GMP Object ( [num] => 12 ) [1] => GMP Object ( [num] => 2 ) )    Input : $num1 = 189126457831, $num2  = 12098123409  Output : Quotient = 15, Remainder = 7654606696            Array ( [0] => GMP Object ( [num] => 15) [1] => GMP Object ( [num] => 7654606696 ) )Below programs will illustrate the use of gmp_div_qr() function.Program 1 : Program to perform the division of GMP numbers when GMP numbers are passed as arguments.<?php// PHP program to perform the division of// GMP numbers// creating GMP numbers using gmp_init()$num1 = gmp_init(257);$num2 = gmp_init(17);// calculates the quotient and remainder//  when $num1 is divided by num2$res = gmp_div_qr($num1, $num2);// Printing the Array elements, i.e.// the quotient and remainderprint_r($res);?>OutputArray   (   [0] => GMP Object ( [num] => 15 )   [1] => GMP Object ( [num] => 2 )   )Program 2 : Program to perform the division of GMP numbers when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to perform the division of// GMP numbers// creating GMP number using gmp_init($a = gmp_init(\"7891267541121\");// calculates the quotient when// $a is divided by 115789034$res = gmp_div_qr($a, \"115789034\");// Printing the Array elements, i.e.// the quotient and remainderprint_r($res);?>Output  Array (   [0] => GMP Object ( [num] => 68152 )   [1] => GMP Object ( [num] => 13295953 )   )Reference : http://php.net/manual/en/function.gmp-div-qr.php");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_rootrem() Function","The gmp_rootrem() is a built-in function in PHP which is used to calculate the nth root of a GMP number (GNU Multiple Precision : For large numbers) and returns the integer component of the nth root and its remainder .Syntax :gmp_rootrem($num,$n)Parameters : This function accepts two mandatory parameters as shown in the above syntax. They are specified below :$num : The parameter can be a GMP object in PHP version 5.6 and later, or we can also pass a numeric string provided that it is possible to convert that string to a number.$n : The positive root to be calculated of $num.Examples :  Input : $num = \"8\" $n = 2  Output :  Array (                       [0] => GMP Object ( [num] => 2 )                      [1] => GMP Object ( [num] => 4 )                     )    Input : $num = \"9\" $n = 2  Output : Array (                     [0] => GMP Object ( [num] => 3 )                    [1] => GMP Object ( [num] => 0 )                 )Return Value : This function returns a two element array , both the elements being GMP numbers.The first element of the array is the integer component of the nth root of $num.The second element is the remainder.Below programs will illustrate the use of gmp_rootrem() function in PHP :Program 1 : The below program illustrates the use of the function with GMP number passed as argument.<?php// PHP program to calculate the// integer part and remainder// of nth root of a gmp number// GMP number as arguments$num = gmp_init(8);$n = 3;$rootrem = gmp_rootrem($num, $n);//Display the array elementsecho print_r($rootrem);?>OutputArray  (      [0] => GMP Object ( [num] => 2 )      [1] => GMP Object ( [num] => 0 )  )Program 2 : The below program illustrates the use of the function with numeric string passed as argument.<?php// PHP program to calculate the// integer part and remainder// of nth root of a gmp number// Numeric string as argument$num = \"178924890\";$n = 3;$rootrem = gmp_rootrem($num, $n);//Display the array elementsecho print_r($rootrem);?>OutputArray (   [0] => GMP Object ( [num] => 563 )   [1] => GMP Object ( [num] => 471343 )    )Reference : http://php.net/manual/en/function.gmp-rootrem.php");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_div_r() Function","The gmp_div_r() function is an in-built function in PHP which performs the division operation between two GMP numbers (GNU Multiple Precision : For large numbers) and returns the remainder.Syntax :gmp_div_r($num1, $num2)Parameters : This function accepts two GMP numbers, $num1 and $num2 as mandatory parameters as shown in the above syntax. These parameters can be GMP objects in PHP version 5.6 and later, or numeric strings can be passed to the function provided that it is possible to convert those strings to numbers.Return Value : This function returns a GMP number which is the remainder of the division.Examples:  Input : $num1 = 146, $num2  = 12  Output : 2    Input : $num1 = \"189126457831\", $num2  = \"12098123409\"  Output :  7654606696Below programs will illustrate the use of gmp_div_r() function.Program 1 : Program to perform the division of GMP numbers when GMP numbers are passed as arguments.<?php// PHP program to perform the division of// GMP numbers// creating GMP numbers using gmp_init()$num1 = gmp_init(257);$num2 = gmp_init(17);// caluates the remainder when//  $num1 is divided by num2$res = gmp_div_r($num1, $num2);// Display the remainderecho $res;?>Output2Program 2 : Program to perform the division of GMP numbers when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to perform the division of// GMP numbers// creating GMP number using gmp_init()$a = gmp_init(\"7891267541121\");// calculates the remainder when// $a is divided by 115789034$res = gmp_div_r($a, 115789034);// Display the remainderecho $res;?>Output13295953Reference : http://php.net/manual/en/function.gmp-div-r.php");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_jacobi() Function","The gmp_jacobi() function is an in-built function in PHP which computes the Jacobi symbol of two GMP numbers (GNU Multiple Precision : For large numbers) $num1 and $num2 passed as parameters to the function and returns it. $num2 must be positive and odd.Syntax :gmp_jacobi($num1, $num2)Parameters used:The function accepts two mandatory parameters $num1 and $num2 as shown in the above syntax. These parameters can be GMP objects in PHP version 5.6 and later, or numeric strings can be passed to the function provided that it is possible to convert those strings to numbers.Return Values :This function returns a GMP number (in PHP 5.5 and earlier) or a GMP object (in PHP 5.6 and later) which is the jacobi of the numbers.Examples:  Input : $num1 = 2, $num2 = 3  Output : -1    Input : $num1 = 6, $num2 = 15  Output : 0Below programs will illustrate the gmp_jacobi() function:Program 1<?php// PHP program to calculate the// jacobi of two GMP numbers$num1 = 13;$num2 = 9907;// Display the resultecho gmp_jacobi($num1, $num2);?>Output1Program 2<?php// PHP program to calculate the// jacobi of two GMP numbers// creating GMP numbers using gmp_init()$num1 = gmp_init(\"124567812\");$num2 = gmp_init(\"271290907\");//Display the resultecho gmp_jacobi($num1, $num2);?>Output-1Reference : http://php.net/manual/en/function.gmp-jacobi.php");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_strval() Function","The gmp_strval() is an inbuilt function in PHP which returns the string value of a GMP number. (GNU Multiple Precision: For large numbers).Syntax:string gmp_strval ( GMP $num, int $base )Parameters: The function accepts two parameters $num and $base as shown above and described below.$num – The function accepts one GMP number $num and returns its string value. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.$base – This parameter specifies the base of the returned number by the function. The base values for the $base are from 2 to 62 and -2 to -36. This is an optional parameter and the default value is 10.Return Value: The function returns string value of the given GMP number $num.Examples:  Input : $num = \"110\" $base = 2   Output : 6    Input : $num = \"110\"   Output :  110Below programs illustrate the gmp_strval() function:Program 1: The program below demonstrates the working of gmp_strval() function when numeric string is passed as an argument and the second parameter is absent.<?php// PHP program to demonstrate the gmp_strval() function// when the argument is numeric string and// the second parameter is missingecho gmp_strval(\"10\");?>Output:10Program 2: The program below demonstrates the working of gmp_strval() function when numeric string is passed as an argument and the second parameter is present.<?php// PHP program to demonstrate the gmp_strval() function// when the argument is numeric string and// the second parameter is presentecho gmp_strval(\"10\", 2);?>Output:1010Program 3: The program below demonstrates the working of gmp_strval() function when GMP number is passed and second parameter is absent.<?php// PHP program to demonstrate the gmp_strval() function// when the argument is GMP number and// the second parameter is missing$num = gmp_init(\"101\", 2);//// gmp_strval converts GMP number to string// representation in given base(default 10).echo gmp_strval($num);?>Output:5Program 4: The program below demonstrates the working of gmp_strval() function when GMP number is passed as an argument and the second parameter is present.<?php// PHP program to demonstrate the gmp_strval() function// when the argument is numeric string and// the second parameter is present$num = gmp_init(\"1010\", 2);// GMP number in base 8echo gmp_strval($num, 8);?>Output:12");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_random_range() Function","The gmp_random_range() is an inbuilt function in PHP which generates a random number.The random number thus generated lies between range min to max. Here GMP refers to (GNU Multiple Precision) which is for large numbers.Syntax:gmp_random_range ( GMP $min, GMP $max )Parameters: The function accepts two parameters, GMP $min number representing lower bound for the random number and GMP $max number to represent the upper bound of the random number. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: The function returns a random GMP number in the range $min-$max.Examples:  Input : lower bound=0, upper bound =100  Output :  25    Input : lower bound=-100, upper bound=-10  Output :  -23     Note:Output will vary every time on executionBelow programs illustrate the use of gmp_random_range() function:Program 1: The program below demonstrates the working of gmp_random_range() function when numeric strings are passed as arguments.<?php// PHP program to demonstrate the gmp_random_range() function// numeric string as arguments$min = \"-200\";$max = \"-100\";$rand = gmp_random_range($min, $max);echo $rand;?>Output:-165Program 2: The program below demonstrates the working of gmp_random_range() when GMP number is passed as an argument.<?php// PHP program to demonstrate the gmp_random_range() function// GMP numbers as arguments$min = gmp_init(\"1000\", 2);$max = gmp_init(\"1000000\", 2);$rand = gmp_random_range($min, $max);// gmp_strval converts GMP number to string// representation in given base(default 10).echo gmp_strval($rand) . \"\\n\";?>Output:30");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_hamdist() Function","The gmp_hamdist() is a built-in function in PHP which is used to find the hamming distance between two GMP numbers (GNU Multiple Precision : For large numbers).Hamming distance between two numbers is defined as number of mis-matching bits in their binary representation.Syntax:gmp_hamdist ( $num1, $num2)Parameters: This function accepts two GMP numbers $num1 and $num2 as shown in the above syntax. Both of these parameters are mandatory to be passed and must be positive. This function finds the hamming distance between the two numbers $num1 and $num2. These parameters can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: This function returns a GMP number which is the calculated hamming distance of the two numbers passed to it as arguments.Examples:  Input:  $a = \"3\", $b = \"11\"  Output: 1  Explanation: Binary representation of 3 is 0011  Binary representation of 11 is 1011. So, they   differ by only 1 bit.    Input:  $a = \"4\", $b = \"4\"  Output: 0Below programs illustrate the gmp_hamdist() function in PHP :Program 1: Program to calculate the hamming distance when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to calculate hamming distance// strings as GMP numbers$a = \"3\";$b = \"11\";// calculates the hamming distance$hamDist = gmp_hamdist($a, $b);echo $hamDist.\"\\n\";// calculates the hamming distance$a = \"4\"; $b = \"4\";$hamDist = gmp_hamdist($a, $b);echo $hamDist.\"\\n\";?>Output:  4  12Program 2: Program to calculate the hamming distance when GMP numbers are passed as arguments.<?php// PHP program to calculate hamming distance// creating GMP numbers using gmp_init()$a = gmp_init(\"11\", 2); // 3 in decimal$b = gmp_init(\"1011\", 2); // 11 in decimal// calculates the hamming distance$hamDist = gmp_hamdist($a, $b);echo $hamDist.\"\\n\";// calculates the hamming distance$a = gmp_init(\"100\", 2);$b = gmp_init(\"100\", 2);$hamDist = gmp_hamdist($a, $b);echo $hamDist.\"\\n\";?>Output:  1  0Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | rewinddir() Function","The rewinddir() function is an inbuilt function in PHP which is used to rewind the directory handle. The rewinddir() function opens a directory and list its files, resets the directory handle, list its files once again, then finally closes the directory handle.The directory handle sent as a parameter to the rewinddir() function and it returns Null on success or False on failure.Syntax:rewinddir ( $dir_handle )Parameters: The rewinddir() function accepts single parameter $dir_handle. It is a mandatory parameter which specifies the handle resource previously opened by the opendir() function.Return Value: It returns Null on success or False on failure.Errors And Exceptions:If the directory handle parameter is not specified by the user then the last link opened by opendir() is assumed by the rewinddir() function.rewinddir() is equivalent to a closedir(), opendir() sequence, but without obtaining a new handle.Below programs illustrate the rewinddir() function in PHP:Program 1:<?php// Open a directory$dir_handle = opendir(\"C:/xampp/htdocs/gfg\");// Read the contents of directorywhile(($file_name = readdir($dir_handle)) !== false){    echo(\"File Name: \" . $file_name . \"<br>\");}// Rewinding directoryrewinddir($dir_handle);while(($file_Name = readdir($dir_handle)) !== false){    echo(\"File Name: \" . $file_Name . \"<br>\");}// Close directoryclosedir($dir_handle);?>Output:  File Name: .  File Name: ..  File Name: content.xlsx  File Name: gfg.pdf  File Name: image.jpeg  File Name: .  File Name: ..  File Name: content.xlsx  File Name: gfg.pdf  File Name: image.jpegProgram 2:<?php// Directory path$dir_name = \"C:/xampp/htdocs/gfg\";// Open directory and read the content// of directoryif (is_dir($dir_name)) {  if ($dir_handle = opendir($dir_name)) {    // List files in images directory    while (($file_name = readdir($dir_handle)) !== false) {      echo \"File Name:\" . $file_name . \"<br>\";    }    // Rewing the directory    rewinddir();    // List once again files in images directory    while (($file_name = readdir($dir_handle)) !== false) {      echo \"File Name:\" . $file_name . \"<br>\";    }    // Close the directory    closedir($dir_handle);  }}?>Output:  filename:.  filename:..  filename:content.xlsx  filename:gfg.pdf  filename:image.jpeg  filename:.  filename:..  filename:content.xlsx  filename:gfg.pdf  filename:image.jpeg");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isalpha() Function","The IntlChar::isalpha() function is an inbuilt function in PHP which is used to check the given input is an alphanumeric character or not.Syntax:bool IntlChar::isalpha( $codepoint )Paramters: The IntlChar::isalpha() function accept single parameter $codepoint which is mandotary. The input parameter is an integer values or character, which is encoded as a UTF-8 string.Return Value: If $codepoint is an alphanumeric character then it return True, otherwise return False.Below programs illustrate the IntlChar::isalpha() function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::isalpha()// function// Input data is character typevar_dump(IntlChar::isalpha(\"G\"));echo \"<br>\";// Input data is string typevar_dump(IntlChar::isalpha(\"G\\n\"));echo \"<br>\";// Input data is string typevar_dump(IntlChar::isalpha(\"Geeksforgeeks\"));echo \"<br>\";// Input data is numbervar_dump(IntlChar::isalpha(\"2018\"));echo \"<br>\";// Input data is single digitvar_dump(IntlChar::isalpha(\"5\"));?>Output:  bool(true)   NULL   NULL   NULL   bool(false)Program 2:<?php// PHP code to illustrate isbase()// Declare an array $arr$arr = array(\"G\", \"GeeksforGeeks\", \"^\", \"1001\", \"6\", \"\\u{2018}\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isalpha($val));    echo \"<br>\";}?>Output:  bool(true)   NULL   bool(false)   NULL   bool(false)   bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isbase() Function","The IntlChar::isbase() function is an inbuilt function in PHP which is used to check the given input data is a base character or not. If the specified code point is a base character then it returns TRUE for general categories “L” (Letters), “N” (numbers), “Mc” (spacing combining marks) and “Me” (enclosing marks).Syntax:bool IntlChar::isbase( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandotary. The input parameter is an integer or character, which is encoded as a UTF-8 string.Return Value: If $codepoint is base character then it returns TRUE, otherwise return FALSE.Examples:  Input :(IntlChar::isbase(\"D\"))  Output : bool(true)    Input : (IntlChar::isbase(\"*\"))  Output : bool(false)    Input :(IntlChar::isbase(\"9\"));  Output :bool(true)Below programs illustrate the IntlChar::isbase() Function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::isbase()// Function// Input data is character typevar_dump(IntlChar::isbase(\"D\"));echo \"<br>\";// Input data is string typevar_dump(IntlChar::isbase(\"Geeksforgeeks\"));echo \"<br>\";// Input data is integer typevar_dump(IntlChar::isbase(\"234\"));echo \"<br>\";// Input data is special character typevar_dump(IntlChar::isbase(\"*\"));echo \"<br>\";?>Output:  bool(true)   NULL   NULL   bool(false)Program 2:<?php//PHP code to illustrate isbase()// Declare an array $arr$arr = array(\"4\", \"20001111\", \"^\", \"  \", \"*\", \"GeeksforGeeks\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isbase($val));    echo \"<br>\";}?>Output:  bool(true)   NULL   bool(false)   NULL   bool(false)   NULLRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isalnum () Function","The IntlChar::isalnum() function is an inbuilt function in PHP which is used to check the given input is an alphanumeric character (Digit or Letter) or not. It returns TRUE for characters with general categories “L” (letters) and “Nd” (decimal digit numbers).Syntax:bool IntlChar::isalnum( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandotary. The input parameter is an integer values or character, which is encoded as a UTF-8 string.Return Value: If $codepoint is alphanumeric character then it returns True, otherwise returns False.Program 1:<?php// PHP code to illustrate IntlChar::isalnum()// Function// Input data is character typevar_dump(IntlChar::isalnum(\"D\"));echo \"<br>\";// Input data is string typevar_dump(IntlChar::isalnum(\"Geeksforgeeks\"));echo \"<br>\";// Input data is integer typevar_dump(IntlChar::isalnum(\"234\"));echo \"<br>\";// Input data is special character typevar_dump(IntlChar::isalnum(\"*\"));echo \"<br>\";?>Output:  bool(true)   NULL   NULL   bool(false)Program 2:<?php// PHP code to illustrate IntlChar::isalnum()// function// Declare an array $arr$arr = array(\"4\", \"20001111\", \"^\", \"  \", \"*\", \"GeeksforGeeks\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isalnum($val));    echo \"<br>\";}?>Output:  bool(true)   NULL   bool(false)   NULL   bool(false)   NULLRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isprint() Function","The IntlChar::isprint() function is an inbuilt function in PHP which is used to check whether the given input character is a printable character or not.Syntax:bool IntlChar::isprint( $codepoint )Paramters: This function accepts single parameter $codepoint which is mandotary. The input parameter is an integer values or character, which is encoded as a UTF-8 string.Return Value: If $codepoint is a printable character then it returns True, otherwise return False.Below programs illustrate the IntlChar::isprint() function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::isprint()// function// Input data is character typevar_dump(IntlChar::isprint(\"G\"));echo \"<br>\";// Input data is special charactervar_dump(IntlChar::isprint(\"@\"));echo \"<br>\";// Input data is control charactervar_dump(IntlChar::isprint(\"\\t\"));echo \"<br>\";// Input data is string typevar_dump(IntlChar::isprint(\"Geeksforgeeks\"));echo \"<br>\";// Input data is numbervar_dump(IntlChar::isprint(\"2018\"));echo \"<br>\";// Input data is single digitvar_dump(IntlChar::isprint(\"5\"));echo \"<br>\";?>Output:  bool(true)   bool(true)   bool(false)   NULL   NULL   bool(true)Note: If String and Numbers are used as a parameter then it returns NULL.Program 2:<?php// PHP code to illustrate iscntrl()// Declare an array $arr$arr = array(\"G\", \"GeeksforGeeks\", \"^\", \"1001\", \"6\",                                \"\\n\", \"\\n\\n\", \"\\t\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isprint($val));    echo \"<br>\";}?>Output:  bool(true)   NULL   bool(true)   NULL   bool(true)   bool(false)   NULL   bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::iscntrl() Function","The IntlChar::iscntrl() function is an inbuilt function in PHP which is used to check the given input is a control character or not. Control characters are line feed, tab, escape etc.A control character is one of the following types:ISO 8-bit control character (U+0000..U+001f and U+007f..U+009f)IntlChar::CHAR_CATEGORY_CONTROL_CHAR (Cc)IntlChar::CHAR_CATEGORY_FORMAT_CHAR (Cf)IntlChar::CHAR_CATEGORY_LINE_SEPARATOR (Zl)IntlChar::CHAR_CATEGORY_PARAGRAPH_SEPARATOR (Zp)Syntax:bool IntlChar::iscntrl( $codepoint )Paramters: This function accepts single parameter $codepoint which is mandotary. The codepoint value is an integer values or character, which is encoded as a UTF-8 string.Return Value: If $codepoint is a control character then it return True, otherwise return False.Below programs illustrate the IntlChar::iscntrl() function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::iscntrl()// function// Input data is character typevar_dump(IntlChar::iscntrl(\"G\"));echo \"<br>\";// Input data is control charactervar_dump(IntlChar::iscntrl(\"\\n\"));echo \"<br>\";// Input data is string type with control charactervar_dump(IntlChar::iscntrl(\"G\\n\"));echo \"<br>\";// Input data is string type with no control charactervar_dump(IntlChar::iscntrl(\"Geeksforgeeks\"));echo \"<br>\";// Input data is numbervar_dump(IntlChar::iscntrl(\"2018\"));echo \"<br>\";// Input data is single digitvar_dump(IntlChar::iscntrl(\"5\"));echo \"<br>\";?>Output:  bool(false)   bool(true)   NULL   NULL   NULL   bool(false)Note: If String and Numbers are used as a parameter then it returns NULL.Program 2:<?php// PHP code to illustrate iscntrl()// Declare an array $arr$arr = array(\"G\", \"GeeksforGeeks\", \"^\", \"1001\", \"6\", \"\\n\",                                             \"\\n\\n\", \"\\t\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::iscntrl($val));    echo \"<br>\";}?>Output:  bool(false)   NULL   bool(false)   NULL   bool(false)   bool(true)   NULL   bool(true)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isxdigit() Function","The IntlChar::isxdigit() function is an inbuilt function in PHP which is used to check whether the given input character is a hexadecimal digit or not. It is TRUE for decimal digit numbers (0 – 9), Latin letters (a – f) and (A – F) in both ASCII and Fullwidth ASCII (Letters with codepoint \\u{0041} to \\u{0046}, \\u{0061} to \\u{0066}, \\u{FF21} to \\u{FF26} and \\u{FF41} to \\u{FF46}).Syntax:bool IntlChar::isxdigit( $codepoint )Paramters: This function accepts single parameter $codepoint which is mandotary. The input parameter is an integer values or character, which is encoded as a UTF-8 string.Return Value: If $codepoint is a hexadecimal digit then it returns True, otherwise return False.Below programs illustrate the IntlChar::isxdigit() function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::isxdigit()// function// Input data is digit type 0-9var_dump(IntlChar::isxdigit(\"0\"));echo \"<br>\";var_dump(IntlChar::isxdigit(\"9\"));echo \"<br>\";var_dump(IntlChar::isxdigit(\"10\"));echo \"<br>\";// Input data is character typevar_dump(IntlChar::isxdigit(\"A\"));echo \"<br>\";var_dump(IntlChar::isxdigit(\"a\"));echo \"<br>\";var_dump(IntlChar::isxdigit(\"F\"));echo \"<br>\";var_dump(IntlChar::isxdigit(\"f\"));echo \"<br>\";var_dump(IntlChar::isxdigit(\"G\"));echo \"<br>\";var_dump(IntlChar::isxdigit(\"g\"));echo \"<br>\";// Input data is FULL ASCIIvar_dump(IntlChar::isxdigit(\"\\u{0041}\"));echo \"<br>\";var_dump(IntlChar::isxdigit(\"\\u{0046}\"));echo \"<br>\";var_dump(IntlChar::isxdigit(\"\\u{0047}\"));echo \"<br>\";?>Output:  bool(true)   bool(true)   NULL   bool(true)   bool(true)   bool(true)   bool(true)   bool(false)   bool(false)   bool(true)   bool(true)   bool(false)Program 2:<?php// PHP code to illustrate isxdigit()// Declare an array $arr$arr = array(\"0\", \"9\", \"a\", \"A\", \"f\", \"\\u{0041}\",      \"\\u{0066}\", \"\\u{0067}\", \"G\", \"10\", \"Geeks\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isxdigit($val));    echo \"<br>\";}?>Output:  bool(true)   bool(true)   bool(true)   bool(true)   bool(true)   bool(true)   bool(true)   bool(false)   bool(false)   NULL   NULLNote: IntlChar::isxdigit() is equivalent to IntlChar::digit($codepoint, 16) >= 0.Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isspace() Function","The IntlChar::isspace() function is an inbuilt function in PHP which is used to check whether the given input character is a space character or not.Syntax:bool IntlChar::isspace( $codepoint )Paramters: This function accepts single parameter $codepoint which is mandotary. The input parameter is an integer value or character, which is encoded as UTF-8 string.Return Value: If $codepoint is a space character then it returns True, otherwise return False.Below programs illustrate the IntlChar::isspace() function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::isspace()// function// Input data is space charactervar_dump(IntlChar::isspace(\"\\n\"));echo \"<br>\";// Input character is control or space charactervar_dump(IntlChar::isspace(\"\\t\"));echo \"<br>\";// Input data is string typevar_dump(IntlChar::isspace(\"Geeksforgeeks\"));echo \"<br>\";// Input data is number typevar_dump(IntlChar::isspace(\"2018\"));echo \"<br>\";// Input data is single digitvar_dump(IntlChar::isspace(\"5\"));echo \"<br>\";// Input data is punctuation character dotvar_dump(IntlChar::isspace(\".\"));echo \"<br>\";// Input data is space charactervar_dump(IntlChar::isspace(\" \"));echo \"<br>\";?>Output:  bool(true)   bool(true)   NULL   NULL   bool(false)   bool(false)   bool(true)Note: If String and Numbers (except single digit number) are used as a parameter then it returns NULL.Program 2:<?php// PHP code to illustrate isspace()// Declare an array $arr$arr = array(\" \", \"\\n\", \"\\r\", \"\\t\", \"Geeks\", \".\", \"G\", \"0\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isspace($val));    echo \"<br>\";}?>Output:  bool(true)   bool(true)   bool(true)   bool(true)   NULL   bool(false)   bool(false)   bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::ispunct() Function","The IntlChar::ispunct() function is an inbuilt function in PHP which is used to check whether the given input character is a punctuation character or not.Syntax:bool IntlChar::ispunct( $codepoint )Paramters: This function accepts single parameter $codepoint which is mandotary. The input parameter is an integer values or character, which is encoded as a UTF-8 string.Return Value: If $codepoint is a punctuation character then it returns True, otherwise return False.Below programs illustrate the IntlChar::ispunct() function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::ispunct()// function// Input data is character typevar_dump(IntlChar::ispunct(\"G\"));echo \"<br>\";// Input data is control charactervar_dump(IntlChar::ispunct(\"\\t\"));echo \"<br>\";// Input data is string typevar_dump(IntlChar::ispunct(\"Geeksforgeeks\"));echo \"<br>\";// Input data is number typevar_dump(IntlChar::ispunct(\"2018\"));echo \"<br>\";// Input data is single digitvar_dump(IntlChar::ispunct(\"5\"));echo \"<br>\";// Input data is punctuation character dotvar_dump(IntlChar::ispunct(\".\"));echo \"<br>\";// Input data is punctuation character commavar_dump(IntlChar::ispunct(\",\"));echo \"<br>\";?>Output:  bool(false)   bool(false)   NULL   NULL   bool(false)   bool(true)   bool(true)Note: If String and Numbers (except single digit number) are used as a parameter then it returns NULL.Program 2:<?php// PHP code to illustrate ispunct()// Declare an array $arr$arr = array(\"&\", \"%\", \"@\", \"!\", \"(\", \")\", \".\", \",\", \"/\", \"G\", \"0\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::ispunct($val));    echo \"<br>\";}?>Output:  bool(true)   bool(true)   bool(true)   bool(true)   bool(true)   bool(true)   bool(true)   bool(true)   bool(true)   bool(false)   bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isUUppercase() Function","The IntlChar::isUUppercase() function is an inbuilt function in PHP which is used to check whether the given input character is an Uppercase Unicode character or not.Syntax:bool IntlChar::isUUppercase( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandotary. The input parameter is a character value, which is encoded as a UTF-8 string.Return Value: If $codepoint is an UpperCase Unicode character then it returns True, otherwise return False.Note:The function is different from IntlChar::isupper() function.Below programs illustrate the IntlChar::isupper() Function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::isUUppercase// function// Input data is Capital letter or charactervar_dump(IntlChar::isUUppercase(\"M\"));echo \"<br>\";// Input data is small letter or charactervar_dump(IntlChar::isUUppercase(\"m\"));echo \"<br>\";// Input data is Capital letter stringvar_dump(IntlChar::isUUppercase(\"GEEKS\"));echo \"<br>\";// Input data is small letter stringvar_dump(IntlChar::isUUppercase(\"geeks\"));echo \"<br>\";// Input data is interger valuevar_dump(IntlChar::isUUppercase(\"7\"));echo \"<br>\";?>Output:  bool(true)   bool(false)   NULL   NULL   bool(false)Program 2:<?php// PHP code to IntlChar::isUUppercase// function// Declare an array $arr$arr = array(\"X\", \"ReportBug\", \"^\", \"c\", \"\\t\");// Loop run for every array elementforeach ($arr as $val) {    // Check each element of array    var_dump(IntlChar::isUUppercase($val));    echo \"<br>\";}?>Output:  bool(true)   NULL   bool(false)   bool(false)   bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::charName() Function","The IntlChar::charName() function is an inbuilt function in PHP used to retrieve the name of a Unicode character.Syntax:string IntlChar::charName( $codepoint [, $nameChoice = IntlChar::UNICODE_CHAR_NAME] )Parameters: This function accepts two parameters as mentioned above and described below:$codepoint: This parameter is a character or integer value, which is encoded as a UTF-8 string.$nameChoice: The $nameChoice parameter is satisfied one of any following constant condition:IntlChar::UNICODE_CHAR_NAME (default)IntlChar::CHAR_NAME_ALIASIntlChar::CHAR_NAME_CHOICE_COUNTIntlChar::UNICODE_10_CHAR_NAMEIntlChar::EXTENDED_CHAR_NAMENote: The resulting character name is modern name with Unicode version 1.0 and the name contains “invariant” characters A-Z, 0-9, ” “, and ‘-‘ and depends its $nameChoice parameter.Return Value: This function returns the corresponding name of input data. If there is no name of character then return the empty string.Below programs illustrate the IntlChar::charName() Function in PHP.Program 1:<?php// PHP code to illustrate// IntlChar::charName ()function// Input astrick symbol of codepoint  value// with constraint UNICODE_CHAR_NAMEvar_dump(IntlChar::charName(\"*\"));echo \"<br>\";var_dump(IntlChar::charName(\"*\", IntlChar::UNICODE_CHAR_NAME));echo \"<br> <br>\";// Input start bracket symbol of codepoint  value// with constraint UNICODE_10_CHAR_NAMEvar_dump(IntlChar::charName(\"(\"));echo \"<br>\";var_dump(IntlChar::charName(\"(\", IntlChar::UNICODE_10_CHAR_NAME));echo \"<br> <br>\";// Input ampersand symbol of codepoint value// with constraint EXTENDED_CHAR_NAMEvar_dump(IntlChar::charName(\"&\"));echo \"<br>\";var_dump(IntlChar::charName(\"&\", IntlChar::EXTENDED_CHAR_NAME));echo \"<br> <br>\";// Input ^ symbol of codepoint value// with constraint CHAR_NAME_ALIASvar_dump(IntlChar::charName(\"^\"));echo \"<br>\";var_dump(IntlChar::charName(\"^\", IntlChar::CHAR_NAME_ALIAS ));echo \"<br> <br>\";// Input tile symbol of codepoint value//and  with constraint CHAR_NAME_CHOICE_COUNTvar_dump(IntlChar::charName(\"`\"));echo \"<br>\";var_dump(IntlChar::charName(\"`\", IntlChar::CHAR_NAME_CHOICE_COUNT));echo \"<br> <br>\";// Input space of codepoint valuevar_dump(IntlChar::charName(\" \"));echo \"<br>\";// Input space in codepoint value with// UNICODE_CHAR_NAME conditionvar_dump(IntlChar::charName(\" \", IntlChar::UNICODE_CHAR_NAME));echo \"<br> <br>\";// Input Alphabet both Capital and Small character// condition EXTENDED_CHAR_NAME// and UNICODE_10_CHAR_NAMEvar_dump(IntlChar::charName(\"R\"));echo \"<br>\";var_dump(IntlChar::charName(\"r\"));echo \"<br>\";var_dump(IntlChar::charName(\"R\", IntlChar::EXTENDED_CHAR_NAME));echo \"<br> <br>\";// Input int codepoint valuevar_dump(IntlChar::charName(\"10\"));echo \"<br>\";var_dump(IntlChar::charName(\"7\"));echo \"<br> <br>\";// Input Null codepoint valuevar_dump(IntlChar::charName(\"\\u{0000}\"));echo \"<br>\";?>Output:  string(8) \"ASTERISK\"   string(8) \"ASTERISK\"     string(16) \"LEFT PARENTHESIS\"   string(0) \"\"     string(9) \"AMPERSAND\"   string(9) \"AMPERSAND\"     string(17) \"CIRCUMFLEX ACCENT\"   string(0) \"\"     string(12) \"GRAVE ACCENT\"   NULL     string(5) \"SPACE\"   string(5) \"SPACE\"     string(22) \"LATIN CAPITAL LETTER R\"   string(20) \"LATIN SMALL LETTER R\"   string(22) \"LATIN CAPITAL LETTER R\"     NULL   string(11) \"DIGIT SEVEN\"     string(0) \"\"Program 2:<?php// PHP code to illustrate// IntlChar::charName() function// Declare an array $arr$arr = array(\"G\", \".\", \"8\", \"/\", \"000\", \"\\t\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::charName($val));    echo \"<br>\";}?>Output:  string(22) \"LATIN CAPITAL LETTER G\"   string(9) \"FULL STOP\"   string(11) \"DIGIT EIGHT\"   string(7) \"SOLIDUS\"   NULL   string(0) \"\"Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::charAge() Function","The IntlChar::charAge() function is an inbuilt function in PHP which is used to calculate the age of code point. Where the age is Unicode version when the code point was first designated or assigned a character. This can be useful to avoid emitting code points to receiving processes that do not accept newer characters.Syntax:array IntlChar::charAge( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandotary. The input parameter is a character or integer value, which is encoded as a UTF-8 string.Return Value: In true cases the $codepoint return the Unicode version number of an array.Below programs illustrate the IntlChar::charAge() function in PHP.Program 1:<?php// PHP code to illustrate IntlChar::charage()// function// Input int codepoint valuevar_dump(IntlChar::charage(\"\\u{2025}\"));echo \"<br>\";// Input character codepoint valuevar_dump(IntlChar::charage(\"\\u{1F878}\"));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::charage(\"\\u20\"));echo \"<br>\";// Input character codepoint valuevar_dump(IntlChar::charage(\"Geeks\"));echo \"<br>\";?>Output:  array(4) { [0]=> int(1) [1]=> int(1) [2]=> int(0) [3]=> int(0) }   array(4) { [0]=> int(7) [1]=> int(0) [2]=> int(0) [3]=> int(0) }   NULL   NULLProgram 2:<?php// PHP code to illustrate charage()// Declare an array $arr$arr = array(\"^\", \"2345\", \"6\", \"\\n\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::charage($val));    echo \"<br>\";}?>Output:  array(4) { [0]=> int(1) [1]=> int(1) [2]=> int(0) [3]=> int(0) }   NULL   array(4) { [0]=> int(1) [1]=> int(1) [2]=> int(0) [3]=> int(0) }   array(4) { [0]=> int(1) [1]=> int(1) [2]=> int(0) [3]=> int(0) }Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isUWhiteSpace() Function","The IntlChar::isUWhiteSpace() function is an inbuilt function in PHP which is used to check whether the given input character is a WhiteSpace Unicode character or not. IntlChar accesses a number utility function and used to access the information about Unicode Characters.Syntax:bool IntlChar::isUWhiteSpace( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandotary. The input parameter is a character or integer value, which is encoded as a UTF-8 string.Return Value: If $codepoint is WhiteSpace character then returns True, otherwise return False.Below programs illustrate the IntlChar::isUWhiteSpace() Function in PHP.Program 1:<?php// PHP code to illustrate IntlChar::isUWhiteSpace()// function// Input Capital Lettervar_dump(IntlChar::isUWhiteSpace(\"N\"));echo \"<br>\";// Input Small Lettervar_dump(IntlChar::isUWhiteSpace(\" n \"));echo \"<br>\";// Input Whitesapce Character  \"\\n \"var_dump(IntlChar::isUWhiteSpace(\"\\n\"));echo \"<br>\";// Input encoded stringvar_dump(IntlChar::isUWhiteSpace(\"\\u{00B0}\"));echo \"<br>\";?>Output:  bool(false)  NULL  bool(true)  bool(false)Program 2:<?php// PHP code to IntlChar::isUWhiteSpace()// function// Declare an array $arr$arr = array(\"X\\t\", \"\\n\", \"^\", \"\\r\", \"\\t\\r\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isUWhiteSpace($val));    echo \"<br>\";}?>Output:  NULL  bool(true)  bool(false)  bool(true)  NULLRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isIDIgnorable() Function","The IntlChar::isIDIgnorable() function is an inbuilt function in PHP which is used to determine the code point is an ignorable character or not. It is TRUE for characters with general category “Cf” (format controls) as well as non-whitespace ISO controls ( U+0000…U+0008, U+000E…U+001B, U+007F…U+009F).Syntax:bool IntlChar::isIDIgnorable( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. It is a character or integer value, which is encoded as UTF-8 string.Return Value: If $codepoint is an ignorable identifier then returns True, otherwise return False.Below programs illustrate the IntlChar::isIDIgnorable() Function in PHP.Program 1:<?php// PHP code to illustrate// IntlChar::isIDIgnorable() function// Input character codepoint valuevar_dump(IntlChar::isIDIgnorable(\"X\"));echo \"<br>\";// Input symbolic codepoint valuevar_dump(IntlChar::isIDIgnorable(\"^ \"));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::isIDIgnorable(\"3 \"));echo \"<br>\";// Input int char an identifier// of codepoint valuevar_dump(IntlChar::isIDIgnorable(\"\\u{007F}\"));echo \"<br>\";var_dump(IntlChar::isIDIgnorable(\"\\u{012C}\"));echo \"<br>\";// Input string codepoint valuevar_dump(IntlChar::isIDIgnorable(\"Geeks\"));echo \"<br>\";?>Output:  bool(false)  NULL  NULL  bool(true)  bool(false)  NULLProgram 2:<?php// PHP code to illustrate// IntlChar::isIDIgnorable function// Declare an array $arr$arr = array(\"G\", \"\\u{007F}\", \".\", \"8\", \"/\",              \"\\u{000}\", \"\\t\", \"\\u{007}\", \"\\u{0AB}\" );// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isIDIgnorable($val));    echo \"<br>\";}?>Output:  bool(false)  bool(true)  bool(false)  bool(false)  bool(false)  bool(true)  bool(false)  bool(true)  bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isISOControl() Function","The IntlChar::isISOControl() function is an inbuilt function in PHP which is used to check whether the input code point is an ISO control code character or not. Specified code point to be determined whether the code point is ISO control code. It is True for general category “Cc” as U+0000…U+001f and U+007f…U+009f.Syntax:bool IntlChar::isISOControl( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The input parameter is a character or interger value, which is encoded as a UTF-8 string.Return Value: If $codepoint is an ISO control code character then returns True, otherwise return False.Note: If input code point parameter is String and Numbers then it returns NULL.Below programs illustrate the IntlChar::isISOControl() Function in PHP:Program 1:<?php// PHP code to illustrate// IntlChar::isISOControl() function// Input control with double \" \"// character codepoint valuevar_dump(IntlChar::isISOControl(\"\\n\"));echo \"<br>\";// Input control with single \'\'// character codepoint valuevar_dump(IntlChar::isISOControl(\'\\n\'));echo \"<br>\";// Input string codepoint valuevar_dump(IntlChar::isISOControl(\"Sudo\\tPlacement\"));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::isISOControl(\"3 \"));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::isISOControl(\"1\\n2\\n3\\n4\\n \"));echo \"<br>\";// Input floating codepoint valuevar_dump(IntlChar::isISOControl(\"33.44\"));echo \"<br>\";// Input int char an identifier// of codepoint valuevar_dump(IntlChar::isISOControl(\"\\u{007F}\"));echo \"<br>\";// Input symbolic codepoint valuevar_dump(IntlChar::isISOControl(\" @ \"));echo \"<br>\";?>Output:  bool(true)  NULL  NULL  NULL  NULL  NULL  bool(true)  NULLProgram 2:<?php// PHP code to illustrate// IntlChar::isIStart() function// Declare an array with// different codepoint value$arr = array(\"\\r\",             \".\",             \" \",             \"\\n\",             \"\\u\",             \" \",             \"\\t\",             \"\\\\\",        );// For loop condition to check// each character through functionforeach ($arr as $val) {    // Check each element as code point data    var_dump(IntlChar::isISOControl($val));    echo \"<br>\";}?>Output:  bool(true)  bool(false)  bool(false)  bool(true)  NULL  bool(false)  bool(true)  bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isULowercase() Function","The IntlChar::isULowercase() function is an inbuilt function in PHP which is used to check whether the given input character is a Lowercase character or not.Syntax:bool IntlChar::isULowercase( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandotary. The input parameter is a character or interger value , which is encoded as a UTF-8 string.Return Value: If $codepoint is an Lowercase Unicode character then it return True, otherwise return False.Note: This function is different from IntlChar::islower() function.Below programs illustrate the IntlChar::isULowercase() Function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::iscntrl()// function// Input data is Capital letter or charactervar_dump(IntlChar::isULowercase(\"M\"));echo \"<br>\";// Input data is small letter or charactervar_dump(IntlChar::isULowercase(\"m\"));echo \"<br>\";// Input data is Capital letter stringvar_dump(IntlChar::isULowercase(\"GEEKS\"));echo \"<br>\";// Input data is small letter stringvar_dump(IntlChar::isULowercase(\"geeks\"));echo \"<br>\";// Input data is interger valuevar_dump(IntlChar::isULowercase(\"7\"));echo \"<br>\";?>Output:  bool(false)  bool(true)  NULL  NULL  bool(false)Program 2:<?php// PHP code to IntlChar::isULowercase()// function// Declare an array $arr$arr = array(\"G\", \"Sudo\", \"^\", \"s\", \"6\", \"\\n\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isULowercase($val));    echo \"<br>\";}?>Output:  bool(false)   NULL   bool(false)   bool(true)   bool(false)   bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isIDPart() Function","The IntlChar::isIDPart() function is an inbuilt function in PHP which is used to check whether the given input character is permissible in an identifier or not. It is True for characters with general category “L” (Letters), “Nd” (Decimal digits), “Nl” (letters numbers), “Mc” and “Mn”(Combining marks), “Pc” (Connecting Punctuation) and u_isIDIgnorable(c).Syntax:bool IntlChar::isIDPart( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The input parameter is a character or interger value, which is encoded as a UTF-8 string.Return Value: If $codepoint is an identifier character then returns True, otherwise return False.Below programs illustrate the IntlChar::isIDPart() Function in PHP:Program 1:<?php// PHP code to illustrate// IntlChar::isIDPart() function// Input character codepoint valuevar_dump(IntlChar::isIDPart(\"X\"));echo \"<br>\";// Input string codepoint valuevar_dump(IntlChar::isIDPart(\"Geeks\"));echo \"<br>\";// Input symbolic codepoint valuevar_dump(IntlChar::isIDPart(\"^ \"));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::isIDPart(\"3 \"));echo \"<br>\";// Input int char an identifier// of codepoint valuevar_dump(IntlChar::isIDPart(\"\\u{007F}\"));echo \"<br>\";var_dump(IntlChar::isIDPart(\"\\u{012C}\"));echo \"<br>\";?>Output:  bool(true)  NULL  NULL  NULL  bool(true)  bool(true)Program 2:<?php// PHP code to illustrate// IntlChar::isIDPart() function// Declare an array with// different codepoint value$arr = array(\"D\",            \"\\u{007F}\",            \".\",            \"8\",            \"/\",            \" \"      );// For loop condition to check// each character through functionforeach ($arr as $val) {    // Check each element as code point data    var_dump(IntlChar::isIDPart($val));    echo \"<br>\";}?>Output:  bool(true)  bool(true)  bool(false)  bool(true)  bool(false)  bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::ord() Function","The IntlChar::ord() function is an inbuilt function in PHP which is used to return the Unicode code point value of the given character.Syntax:int IntlChar::ord( $character )Parameters: This function accepts single parameter $character which is mendatory. This parameter is a Unicode character.Return Value: It returns Unicode code point value as an integer.Below programs illustrate the IntlChar::ord() Function in PHP:Program 1:<?php// PHP function to illustrate// the use of IntlChar::ord()// Input int codepoint valuevar_dump(IntlChar::ord(\"4\"));echo \"<br>\";// Input character codepoint valuevar_dump(IntlChar::ord(\"B\"));echo \"<br>\";// Input character codepoint valuevar_dump(IntlChar::ord(\"b\"));echo \"<br>\";//Input int codepoint valuevar_dump(IntlChar::ord(\"2018\"));echo \"<br>\";// Input character codepoint valuevar_dump(IntlChar::ord(\"Geeks\"));echo \"<br>\";// Input symbole codepoint valuevar_dump(IntlChar::ord(\"@\"));echo \"<br>\";// Input symbole codepoint valuevar_dump(IntlChar::ord(\"*\"));echo \"<br>\";// Input space codepoint valuevar_dump(IntlChar::ord(\" \"));echo \"<br>\";?>Output:  int(52)  int(66)  int(98)  NULL  NULL  int(64)  int(42)  int(32)Program 2:<?php// PHP function to illustrate the// use of IntlChar::ord()// Declare an array with// different codepoint value$arr = array(\"X\",            \"x\",            \"*\",            \"8\",            \"0\",            \" \",            \"&\",            \")\",            \"99\",        );// For loop condition to check// each character through functionforeach ($arr as $val) {    // Check each element as code point data    var_dump(IntlChar::ord($val));    echo \"<br>\";}?>Output:  int(88)  int(120)  int(42)  int(56)  int(48)  int(32)  int(38)  int(41)  NULLRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isJavaIDStart() Function","The IntlChar::isJavaIDStart() function is an inbuilt function in PHP which is used to check whether the input character code point is permissible since the first character is a java identifier or not. It is True for characters with general category “Sc” (Currency Symbols), and “Pc” (Connecting Punctuation).Syntax:bool IntlChar::isJavaIDStart( $codepoint )Parameters: This function accepts single parameter $codepoint which is mendatory. The input parameter $codepoint is a character or interger value, which is encoded as a UTF-8 string.Return Value: Returns True, if $codepoint start with Java identifier character, otherwise return False.Below programs illustrate the IntlChar::isJavaIDStart() function in PHP:Program 1:<?php// PHP function to illustrate the// use of IntlChar::isJavaIDStart()// Input string codepoint value with// Capital and small lettervar_dump(IntlChar::isJavaIDStart(\"R\"));echo \"<br>\";// Input string codepoint value with small charactervar_dump(IntlChar::isJavaIDStart(\"r\"));echo \"<br>\";// Input control character codepoint valuevar_dump(IntlChar::isJavaIDStart(\"\\n\"));echo \"<br>\";// Input string codepoint valuevar_dump(IntlChar::isJavaIDStart(\"Bug\"));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::isJavaIDStart(\"3 \"));echo \"<br>\";// Input int char an identifier// of codepoint valuevar_dump(IntlChar::isJavaIDStart(\"\\u{007F}\"));echo \"<br>\";// Input symbolic codepoint valuevar_dump(IntlChar::isJavaIDStart(\" @ \"));echo \"<br>\";var_dump(IntlChar::isJavaIDStart(\" $ \"));echo \"<br>\";?>Output:  bool(true)  bool(true)  bool(false)  NULL  NULL  bool(false)  NULL  NULLProgram 2:<?php// PHP function to illustrate the// use of IntlChar::isJavaIDPart()// Declare an array with// different codepoint value$arr = array(\"C\",             \" \",             \"\\n\",             \" #\",             \"\\t\",             \"Code\",        );// For loop condition to check// each character through functionforeach ($arr as $val) {    // Check each element as code point data    var_dump(IntlChar::isJavaIDStart($val));    echo \"<br>\";}?>Output:  bool(true)  bool(false)  bool(false)  NULL  bool(false)  NULLRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isJavaSpaceChar() Function","The IntlChar::isJavaSpaceChar() function is an inbuilt function in PHP which is used to check whether the input character code point is a space character or not according to Java. Its value is True for characters with general category “Z” (Separators), which does not include control character.Syntax:bool IntlChar::isJavaSpaceChar( $codepoint )Parameters: This function accepts single parameter $codepoint which is mendatory. The input parameter $codepoint is a character or interger value, which is encoded as a UTF-8 string.Return Value: Returns True, if $codepoint is space character according to java, otherwise return False.Below programs illustrate the IntlChar::isJavaSpaceChar() Function in PHP:Program 1:<?php// PHP function to illustrate the// use of IntlChar::isJavaSpaceChar()// Input control character codepoint valuevar_dump(IntlChar::isJavaSpaceChar(\"\\n\"));echo \"<br>\";// Input control character codepoint valuevar_dump(IntlChar::isJavaSpaceChar(\"\\r\"));echo \"<br>\";// Input string codepoint value with// Capital and small lettervar_dump(IntlChar::isJavaSpaceChar(\"V\"));echo \"<br>\";// Input int char an identifier// of codepoint valuevar_dump(IntlChar::isJavaSpaceChar(\"\\u{00A0}\"));echo \"<br>\";// Input symbolic space codepoint valuevar_dump(IntlChar::isJavaSpaceChar(\" \"));echo \"<br>\";// Input symbolic codepoint valuevar_dump(IntlChar::isJavaSpaceChar(\" ^ \"));echo \"<br>\";// Input string codepoint valuevar_dump(IntlChar::isJavaSpaceChar(\"Bug\"));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::isJavaSpaceChar(\"3 \"));echo \"<br>\";?>Output:  bool(false)   bool(false)   bool(false)   bool(true)   bool(true)   NULL   NULL   NULLProgram 2:<?php// PHP function to illustrate the// use of IntlChar::isJavaSpaceChar()// Declare an array with// different codepoint value$arr = array(\"\\\\\",             \" \",             \"\\n\",             \" #\",             \"\\t\",        );// For loop condition to check// each character through functionforeach ($arr as $val) {    // Check each element as code point data    var_dump(IntlChar::isJavaSpaceChar($val));    echo \"<br>\";}?>Output:  bool(false)  bool(true)  bool(false)  NULL  bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::chr() Function","The IntlChar::chr() function is an inbuilt function in PHP which is used to check whether the given input character is Unicode code point value or not. It returns Unicode character by code point value.Syntax:string IntlChar::chr( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The input parameter is a character or interger value, which is encoded as a UTF-8 string.Return Value: In True cases, the $codepoint string contain the single character, which is specified by the Unicode code point value, otherwise return NULL.Below programs illustrate the IntlChar::chr() function in PHP:Program 1:<?php// PHP function to illustrate// the use of IntlChar::chr()// Input int codepoint valuevar_dump(IntlChar::chr(\" \"));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::chr(101));echo \"<br>\";// Input char codepoint valuevar_dump(IntlChar::chr(\"G\"));echo \"<br>\";// Input char  codepoint valuevar_dump(IntlChar::chr(\"Geeks\"));echo \"<br>\";// Input Symbolic codepoint valuevar_dump(IntlChar::chr(\"$\"));echo \"<br>\";// Input Symbolic codepoint valuevar_dump(IntlChar::chr(\"#\"));echo \"<br>\";// Input Symbolic codepoint valuevar_dump(IntlChar::chr(\"@\"));echo \"<br>\";?>Output:  string(1) \" \"   string(1) \"e\"   string(1) \"G\"   NULL   string(1) \"$\"   string(1) \"#\"   string(1) \"@\"Program 2:<?php// PHP function to illustrate the// use of IntlChar::chr// Declare an array with// different codepoint value$arr = array(\"D\",            (\"E\"),             77,            123,            65,            97,        );// For loop condition to check// each character through functionforeach ($arr as $val) {    // Check each element as code point data    var_dump(IntlChar::chr($val));    echo \"<br>\";}?>Output:  string(1) \"D\"   string(1) \"E\"   string(1) \"M\"    string(1) \"{\"   string(1) \"A\"   string(1) \"a\"Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::forDigit() Function","The IntlChar::forDigit() function is an inbuilt function in PHP which is used to determines the character representation for a specific digit in the specified radix.Syntax:int IntlChar::forDigit( $digit, $radix )Parameters: This function accepts two parameters as mentioned above and described below:$digit: It is a required parameter. It is a number to convert to a character.$radix: It is optional parameter. Its default value is 10.Return Value: It returns the character representation of specified digit in the specified radix.Note: Valid and invalid function argument:If both $radix or $digit is not valid then return NULL.The radix argument is valid if its value lies between $radix >= 2 and $radix <= 36.The digit is valid if its value is 0 <= digit < radix.In Digit Case: digit < 10, then sum of '0' + digit is returned, otherwise 'a' + digit -10 is returned.Below programs illustrate the IntlChar::forDigit() function in PHP:Program 1:<?php// PHP function to illustrate// the use of IntlChar::forDigit()// Input int codepoint valuevar_dump(IntlChar::forDigit(0));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::forDigit(1));echo \"<br>\";//Input int codepoint valuevar_dump(IntlChar::forDigit(10));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::forDigit(10, 2018));echo \"<br>\";// Input float codepoint valuevar_dump(IntlChar::forDigit(20999.1811));echo \"<br>\";?>Output:  int(48)  int(49)  int(0)  int(0)  int(0)Program 2:<?php// PHP function to illustrate the// use of IntlChar::forDigit()// Declare an array with// different codepoint value$arr = array(\"7\",            (50),            \"8\",            \"0\",        );// For loop condition to check// each character through functionforeach ($arr as $val) {    // Check each element as code point data    var_dump(IntlChar::forDigit($val));    echo \"<br>\";}?>Output:  int(55)  int(0)  int(56)  int(48)Program 3: Below is the function implementation if pass the parameter symbol or character, then it gives an error.<?php// PHP function to illustrate// the use of IntlChar::forDigit()//Input char codepoint valuevar_dump(IntlChar::forDigit(\"Geeks\"));echo \"<br>\";//Input char codepoint valuevar_dump(IntlChar::forDigit(\"X\"));echo \"<br>\";//Input control codepoint valuevar_dump(IntlChar::forDigit(\"\\n\"));echo \"<br>\";//Input symbolic  codepoint valuevar_dump(IntlChar::forDigit(\"@\"));echo \"<br>\";?>Output:  E_WARNINGRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::totitle() Function","The IntlChar::totitle() function is an inbuilt function in PHP which is used to check whether the input code point is a Unicode character titlecase or not.Syntax:IntlChar::totitle( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The $codepoint parameter is a character or interger value, which is encoded as a UTF-8 string.Return Value: Returns the simple_Titlecase_Mapping of the code point, if any; otherwise the code point itself. The return type will be an integer unless the code point was passed as a UTF-8 string, in which case a string will be returned.Below programs illustrate the IntlChar::totitle() Function in PHP:Program 1:<?php// PHP function to illustrate the// use of IntlChar::totitle()// Input Capital letter  codepointvar_dump(IntlChar::totitle(\"G\"));echo \"<br>\";// Input Capital letter  codepointvar_dump(IntlChar::totitle(\"g\"));echo \"<br>\";// Input Capital letter  codepointvar_dump(IntlChar::totitle(\"a\"));echo \"<br>\";// Input int char an identifier// of codepoint valuevar_dump(IntlChar::totitle(\"\\u{00A0}\"));echo \"<br>\";// Input symbolic space codepoint valuevar_dump(IntlChar::totitle(\" \"));echo \"<br>\";// Input symbolic codepoint valuevar_dump(IntlChar::totitle(\" ^ \"));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::totitle(\"9\"));echo \"<br>\";// Input control character codepoint valuevar_dump(IntlChar::totitle(\"\\n\"));echo \"<br>\";// Input character value// return its ASCII valuevar_dump(IntlChar::totitle(ord(\"D\")));echo \"<br>\";var_dump(IntlChar::totitle(ord(\"d\")));echo \"<br>\";// Input  ASCII value 0054 is \"T\"var_dump(IntlChar::totitle(ord(\"0054\")));echo \"<br>\";var_dump(IntlChar::totitle(ord(\"@\")));?>Output:  string(1) \"G\"   string(1) \"G\"   string(1) \"A\"   string(2) \" \"   string(1) \" \"   NULL   string(1) \"9\"   string(1) \" \"   int(68)   int(68)   int(48)   int(64)Program 2:<?php// PHP function to illustrate the// use of IntlChar::totitle()// Declare an array with// different codepoint value$arr = array(\"X\",            \"x\",            \"*\",            \"8\",            \"0\",            \" \",        );// For loop condition to check// each character through functionforeach ($arr as $val) {    // Check each element as code point data    var_dump(IntlChar::totitle($val));    echo \"<br>\";}?>Output:  string(1) \"X\"  string(1) \"X\"  string(1) \"*\"  string(1) \"8\"  string(1) \"0\"  string(1) \" \"Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isJavaIDPart() Function","The IntlChar::isJavaIDPart() function is an inbuilt function in PHP which is used to check whether the input code point is permissible in a Java identifier character or not. Specified code point to be determined whether the code point is Java identifier. It is True for general category “Sc” (Currency Symbols) where added isIDPart() function.Syntax:bool IntlChar::isJavaIDPart( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The input parameter $codepoint is a character or interger value, which is encoded as UTF-8 string.Return Value: Returns True if $codepoint is Java identifier character, otherwise return False.Below programs illustrate the IntlChar::isJavaIDPart() Function in PHP:Program 1:<?php// PHP function to illustrate the// use of IntlChar::isJavaIDPart()// Input control character codepoint valuevar_dump(IntlChar::isJavaIDPart(\"\\n\"));echo \"<br>\";// Input string codepoint valuevar_dump(IntlChar::isJavaIDPart(\"Report Bug\"));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::isJavaIDPart(\"3 \"));echo \"<br>\";// Input string codepoint valuevar_dump(IntlChar::isJavaIDPart(\"R\"));echo \"<br>\";// Input floating codepoint valuevar_dump(IntlChar::isJavaIDPart(\"33.44\"));echo \"<br>\";// Input int char an identifier// of codepoint valuevar_dump(IntlChar::isJavaIDPart(\"\\u{007F}\"));echo \"<br>\";// Input symbolic codepoint valuevar_dump(IntlChar::isJavaIDPart(\" @ \"));echo \"<br>\";var_dump(IntlChar::isJavaIDPart(\" $ \"));echo \"<br>\";?>Output:  bool(false)  NULL  NULL  bool(true)  NULL  bool(true)  NULL  NULLProgram 2:<?php// PHP function to illustrate the// use of IntlChar::isJavaIDPart()// Declare an array with// different codepoint value$arr = array(\"\\r\",             \"R\",             \" \",             \"\\u\",             \" 5\",             \"\\t\",             \"Geeks\",        );// For loop condition to check// each character through functionforeach ($arr as $val) {    // Check each element as code point data    var_dump(IntlChar::isJavaIDPart($val));    echo \"<br>\";}?>Output:  bool(false)  bool(true)  bool(false)  NULL  NULL  bool(false)  NULLRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isIDStart() Function","The IntlChar::isIDStart() function is an inbuilt function in PHP which is used to check whether the given input character code point is permissible since the first character is an identifier or not. It is True for characters with general category “L” (Letters), and “Nl” (letters numbers).Syntax:bool IntlChar::isIDStart( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The input parameter is a character or interger value, which is encoded as a UTF-8 string.Return Value: If $codepoint start with an identifier character then returns True, otherwise return False.Below programs illustrate the IntlChar::isIDStart() Function in PHP:Program 1:<?php// PHP code to illustrate// IntlChar::isIDStart() function// Input character codepoint valuevar_dump(IntlChar::isIDStart(\"G\"));echo \"<br>\";// Input string codepoint valuevar_dump(IntlChar::isIDStart(\"Geeks\"));echo \"<br>\";// Input int codepoint valuevar_dump(IntlChar::isIDStart(\"3 \"));echo \"<br>\";// Input floating codepoint valuevar_dump(IntlChar::isIDStart(\"2025.6003\"));echo \"<br>\";// Input int char an identifier// of codepoint valuevar_dump(IntlChar::isIDStart(\"\\u{007F}\"));echo \"<br>\";var_dump(IntlChar::isIDStart(\"\\u{012C}\"));echo \"<br>\";// Input symbolic codepoint valuevar_dump(IntlChar::isIDStart(\" $ \"));echo \"<br>\";?>Output:  bool(true)  NULL  NULL  NULL  bool(false)  bool(true)  NULLProgram 2:<?php// PHP code to illustrate// IntlChar::isIStart() function// Declare an array with// different codepoint value$arr = array(\"h\",             \"H\",             \".\",             \"999\",             \"\\n\",             \" \",             \"\\u{007F}\"        );// For loop condition to check// each character through functionforeach ($arr as $val) {    // Check each element as code point data    var_dump(IntlChar::isIDStart($val));    echo \"<br>\";}?>Output:  bool(true)  bool(true)  bool(false)  NULL  bool(false)  bool(false)  bool(false)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isUAlphabetic() Function","The IntlChar::isUAlphabetic() function is an inbuilt function in PHP which is used to check whether the given input character is an Alphabetic Unicode character or not.Syntax:bool IntlChar::isUAlphabetic( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandotary. The input parameter is an integer or character, which is encoded as a UTF-8 string.Return Value: If $codepoint is an Alphabetic Unicode Character then returns True, otherwise return False.Below programs illustrate the IntlChar::isUAlphabetic() function in PHP:Program 1:<?php// PHP program to illustrate// IntlChar::isUAlphabetic() function// Input data is character typevar_dump(IntlChar::isUAlphabetic(\"G\"));echo \"<br>\";// Input data is string typevar_dump(IntlChar::isUAlphabetic(\"B\\n\"));echo \"<br>\";// Input data is string typevar_dump(IntlChar::isUAlphabetic(\"Geeksforgeeks\"));echo \"<br>\";// Input data is number(multiple digit)var_dump(IntlChar::isUAlphabetic(\"2018\"));echo \"<br>\";// Input data is single digitvar_dump(IntlChar::isUAlphabetic(\"9\"));echo \"<br>\";// Input data is floating point numbervar_dump(IntlChar::isUAlphabetic(\"10.99\"));?>Output:  bool(true)  NULL  NULL  NULL  bool(false)  NULLProgram 2:<?php// PHP code to illustrate isUAlphabetic()// Declare an array $arr$arr = array(\"Z\", \"291\", \"^\", \"  \", \"*\", \"Sudo Placement\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isUAlphabetic($val));    echo \"<br>\";}?>Output:  bool(true)  NULL  bool(false)  NULL  bool(false)  NULLRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isWhitespace() Function","The IntlChar::isWhitespace() function is an inbuilt function in PHP which is used to check whether the given input character is a WhiteSpace character or not according to ICU. IntlChar access number utility function and used to access the information about Unicode Characters.The White Space character is considered to ICU whitespace character if and only if it satisfies one of the following criteria:It is a Unicode Separator character (categories “Z” = “Zs” or “Zl” or “Zp”) but is not also a non-breaking space (U+00A0 NBSP or U+2007 Figure Space or U+202F Narrow NBSP).U+000A LINE FEED .U+000B VERTICAL TABULATION.U+000C FORM FEED.U+000D CARRIAGE RETURN.U+001C FILE SEPARATOR.U+001D GROUP SEPARATOR.U+001E RECORD SEPARATOR.U+001F UNIT SEPARATOR.U+0009 HORIZONTAL TABULATION.Syntax:bool IntlChar::isWhitespace( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandotary. The input parameter is a character or integer value, which is encoded as a UTF-8 string.Return Value: If $codepoint is a whiteSpace character according to ICU then it returns True, otherwise return False.Below programs illustrate the IntlChar::isWhitespace() Function in PHP:Program 1:<?php// PHP code to illustrate// IntlChar::iswhitespace() function//Input Capital Lettervar_dump(IntlChar::iswhitespace(\"R\"));echo \"<br>\";//Input Small Lettervar_dump(IntlChar::iswhitespace(\" r \"));echo \"<br>\";//Input Whitesapce Character  \"\\n \"var_dump(IntlChar::iswhitespace(\"\\n\"));echo \"<br>\";//Input encoded stringvar_dump(IntlChar::iswhitespace(\"\\u{00A0}\"));echo \"<br>\";//Input Whitesapce  Space Charactervar_dump(IntlChar::iswhitespace(\" \"));echo \"<br>\";?>Output:  bool(false)  NULL  bool(true)  bool(false)  bool(true)Program 2:<?php// PHP code to IntlChar::iswhitespace()// function// Declare an array $arr$arr = array(\"\\t\", \"\\n\", \"^\", \"\\r\", \"G\\t\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::iswhitespace($val));    echo \"<br>\";}?>Output:  bool(true)  bool(true)  bool(false)  bool(true)  NULLRelated Articles:References: http://php.net/manual/en/iswhitespace");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::charDigitValue() Function","The IntlChar::charDigitValue() function is an inbuilt function in PHP which is used to return the decimal digit value from a decimal digit character. Where the general category decimal digit numbers and “Nd” is Numeric_Type of Decimal.Syntax:int IntlChar::charDigitValue( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandotary. The input parameter is a character or integer value, which is encoded as a UTF-8 string.Return Value: If $codepoint is decimal digit value then returns True otherwise return -1.Below programs illustrate the IntlChar::charDigitValue() Function in PHP.Program 1:<?php// PHP code to illustrate IntlChar::charDigitValue// function//Input int codepoint valuevar_dump(IntlChar::charDigitValue(\"\\u{2025}\"));echo \"<br>\";//Input character codepoint valuevar_dump(IntlChar::charDigitValue(\"2345\"));echo \"<br>\";//Input int codepoint valuevar_dump(IntlChar::charDigitValue(\"\\u{0774}\"));echo \"<br>\";//Input int codepoint valuevar_dump(IntlChar::charDigitValue(\"2\"));echo \"<br>\";//Input character codepoint valuevar_dump(IntlChar::charDigitValue(\"Geeks\"));echo \"<br>\";//Input character codepoint valuevar_dump(IntlChar::charDigitValue(\"\\u{0E66}\"));echo \"<br>\";//Input Empty codepoint valuevar_dump(IntlChar::charDigitValue(\" \"));?>Output:  int(-1)   NULL  int(-1)   int(2)   NULL   int(-1)   int(-1)Program 2:<?php// PHP code to illustrate// IntlChar::charDigitValue() function// Declare an array $arr$arr = array(\"^\", \"2345\", \"6\", \"\\n\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::charDigitValue($val));    echo \"<br>\";}?>Output:  int(-1)  NULL  int(6)  int(-1)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isupper() Function","The IntlChar::isupper() function is an inbuilt function in PHP which is used to check whether the given input character is an uppercase character or not.Syntax:bool IntlChar::isupper( $codepoint )Paramters: This function accepts single parameter $codepoint which is mandotary. The input parameter is a character, which is encoded as a UTF-8 string.Return Value: If $codepoint is an uppercase character then it returns True, otherwise return False.Below programs illustrate the IntlChar::isupper() function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::isupper()// function// Input data is character typevar_dump(IntlChar::isupper(\"G\"));echo \"<br>\";// Input data is control charactervar_dump(IntlChar::isupper(\"\\t\"));echo \"<br>\";// Input data is string typevar_dump(IntlChar::isupper(\"Geeksforgeeks\"));echo \"<br>\";// Input data is number typevar_dump(IntlChar::isupper(\"2018\"));echo \"<br>\";// Input data is single digitvar_dump(IntlChar::isupper(\"5\"));echo \"<br>\";?>Output:  bool(true)   bool(false)   NULL   NULL   bool(false)Note: If String and Numbers (except single digit number) are used as a parameter then it returns NULL.Program 2:<?php// PHP code to illustrate isupper()// Declare an array $arr$arr = array(\"A\",\"\\u{0041}\",\"@\",\"0\",\"\\n\",\"123\",\"Geeks\");// \\u{0041} is ASCII value of \'A\'// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isupper($val));    echo \"<br>\";}?>Output:  bool(true)   bool(true)   bool(false)   bool(false)   bool(false)   NULL   NULLRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::islower() Function","The IntlChar::islower() function is an inbuilt function in PHP which is used to check whether the given input character is a lowercase character or not.Syntax:bool IntlChar::islower( $codepoint )Paramters: This function accepts single parameter $codepoint which is mandotary. The input parameter is a character, which is encoded as a UTF-8 string.Return Value: If $codepoint is a lowercase character then it returns True, otherwise return False.Below programs illustrate the IntlChar::islower() function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::islower()// function// Input data is character typevar_dump(IntlChar::islower(\"a\"));echo \"<br>\";var_dump(IntlChar::islower(\"A\"));echo \"<br>\";var_dump(IntlChar::islower(\"\\u{0041}\"));echo \"<br>\";// Input data is control charactervar_dump(IntlChar::islower(\"\\t\"));echo \"<br>\";// Input data is string typevar_dump(IntlChar::islower(\"Geeksforgeeks\"));echo \"<br>\";// Input data is number typevar_dump(IntlChar::islower(\"2018\"));echo \"<br>\";// Input data is single digitvar_dump(IntlChar::islower(\"5\"));echo \"<br>\";?>Output:  bool(true)   bool(false)   bool(false)   bool(false)   NULL   NULL   bool(false)Note: If String and Numbers (except single digit number) are used as a parameter then it returns NULL.Program 2:<?php// PHP code to illustrate IntlChar::islower()// Declare an array $arr$arr = array(\"a\", \"\\u{FF41}\", \"A\", \"\\u{0041}\", \"0\", \"\\n\", \"123\", \"Geeks\");// \\u{0041} is ASCII value of \'A\'// \\u{FF41} is ASCII value of \'a\'// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::islower($val));    echo \"<br>\";}?>Output:  bool(true)   bool(true)   bool(false)   bool(false)   bool(false)   bool(false)   NULL   NULLRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar::isblank() Function","The IntlChar::isblank() function is an inbuilt function in PHP which is used to determine the given input code data is blank or horizontal space character and the character visible separates words on a line.If the input contains U+0009 (TAB) and characters “Zs” (space separators) except Zero Width Space (ZWSP, U+200B) then it will be True.A Unicode White_Space character except “vertical space controls” character is true where vertical space controls contain following characters: U+000A (LF) U+000B (VT) U+000C (FF) U+000D (CR) U+0085 (NEL) U+2028 (LS) U+2029 (PS).Syntax:  bool IntlChar::isblank ( $codepoint )Parameter: This function accepts a single parameter as mentioned above and described below:$codepoint: The input parameter $codepoint is an integer values or character, which is encoded as a UTF-8 string. The function returns a boolean value after the compilation of function.Return Value: If $codepoint is a blank space or horizontal space character then returns TRUE, otherwise returns FALSE.Examples:  Input : $codepoint = \"G\"  Output :bool(false)  // Character becomes False    Input : $codepoint = \" \"  Output : bool(true)  // Space becomes TRUE    Input : $codepoint = \"Geeks\"  Output : NULL  // String  becomes NULLBelow programs illustrate the IntlChar::isblank() function in PHP:Program 1:<?php// PHP code to illustrate the// IntlChar::isblank() function.// input alphabe charactervar_dump(IntlChar::isblank(\"X\"));// Plus operatorvar_dump(IntlChar::isblank(\"+\"));// Space charactervar_dump(IntlChar::isblank(\" \"));// % sign operatorvar_dump(IntlChar::isblank(\"%\"));// tab charactervar_dump(IntlChar::isblank(\"\\t\"));// new line charactervar_dump(IntlChar::isblank(\"\\n\"));?>Output:  bool(false)  bool(false)  bool(true)  bool(false)  bool(true)  bool(false)Program 2:<?php// PHP code to illustrate the// IntlChar::isblank() function.// input alphabe charactervar_dump(IntlChar::isblank(\'X\'));// Plus operatorvar_dump(IntlChar::isblank(\'+\'));// Space charactervar_dump(IntlChar::isblank(\' \'));// % sign operatorvar_dump(IntlChar::isblank(\'%\'));// tab charactervar_dump(IntlChar::isblank(\'\\t\'));// new line charactervar_dump(IntlChar::isblank(\'\\n\'));?>Output:  bool(false)  bool(false)  bool(true)  bool(false)  NULL  NULLProgram 3: If function input is string or number, then it will print NULL.<?php// PHP code to illustrate the// IntlChar::isblank() function.// In case of input stringvar_dump(IntlChar::isblank(\"GeeksforGeeks is Computer Portal\"));// In case of number inputvar_dump(IntlChar::isblank(\"2018\"));?>Output:  NULL  NULL");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar isMirrored() Function","The IntlChar::isMirrored() function is an inbuilt function in PHP which is used to check the code point contains Bidi_Mirrored property or not. This property is used to set the characters that are commonly used in Right-To-Left contexts and need to be displayed with a mirrored graph.Syntax:bool IntlChar::isMirrored ( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The input parameter is an integer value or character, which is encoded as UTF-8 string.Return Value: This function returns True if the $codepoint has the Bidi_Mirrored property, False otherwise.Below programs illustrate the IntlChar::isMirrored() function in PHP:Program 1:<?php// PHP program to illustrate// IntlChar::isMirrored function// Input data is character typevar_dump(IntlChar::isMirrored(\"A\"));// Input character symbolvar_dump(IntlChar::isMirrored(\"<\"));// Input character symbolvar_dump(IntlChar::isMirrored(\"(\"));// Input character symbolvar_dump(IntlChar::isMirrored(\"^\"));?>Output:  bool(false)  bool(true)  bool(true)  bool(false)Program 2:<?php// PHP code to illustrate IntlChar::isMirrored()// function.// Declare an array $arr$arr = array(\"Z\", \"291\", \"^\", \"A\", \"<\", \")\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isMirrored($val));}?>Output:  bool(false)  NULL  bool(false)  bool(false)  bool(true)  bool(true)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar isgraph() Function","The IntlChar::isgraph() function is an inbuilt function in PHP which is used to check the code point is a graphic character or not. It returns True for all characters except those with general categories Cc(control codes), Cf(format controls), Cs(surrogates), Cn(unassigned), and Z(separators).Syntax:bool IntlChar::isgraph ( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The $codepoint value is an integer values or character, which is encoded as a UTF-8 string.Return Value: This function returns True if $codepoint is a graphic character, False otherwise.Below programs illustrate the IntlChar::isgraph() function in PHP:Program 1:<?php// PHP code to illustrate the// IntlChar::isgraph() function.// Alphabet casesvar_dump(IntlChar::isgraph(\"c\"));// Single digitvar_dump(IntlChar::isgraph(\"4\"));// UTF encoded stringvar_dump(IntlChar::isgraph(\"\\u{2403}\"));// new line charactervar_dump(IntlChar::isgraph(\"\\n\"));// vertical tab charactervar_dump(IntlChar::isgraph(\"\\t\"));?>Output:  bool(true)  bool(true)  bool(true)  bool(false)  bool(false)Program 2:<?php// PHP code to illustrate isgraph()// Declare an array $arr$arr = array(\"Z\", \"291\", \"^\", \"  \", \"*\", \"Sudo Placement\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isgraph($val));}?>Output:  bool(true)  NULL  bool(true)  NULL  bool(true)  NULLRelated Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar toupper() Function","The IntlChar::toupper() function is an inbuilt function in PHP which is used to convert the character into Unicode character uppercase. The given character is change with its uppercase equivalent character. If the character has no uppercase equivalent then it returns same character.Syntax:IntlChar::toupper ( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The value of integer $codepoint is (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. “\\u{2603}”).Return Value: This function returns the upper case mapped character of given character. If the given character has no upper case mapped character then it returns the character itself. The return type will be integer unless the code point was passed as a UTF-8 string, in which case a string will be returned.Below programs illustrate the IntlChar::toupper() function in PHP:Program 1:<?php// PHP program to illustrate// IntlChar::toupper function// Input data is uppercase character symbolvar_dump(IntlChar::toupper(\"A\"));// Input data is lowercase character symbolvar_dump(IntlChar::toupper(\"a\"));// Input data is number symbolvar_dump(IntlChar::toupper(\"1\"));// Input data is string symbolvar_dump(IntlChar::toupper(ord(\"xyz\")));// Input data is uppercase character symbolvar_dump(IntlChar::toupper(ord(\"I\")));?>Output:  string(1) \"A\"  string(1) \"A\"  string(1) \"1\"  int(88)  int(73)Program 2:<?php// PHP code to illustrate IntlChar::toupper()// Declare an array $arr$arr = array(ord(\"A\"), \"291\", \"^\", \"A\", \"a\", \"1\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::toupper($val));}?>Output:  int(65)  NULL  string(1) \"^\"  string(1) \"A\"  string(1) \"A\"  string(1) \"1\"Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar tolower() Function","The IntlChar::tolower() function is an inbuilt function in PHP which is used to convert the character into Unicode lowercase character. The given input character is mapped to its lowercase character equivalent. If the character has no lowercase equivalent then it returns character itself.Syntax:IntlChar::tolower ( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The input parameter is a character, which is encoded as a UTF-8 string.Return Value: This function returns the lowercase mapping character of given character. If the character have no no lowercase mapped character then it returns itself. The return type will be integer unless the code point was passed as a UTF-8 string, in which case a string will be returned.Below programs illustrate the IntlChar::tolower() function in PHP:Program 1:<?php// PHP program to illustrate// IntlChar::tolower function// Input data is uppercase character symbolvar_dump(IntlChar::tolower(\"A\"));// Input data is lowercase character symbolvar_dump(IntlChar::tolower(\"a\"));// Input data is number symbolvar_dump(IntlChar::tolower(\"1\"));// Input data is string symbolvar_dump(IntlChar::tolower(ord(\"XYZ\")));// Input data is uppercase character symbolvar_dump(IntlChar::tolower(ord(\"I\")));?>Output:  string(1) \"a\"  string(1) \"a\"  string(1) \"1\"  int(120)  int(105)Program 2:<?php// PHP code to illustrate IntlChar::tolower()// Declare an array $arr$arr = array(ord(\"A\"), \"291\", \"^\", \"A\", \"a\", \"1\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::tolower($val));}?>Output:  int(97)  NULL  string(1) \"^\"  string(1) \"a\"  string(1) \"a\"  string(1) \"1\"Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar charDirection() Function","The IntlChar::charDirection() function is an inbuilt function in PHP which is used to get the bidirectional category value for a code point. It returns the bidirectional category value for code point, which is used in the Unicode bidirectional algorithm.Syntax:int IntlChar::charDirection ( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The $codepoint value is an integer values or character, which is encoded as a UTF-8 string.Return Value: This function returns the bidirectional category value which are listed below:IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHTIntlChar::CHAR_DIRECTION_RIGHT_TO_LEFTIntlChar::CHAR_DIRECTION_EUROPEAN_NUMBERIntlChar::CHAR_DIRECTION_EUROPEAN_NUMBER_SEPARATORIntlChar::CHAR_DIRECTION_EUROPEAN_NUMBER_TERMINATORIntlChar::CHAR_DIRECTION_ARABIC_NUMBERIntlChar::CHAR_DIRECTION_COMMON_NUMBER_SEPARATORIntlChar::CHAR_DIRECTION_BLOCK_SEPARATORIntlChar::CHAR_DIRECTION_SEGMENT_SEPARATORIntlChar::CHAR_DIRECTION_WHITE_SPACE_NEUTRALIntlChar::CHAR_DIRECTION_OTHER_NEUTRALIntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT_EMBEDDINGIntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT_OVERRIDEIntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_ARABICIntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_EMBEDDINGIntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_OVERRIDEIntlChar::CHAR_DIRECTION_POP_DIRECTIONAL_FORMATIntlChar::CHAR_DIRECTION_DIR_NON_SPACING_MARKIntlChar::CHAR_DIRECTION_BOUNDARY_NEUTRALIntlChar::CHAR_DIRECTION_FIRST_STRONG_ISOLATEIntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT_ISOLATEIntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_ISOLATEIntlChar::CHAR_DIRECTION_POP_DIRECTIONAL_ISOLATEIntlChar::CHAR_DIRECTION_CHAR_DIRECTION_COUNTBelow programs illustrate the IntlChar::charDirection() function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::charDirection()// function// Input data is character typevar_dump(IntlChar::charDirection(\"A\") === IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT);// Input data is unicode charactervar_dump(IntlChar::charDirection(\"\\u{05E9}\") === IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT);// Input data is character typevar_dump(IntlChar::charDirection(\"+\") === IntlChar::CHAR_DIRECTION_EUROPEAN_NUMBER_SEPARATOR);// Input data is character typevar_dump(IntlChar::charDirection(\".\") === IntlChar::CHAR_DIRECTION_COMMON_NUMBER_SEPARATOR);// Input data is string typevar_dump(IntlChar::charDirection(\"ABC\") === IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT);// Input data is character typevar_dump(IntlChar::charDirection(\"c\") === IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT);// Input data is character typevar_dump(IntlChar::charDirection(\"O\") === IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT);?>Output:  bool(true)  bool(true)  bool(true)  bool(true)  bool(false)  bool(false)  bool(true)Program 2:<?php// PHP code to illustrate IntlChar::charDirection()// function// Input data is character typevar_dump(IntlChar::charDirection(\"A\"));// Input data is unicode charactervar_dump(IntlChar::charDirection(\"\\u{05E9}\"));// Input data is character typevar_dump(IntlChar::charDirection(\"+\"));// Input data is character typevar_dump(IntlChar::charDirection(\".\"));// Input data is string typevar_dump(IntlChar::charDirection(\"ABC\"));// Input data is character typevar_dump(IntlChar::charDirection(\"c\"));// Input data is character typevar_dump(IntlChar::charDirection(\"O\"));?>Output:  int(0)  int(1)  int(3)  int(6)  NULL  int(0)  int(0)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar charType() Function","The IntlChar::charType() function is an inbuilt function in PHP which is used to get the general category value for a code point. This function returns the general category value for code point.Syntax:int IntlChar::charType ( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The $codepoint value is an integer values or character, which is encoded as a UTF-8 string.Return Value: This function returns the general category content which are listed below:IntlChar::CHAR_CATEGORY_UNASSIGNEDIntlChar::CHAR_CATEGORY_GENERAL_OTHER_TYPESIntlChar::CHAR_CATEGORY_UPPERCASE_LETTERIntlChar::CHAR_CATEGORY_LOWERCASE_LETTERIntlChar::CHAR_CATEGORY_TITLECASE_LETTERIntlChar::CHAR_CATEGORY_MODIFIER_LETTERIntlChar::CHAR_CATEGORY_OTHER_LETTERIntlChar::CHAR_CATEGORY_NON_SPACING_MARKIntlChar::CHAR_CATEGORY_ENCLOSING_MARKIntlChar::CHAR_CATEGORY_COMBINING_SPACING_MARKIntlChar::CHAR_CATEGORY_DECIMAL_DIGIT_NUMBERIntlChar::CHAR_CATEGORY_LETTER_NUMBERIntlChar::CHAR_CATEGORY_OTHER_NUMBERIntlChar::CHAR_CATEGORY_SPACE_SEPARATORIntlChar::CHAR_CATEGORY_LINE_SEPARATORIntlChar::CHAR_CATEGORY_PARAGRAPH_SEPARATORIntlChar::CHAR_CATEGORY_CONTROL_CHARIntlChar::CHAR_CATEGORY_FORMAT_CHARIntlChar::CHAR_CATEGORY_PRIVATE_USE_CHARIntlChar::CHAR_CATEGORY_SURROGATEIntlChar::CHAR_CATEGORY_DASH_PUNCTUATIONIntlChar::CHAR_CATEGORY_START_PUNCTUATIONIntlChar::CHAR_CATEGORY_END_PUNCTUATIONIntlChar::CHAR_CATEGORY_CONNECTOR_PUNCTUATIONIntlChar::CHAR_CATEGORY_OTHER_PUNCTUATIONIntlChar::CHAR_CATEGORY_MATH_SYMBOLIntlChar::CHAR_CATEGORY_CURRENCY_SYMBOLIntlChar::CHAR_CATEGORY_MODIFIER_SYMBOLIntlChar::CHAR_CATEGORY_OTHER_SYMBOLIntlChar::CHAR_CATEGORY_INITIAL_PUNCTUATIONIntlChar::CHAR_CATEGORY_FINAL_PUNCTUATIONIntlChar::CHAR_CATEGORY_CHAR_CATEGORY_COUNTBelow programs illustrate the IntlChar::charType() function in PHP:Program 1:<?php// PHP code to illustrate IntlChar::charType()// function// Input data is character typevar_dump(IntlChar::charType(\"A\") === IntlChar::CHAR_CATEGORY_UPPERCASE_LETTER);// Input data is character typevar_dump(IntlChar::charType(\".\") === IntlChar::CHAR_CATEGORY_OTHER_PUNCTUATION);// Input data is character typevar_dump(IntlChar::charType(\"\\t\") === IntlChar::CHAR_CATEGORY_CONTROL_CHAR);// Input data is unicode charactervar_dump(IntlChar::charType(\"\\u{2603}\") === IntlChar::CHAR_CATEGORY_OTHER_SYMBOL);// Input data is string typevar_dump(IntlChar::charType(\"ABC\") === IntlChar::CHAR_CATEGORY_OTHER_PUNCTUATION);// Input data is character typevar_dump(IntlChar::charType(\"\\n\") === IntlChar::CHAR_CATEGORY_CONTROL_CHAR);?>Output:  bool(true)  bool(true)  bool(true)  bool(true)  bool(false)  bool(true)Program 2:<?php// PHP code to illustrate IntlChar::charType()// function// Input data is character typevar_dump(IntlChar::charType(\"A\"));// Input data is character typevar_dump(IntlChar::charType(\".\"));// Input data is character typevar_dump(IntlChar::charType(\"\\t\"));// Input data is unicode charactervar_dump(IntlChar::charType(\"\\u{2603}\"));// Input data is string typevar_dump(IntlChar::charType(\"ABC\"));// Input data is character typevar_dump(IntlChar::charType(\"\\n\"));?>Output:  int(1)  int(23)  int(15)  int(27)  NULL  int(15)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | IntlChar isdefined() Function","The IntlChar::isdefined() function is an inbuilt function in PHP which is used to check whether the code point is defined or not. The character is said to be determined if it is assigned a character. It is True for general categories other than Cn (other, not assigned).Syntax:bool IntlChar::isdefined ( $codepoint )Parameters: This function accepts single parameter $codepoint which is mandatory. The $codepoint value is an integer values or character, which is encoded as a UTF-8 string.Return Value: This function returns True if $codepoint is a defined character, False otherwise.Below programs illustrate the IntlChar::isdefined() function in PHP:Program 1:<?php// PHP function to illustrate// the use of IntlChar::isdefined()// Input data is character typevar_dump(IntlChar::isdefined(\"A\"));// Input data is character typevar_dump(IntlChar::isdefined(\" \"));// Input data is unicode charactervar_dump(IntlChar::isdefined(\"\\u{FDD0}\"));// Input data is string typevar_dump(IntlChar::isdefined(\"XYZ\"));// Input data is character typevar_dump(IntlChar::isdefined(\"5\"));?>Output:  bool(true)  bool(true)  bool(false)  NULL  bool(true)Program 2:<?php// PHP code to illustrate isdefined()// Declare an array $arr$arr = array(\"G\", \"GeeksforGeeks\", \"^\", \"1001\", \"6\", \"\\n\",                                             \"\\n\\n\", \"\\t\");// Loop run for every array elementforeach ($arr as $val){    // Check each element as code point data    var_dump(IntlChar::isdefined($val));}?>Output:  bool(true)  NULL  bool(true)  NULL  bool(true)  bool(true)  NULL  bool(true)Related Articles:");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_mod() Function","The gmp_mod() is an inbuilt function in PHP which is used to find the mudulo of a GMP number(GNU Multiple Precision: For large numbers) with another GMP number $d where the sign of $d is neglected.Syntax:gmp_mod ( $num, $d )Parameters: The function accepts two GMP numbers $num and $d as mandatory parameters as shown in the above syntax. These parameters can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass multiple numeric strings provided that it is possible to convert that string to a number.Return Value: The function returns a GMP number which is equivalent to ($num % $d).Examples:  Input : $num=\"8\" $d=\"3\"   Output :  2    Input : $num=\"10\" $d=\"4\"  Output :  2Below programs illustrate the gmp_mod() function:Program 1: The program below demonstrates the working of gmp_mod() function when numeric string are passed as arguments.<?php// PHP program to demonstrate the gmp_mod() function// arguments as numeric strings$mod = gmp_mod(\"8\", \"3\");// prints the calculated modulousecho gmp_strval($mod) . \"\\n\";?>Output:2Program 2: The program below demonstrates the working of gmp_mod() when GMP number are passed as arguments.<?php// PHP program to demonstrate the gmp_mod function// arguments as GMP numbers$num = gmp_init(\"1010\", 2); // num = 10$d = gmp_init(\"100\", 2);  // d = 4$mod = gmp_mod($num, $d);// prints the calculated modulous// gmp_strval converts GMP number to string// representation in given base(default 10).echo gmp_strval($mod) . \"\\n\";?>Output:2");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_prob_prime() Function","The gmp_prob_prime() is a built-in function in PHP which is used to check how much is the possibility of given GMP number(GNU Multiple Precision : For large numbers) to be prime or not.This function uses Miller-Rabin primality test to check if the given GMP number is prime or not.Syntax:gmp_prob_prime($num)Parameters: The function accepts a GMP number $num as mandatory parameter as shown in the above syntax. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass numeric string such that it is possible to convert this string in number.Return Value: This function returns value in the range 0-2, 0 if the number is definitely not prime, 1 if the number may be prime else 2 if the number is surely prime.Examples:  Input : gmp_prob_prime(\"8\")  Output : 0    Input : gmp_prob_prime(\"11111111111111\")  Output : 1    Input: gmp_prob_prime(\"127\")  Output:  2Below programs illustrate the gmp_prob_prime() function in PHP:Program 1: Program to find the prime probability of GMP number when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to find the prime probability of// GMP numbers passed as arguments// strings as GMP numbers$num = \"17\";// calculate the possibility// of GMP number to be prime$prob = gmp_prob_prime($num);echo $prob;?>Output:  2Program 2: Program to find the prime probability of GMP number when GMP numbers are passed as arguments.<?php// PHP program to find the prime probability of// GMP numbers passed as arguments// creating GMP numbers using gmp_init()$num = gmp_init(8);// calculate the possibility of// GMP number to be prime$prob = gmp_prob_prime($num);echo $prob;?>Output:  0Program 3: Program to find the prime probability of GMP number when GMP numbers are passed as arguments.<?php// PHP program to find the prime probability of// GMP numbers passed as arguments// creating GMP numbers using gmp_init()$num = gmp_init(1111111111111111111);// calculate the possibility of// GMP number to be prime$prob = gmp_prob_prime($num);echo $prob;?>Output:  1Reference:php.net/manual/en/function.gmp-prob-prime.php");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_divexact() Function","The gmp_divexact() is a built-in function in PHP which is used to check whether a GMP number(GNU Multiple Precision : For large numbers) is exactly divisible by another GMP number or not. If it so happens then function returns the exact result else any other irrelevant GMP number.Syntax:gmp_divexact($num, $divisor)Parameters: This function accepts two GMP numbers, $num1, $num2 as mandatory parameters as shown in the above syntax. These parameters can be GMP objects in PHP version 5.6 and later, or we are also allowed to pass numeric strings such that it is possible to convert those strings to numbers.Return Value: This function uses fast division algorithm and checks if the division is possible or not and thus returns the result of division as a GMP number.Examples:  Input : gmp_divexact(\"15\", \"5\")  Output : 3    Input : gmp_divexact(\"13\", \"3\")  Output : 12297829382473034415Below programs illustrate the gmp_divexact() function in PHP:Program 1: Program to perform “exact division” algorithm on GMP numbers when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to perform \"exact division\" of// GMP numbers passed as arguments// strings as GMP numbers$num = \"12\";$divisor = \"3\";// calculate the correct result// if division possible$res = gmp_divexact($num, $divisor);echo $res;?>Output:  4Program 2: Program to perform “exact division” algorithm on GMP numbers when GMP numbers are passed as arguments.<?php// PHP program to perform \"exact division\" of// GMP numbers passed as arguments// creating GMP numbers using gmp_init()$num = gmp_init(15);$divisor = gmp_init(5);// calculate the correct result// if division is possible$res = gmp_divexact($num, $divisor);echo $res;?>Output:  3Program 3: Program to perform “exact division” algorithm on GMP numbers when GMP numbers are passed as arguments.<?php// PHP program to perform \"exact division\" of// GMP numbers passed as arguments// creating GMP numbers using gmp_init()$num = gmp_init(15);$divisor = gmp_init(7);// calculate the correct result// if division is possible$res = gmp_divexact($num, $divisor);echo $res;?>Output:  7905747460161236409");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_intval() Function","The gmp_intval() is an inbuilt function in PHP which converts a GMP number to an integer. Here GMP refers to GNU Multiple Precision which is for large numbers.Syntax:int gmp_intval ( $num )Parameters: The function accepts a single parameter $num which is a GMP number and returns its integer value. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: The function returns integer value of the given GMP number $numExamples:  Input : $num = \"2147483647\"  Output :  2147483647    Input : $num = \"12\"  Output :  12Note: If a numeric string is passed as an integer, it returns the same integer (except above PHP integer limit). But if a GMP number is passed, it returns the integer value of a GMP number.Below programs illustrate the use of gmp_intval() function:Program 1: The program below demonstrates the working of gmp_intval() function when numeric string is passed as an argument.<?php// PHP program to demonstrate the gmp_intval()// function when argument is passed$x = gmp_intval(\"2147\") . \"\\n\";// prints integer value of a gmp number// it returns the same numeric string in integer formecho gmp_strval($x) . \"\\n\";?>Output:2147Program 2: The program below demonstrates the working of gmp_intval() when GMP number is passed as an argument.<?php// PHP program to demonstrate the gmp_intval() function// when GMP number is passed as an argument// arguments as GMP numbers$num = gmp_init(\"1111\", 2); // num initialisation = 12// integer vaulue of GMP number 12 is 12$x = gmp_intval($num);// prints the integer value of a gmp number// gmp_strval converts GMP number to string// representation in given base(default 10).echo gmp_strval($x) . \"\\n\";?>Output:7");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_and() Function","The gmp_and() is an inbuilt function in PHP which is used to calculate the bitwise AND of two GMP numbers(GNU Multiple Precision : For large numbers).Syntax:gmp_and($num1, $num2)Parameters: This function accepts two GMP numbers, $num1, $num2 as mandatory parameters as shown in the above syntax. These parameters can be GMP objects in PHP version 5.6 and later, or we are also allowed to pass numeric strings such that it is possible to convert those strings to numbers.Return Value: This function returns a GMP number which is bitwise AND of GMP numbers passed to it as parameters.Examples:  Input : gmp_and(\"4\", \"2\")  Output : 0    Input : gmp_and(\"9\", \"10\")  Output : 8Below programs illustrate the gmp_and() function in PHP:Program 1: Program to calculate the bitwise AND of GMP numbers when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to calculate the bitwise AND// GMP numbers passed as arguments// strings as GMP numbers$num1 = \"10\";$num2 = \"9\";// calculate the bitwise AND of $num1 and $num2$res = gmp_and($num1, $num2);echo $res;?>Output:  8Program 2: Program to calculate the bitwise AND of GMP numbers when GMP numbers are passed as arguments.<?php// PHP program to calculate the bitwise AND// GMP numbers passed as arguments// creating GMP numbers using gmp_init()$num1 = gmp_init(4);$num2 = gmp_init(2);//calculate the bitwise AND of $num1 and $num2$res = gmp_and($num1, $num2);echo $res;?>Output:  0");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_scan1() Function","The gmp_scan1() is an inbuilt function which is used to scan “1” in the GMP number(GNU Multiple Precision : For large numbers) starting from given index which move towards most significant bits in the number.Syntax:gmp_scan1($num, $index)Parameters: This function accepts two parameters as explained below:$num: This parameter is a GMP number and is mandatory to be passed. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.$index: This parameter represents the index or position in the bitwise representation of the number $num from where we want to start the search.Return Value: The function returns the position where we find “1” in the number.Examples:  Input : gmp_scan1(\"101111101\", 6)  Output : 8    Input : gmp_scan1(\"111001111\", 2)  Output : 3Below programs illustrate the gmp_scan1() function in PHP:Program 1: Program to find the position of “1” bit in GMP number when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to find position of \"1\" bit in GMP// number passed as arguments// strings as GMP numbers$num = \"10110001\";$pos = 2;echo gmp_scan1($num, $pos) . \"\\n\";?>Output:  4Program 2: Program to find the position of “1” bit in GMP number when GMP numbers are passed as arguments.<?php// PHP program to find position of \"1\" bit in GMP// number//creating GMP numbers using gmp_init()$num = gmp_init(10001111101);$pos = 2;echo gmp_scan1($num, $pos) . \"\\n\";?>Output:  3");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_div_q() Function","The gmp_div_q() is an inbuilt function in PHP which is used to perform division of GMP numbers(GNU Multiple Precision : For large numbers).Syntax:gmp_div_q($num1, $num2)Parameters: This function accepts GMP numbers, $num1 and $num2 as mandatory parameters as shown in the above syntax. These parameters can be GMP objects in PHP version 5.6 and later, or we are also allowed to pass numeric strings such that it is possible to convert those strings to numbers.Return Value: This function returns a GMP number which is the quotient when $num1 is divided by $num2. The function returns positive, negative or zero depending upon the values of $num1 and $num2.Examples:  Input : gmp_div_q(\"256\", \"16\")  Output : 16    Input : gmp_div_q(\"188\", \"4\")  Output : 47Below programs illustrate the gmp_div_q() function in PHP:Program 1: Program to perform the division of GMP numbers when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to perform division of// GMP numbers passed as arguments// strings as GMP numbers$num1 = \"-6\";$num2 = \"2\";// caluates the quotient when// $num1 is divided by $num2$quo = gmp_div_q($num1, $num2);echo $quo;?>Output:  -3Program 2: Program to perform the division of GMP numbers when GMP numbers are passed as arguments.<?php// PHP program to perform the division of// GMP numbers// creating GMP numbers using gmp_init()$num1 = gmp_init(289);$num2 = gmp_init(17);// caluates the quotient when// $num1 is divided by $num2$quo = gmp_div_q($num1, $num2);echo $quo;?>Output:  17Program 3: Program to perform the division of GMP numbers when GMP numbers are passed as arguments.<?php// PHP program to perform the division of// GMP numbers// creating GMP numbers using gmp_init()$num1 = gmp_init(3);$num2 = gmp_init(4);// caluates the quotient when// $num1 is divided by $num2$quo = gmp_div_q($num1, $num2);echo $quo;?>Output:  0");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_scan0() Function","The gmp_scan0() is an inbuilt function which is used to scan “0” in a GMP number(GNU Multiple Precision : For large numbers) starting from given index which move towards most significant bits in the number.Syntax:gmp_scan0($num, $index)Parameters: This function accepts two parameters as explained below:$num: This parameter is a GMP number and is mandatory to be passed. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.$index: This parameter represents the index or position in the bitwise representation of the number $num from where we want to start the search.Return Value: The function returns the position where we find “0” in the number.Examples:  Input : gmp_scan0(\"101111101\", 6)  Output : 7    Input : gmp_scan0(\"111001111\", 2)  Output : 4Below programs illustrate the gmp_scan0() function in PHP:Program 1: Program to find the position of “0” bit in GMP number when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to find position of \"0\" bit in GMP// number passed as arguments// strings as GMP numbers$num = \"10110001\";$pos = 2;echo gmp_scan0($num, $pos) . \"\\n\";?>Output:  6Program 2: Program to find the position of “0” bit in GMP number when GMP numbers are passed as arguments.<?php// PHP program to find position of \"0\" bit in GMP// number//creating GMP numbers using gmp_init()$num = gmp_init(10001111101);$pos = 2;echo gmp_scan0($num, $pos) . \"\\n\";?>Output:  7");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_sub() Function","The gmp_sub() is an in-built function in PHP which returns the subtraction of the two GMP numbers.(GNU Multiple Precision: For large numbers)Syntax:gmp_sub($num1, $num2)Parameters: This function accepts two GMP numbers $num1 and $num2 as mandatory parameters shown in the above syntax. These parameters can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: The function returns the subtraction of two numbers $num1 and $num2.Examples:  Input : $num1=5 , $num2=10  Output : -5     Input : $num1=7 , $num2=1  Output : 6Below programs illustrate the gmp_sub() function:Program 1: The program below demonstrates the working of gmp_sub() function when GMP number are passed as arguments.<?php// PHP program to subtract two// two numbers// GMP number as arguments$num1 = gmp_init(\"101\", 2);$num2 = gmp_init(\"1010\", 2);// 5-10 = -5$sub = gmp_sub($num1, $num2);// gmp_strval converts GMP number to string// representation in given base(default 10).echo gmp_strval($sub, 2);?>Output:-101Program 2: The program below demonstrates the working of gmp_sub() when numeric string are passed as arguments.<?php// PHP program to subtract two// two numbers// numeric strings number as arguments$num1 = \"7\";$num2 = \"1\";// 7-1 = 6$sub = gmp_sub($num1, $num2);echo $sub;?>Output:6");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_perfect_square() Function","The gmp_perfect_square() is an inbuilt function in PHP which checks if the given GMP number(GNU Multiple Precision: For large numbers) is a perfect square or not.Syntax:gmp_perfect_square($num)Parameters: The function accepts one GMP number $num. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: The function returns true if the given number $num is a perfect square, otherwise it returns false.Examples:  Input : $num=25   Output :  true    Input : $num=10  Output :  falseBelow programs illustrate the use of gmp_perfect_square() function:Program 1: The program below demonstrates the working of gmp_perfect_square() function when GMP number is passed as an argument.<?php// PHP program to check the if the// number is perfect square or not// numeric string arguments$num = gmp_init(\"1001\", 2);// checks if 9 (1001) is a perfect number or notvar_dump(gmp_perfect_square($num)).\"\\n\";$num = gmp_init(\"11001\", 2);// checks if 25 (11001) is a perfect number or notvar_dump(gmp_perfect_square($num)).\"\\n\";$num = gmp_init(\"1100\", 2);// checks if 12 (1100) is a perfect number or notvar_dump(gmp_perfect_square($num));?>Output:bool(true)   bool(true)  bool(false)Program 2: The program below demonstrates the working of gmp_perfect_square() when numeric string is passed as an argument.<?php// PHP program to check the if the// number is perfect square or not// numeric string arguments$num = \"9\";// checks if 9 (1001) is a perfect number or notvar_dump(gmp_perfect_square($num)).\"\\n\";$num = \"25\";// checks if 25 (11001) is a perfect number or notvar_dump(gmp_perfect_square($num)).\"\\n\";$num = \"12\";// checks if 12 (1100) is a perfect number or notvar_dump(gmp_perfect_square($num));?>Output:bool(true)   bool(true)  bool(false)");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_com() Function","The gmp_com() is an inbuilt function in PHP which is used to calculate the one’s complement of a GMP number(GNU Multiple Precision : For large numbers).Syntax:gmp_com($num)Parameters: This function accepts a GMP number $num as a mandatory parameter as shown in the above syntax. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: This function returns a GMP number which is the one’s complement of a GMP number passed to it as parameter.Examples:  Input : gmp_com(\"1235\")  Output : -1236    Input : gmp_com(\"1234\")  Output : -1235Below programs illustrate the gmp_com() function in PHP :Program 1: Program to calculate the one’s complement of a GMP number when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to calculate the one\'s complement// of a GMP number passed as arguments// strings as GMP numbers$num = \"1345\";// calculate the one\'s complement of a GMP number$res = gmp_com($num);echo $res;?>Output:  -1346Program 2: Program to calculate the one’s complement of a GMP number when GMP number is passed as argument.<?php// PHP program to calculate the one\'s complement// of a GMP number passed as arguments// creating GMP numbers using gmp_init()$num = gmp_init(132);// calculate the one\'s complement of a GMP number$res = gmp_com($num);echo $res;?>Output:  -133");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_cmp() Function","The gmp_cmp() is an inbuilt function in PHP which is used to compare two GMP numbers(GNU Multiple Precision : For large numbers).Syntax:gmp_cmp($num1, $num2)Parameters: This function accepts two GMP numbers $num1 and $num2 as mandatory parameters as shown in the above syntax for comparing. These parameters can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass numeric strings such that it is possible to convert those strings in numbers.Return Value: The function returns “1” if $num1 > $num2, “0” if $num1 equal to $num2, “-1” if $num1 < $num2.Examples:  Input : gmp_cmp(\"1234\", \"1236\")  Output : -1    Input : gmp_cmp(\"3569\", \"3569\")  Output : 0Below programs illustrate the gmp_cmp() function in PHP:Program 1: Program to compare the two GMP numbers when they are passed as numeric strings.<?php// PHP program to compare two// GMP numbers passed as arguments// strings as GMP numbers$num1 = \"12356\";$num2 = \"12356\";// compares the two numbers and// gives the result \"0\" as both are equal$res = gmp_cmp($num1, $num2);echo $res;?>Output:  0Program 2: Program to compare two GMP numbers when they are passed as GMP numbers as arguments.<?php// PHP program to compare two// GMP numbers passed as arguments// creating GMP numbers using gmp_init()$num1 = gmp_init(12355);$num2 = gmp_init(12356);// compares these two numbers and// gives the result \"-1\" as $num1 < $num2$res = gmp_cmp($num1, $num2);echo $res;?>Output:  -1");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_pow() Function","The gmp_pow() is an inbuilt function in PHP which is used to calculate the power raised to a number of a GMP number and an integer (GNU Multiple Precision: For large numbers).Syntax:gmp_pow( $base, $exp )Parameters: The function accepts two mandatory parameters $base and $exp.$base – It is the base number. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.$exp – It is the power which is raised to the baseReturn Value: This function returns a positive GMP number which is equivalent to $base$expExamples:  Input : $base = \"2\" $exp = 2  Output : 4    Input : $base = \"0\" $exp = 0  Output : 1Below programs illustrate the gmp_pow() function:Program 1: The program below demonstrates the working of gmp_pow() function when GMP number is passed as an argument.<?php// PHP program to calculate power raised// to a number// GMP number as argument$base = gmp_init(\"100\", 2);$exp = 2;// function calculates the pow raised to// number$pow = gmp_pow($base, $exp);  // 4^2// gmp_strval Convert GMP number to string// representation in given base(default 10).echo gmp_strval($pow, 2) . \"\\n\";?>Output:10000Program 2: The program below demonstrates the working of gmp_pow() when numeric string is passed as an argument.<?php// PHP program to calculate power raised// to a number// numeric string as argument$base = \"4\";$exp = 2;// function calculates the pow raised to// number  4^2$pow = gmp_pow($base, $exp);echo $pow;?>Output:10000");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_popcount() Function","The gmp_popcount() is a built-in function in PHP which is used to find the population count of a GMP number (GNU Multiple Precision : For large numbers). We can also say that this function is used to find the number of set bits in the binary representation of a GMP number.Syntax:gmp_popcount ( $num )Parameters: This function accepts a GMP number $num as a mandatory parameter as shown in the above syntax. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: This function returns an integer which is the population count or the number of set bits in binary representation of a GMP number passed to it as parameter.Examples:  Input : \"9\"  Output : 2    Input : \"25\"  Output : 3Below programs illustrate the gmp_popcount() function in PHP :Program 1: Program to calculate the population count of a number when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to calculate population count// of a GMP number passed as arguments// strings as GMP numbers$num1 = \"9\";$num2 = \"25\";// calculates the population count of a number$pcount = gmp_popcount($num1);echo $pcount.\"\\n\";// calculates the population count of a number$pcount = gmp_popcount($num2);echo $pcount.\"\\n\";?>Output:  2  3Program 2: Program to calculate the population count of a number when GMP numbers are passed as arguments.<?php// PHP program to calculate population count// of a GMP number passed as arguments// creating GMP numbers using gmp_init()$num1 = gmp_init(9, 10);$num2 = gmp_init(25, 10);// calculates the population count of a number$pcount = gmp_popcount($num1);echo $pcount.\"\\n\";// calculates the population count of a number$pcount = gmp_popcount($num2);echo $pcount.\"\\n\";?>Output:  2  3Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_invert() for inverse modulo","The gmp_invert() is a built-in function in PHP which is used to find the modular inverse of a GMP number (GNU Multiple Precision : For large numbers) under another GMP number.The modular inverse is a number x such that:  a x ≡ 1 (mod b)The value of x should be in {0, 1, 2, … b-1}, i.e., in the ring of integer modulo b.Syntax:gmp_invert ( $a, $b )Parameters: This function accepts two GMP numbers $a and $b as shown in the above syntax. This function finds the inverse of $a under modulo $b. These parameters can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: This function returns a GMP number which is the calculated inverse modulo of the two numbers passed to it as arguments. If it is not possible to find the inverse modulo for the given two numbers then this function returns FALSE.Examples:  Input:  $a = 3, $b = 11  Output: 4  Since (4*3) mod 11 = 1, 4 is modulo inverse of 3  One might think, 15 also as a valid output as \"(15*3) mod 11\"   is also 1, but 15 is not in ring {0, 1, 2, ... 10}, so not   valid.    Input:  $a = 10, $b = 17  Output: 12  Since (10*12) mod 17 = 1, 12 is modulo inverse of 3Below programs illustrate the gmp_invert() function in PHP :Program 1: Program to calculate the inverse modulo when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to calculate inverse modulo// strings as GMP numbers$a = \"3\";$b = \"11\";// calculates the inverse modulo of a number$invMod = gmp_invert($a, $b);echo $invMod.\"\\n\";// calculates the inverse modulo of a number$a = \"10\"; $b = \"17\";$invMod = gmp_invert($a, $b);echo $invMod.\"\\n\";?>Output:  4  12Program 2: Program to calculate the inverse modulo when GMP numbers are passed as arguments.<?php// PHP program to calculate inverse modulo// creating GMP numbers using gmp_init()$a = gmp_init(3, 10);$b = gmp_init(11, 10);// calculates the inverse modulo of a number$invMod = gmp_invert($a, $b);echo $invMod.\"\\n\";// calculates the inverse modulo of a number$a = gmp_init(10, 10);$b = gmp_init(17, 10);$invMod = gmp_invert($a, $b);echo $invMod.\"\\n\";?>Output:  4  12Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_sqrt() Function","The gmp_sqrt() is a built-in function in PHP which is used to calculate the square root of a GMP number (GNU Multiple Precision : For large numbers). This function returns only the integral part of the square root of the GMP number.Syntax:gmp_sqrt ( $num )Parameters: This function accepts a GMP number $num as a mandatory parameter as shown in the above syntax. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: This function returns a GMP number which is the square root of a GMP number passed to it as parameter. This function only returns the integral part of the square root of the GMP number passed to it as argument.Examples:  Input : \"9\"  Output : 3    Input : \"24\"  Output : 4Below programs illustrate the gmp_sqrt() function in PHP :Program 1: Program to calculate the square root of a GMP number when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to calculate the square root// of a GMP number passed as arguments// strings as GMP numbers$num1 = \"9\";$num2 = \"24\";// calculates the square root of a GMP number$squareRoot = gmp_sqrt($num1);echo $squareRoot.\"\\n\";// calculates the square root of a GMP number$squareRoot = gmp_sqrt($num2);echo $squareRoot.\"\\n\";?>Output:  3  4Program 2: Program to calculate the square root of a GMP number when GMP numbers are passed as arguments.<?php// PHP program to calculate the square root// of a GMP number// creating GMP numbers using gmp_init()$num1 = gmp_init(9, 10);$num2 = gmp_init(24, 10);// calculates the square root of a GMP number$squareRoot = gmp_sqrt($num1);echo $squareRoot.\"\\n\";// calculates the square root of a GMP number$squareRoot = gmp_sqrt($num2);echo $squareRoot.\"\\n\";?>Output:  3  4Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_sqrtrem() Function","The gmp_sqrtrem() is a built-in function in PHP which is used to calculate the square root of a GMP number (GNU Multiple Precision : For large numbers) with remainder. This function also returns only the integral part in the square root of the GMP number as the gmp_sqrt() function. The remainder is basically the difference between the GMP number and the square of the square root value as returned by this function.Syntax:gmp_sqrtrem ( $num )Parameters: This function accepts a GMP number $num as a mandatory parameter as shown in the above syntax whose square root we want to calculate. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: This function returns an array of two GMP numbers. The first element in this array is the integral part in the square root of the GMP number passed to the function as parameter and the second element is the remainder. The remainder is calculated as the difference between the GMP number and the square of first element of this array.Examples:  Input : \"9\"  Output : 3    Input : \"24\"  Output : 4Below programs illustrate the gmp_sqrtrem() function in PHP :Program 1: Program to calculate the square root with remainder of a GMP number when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to calculate the square root// of a GMP number// passing numeric strings as GMP numbers$num = gmp_init(\"24\");// calculates the square root of a GMP number// with remainderlist($squareRoot, $rem) = gmp_sqrtrem($num);echo $squareRoot.\" \".$rem;?>Output:  4 8Program 2: Program to calculate the square root with remainder of a GMP number when GMP numbers are passed as arguments.<?php// PHP program to calculate the square root// of a GMP number// creating GMP numbers using gmp_init()$num = gmp_init(24, 10);// calculates the square root of a GMP number// with remainderlist($squareRoot, $rem) = gmp_sqrtrem($num);echo $squareRoot.\" \".$rem;?>Output:  4 8Most popular in PHPMost visited in Web Technologies");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_xor() Function","The gmp_xor() is an in-built function in PHP which is used to calculate the XOR of 2 GMP numbers (GNU Multiple Precision : For large numbers).Syntax:gmp_xor( $num1, $num2 )Parameters: This function accepts two GMP numbers $num1 and $num2 as mandatory parameters shown in the above syntax. These parameters can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: This function returns a positive GMP number which is the XOR of $num1 and $num2.Examples:  Input : $num1 = \"3\" $num2 = \"5\"  Output : 6    Input : $num1 = 1 $num2 = 1  Output : 0Below programs illustrate the gmp_xor() function:Program 1: The program calculates the XOR of two numbers when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to calculate the XOR// of two numbers using gmp_xor()// numeric string passed as arguments$xor = gmp_xor(\"3\", \"5\");// prints the GMP number which xor// of two numeric stringsecho $xor;?>Output:6Program 2: The program calculates the XOR of two numbers when GMP numbers are passed as arguments.<?php// PHP program to calculate XOR// of two numbers// GMP numbers passed as arguments$xor1 = gmp_init(\"1101101110\", 2);$xor2 = gmp_init(\"0110011001\", 2);// function calculates the XOR of two numbers$xor3 = gmp_xor($xor1, $xor2);// prints the GMP number which is the// XOR of two GMP numbers// gmp_strval Convert GMP number to string//  representation in given base(default 10).echo gmp_strval($xor3, 2);?>Output:1011110111");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_or() Function","The gmp_or() is an inbuilt function in PHP which is used to calculate the bitwise OR of two GMP numbers(GNU Multiple Precision : For large numbers).Syntax:gmp_or($num1, $num2)Parameters: This function accepts two GMP numbers, $num1, $num2 as mandatory parameters as shown in the above syntax. These parameters can be GMP objects in PHP version 5.6 and later, or we are also allowed to pass numeric strings such that it is possible to convert those strings to numbers.Return Value: This function returns a GMP number which is the bitwise OR of the GMP numbers passed to it as parameters.Examples:  Input : gmp_or(\"4\", \"2\")  Output : 6    Input : gmp_or(\"9\", \"10\")  Output : 11Below programs illustrate the gmp_or() function in PHP:Program 1: Program to calculate the bitwise OR of GMP numbers when numeric strings as GMP numbers are passed as arguments.<?php// PHP program to calculate the bitwise OR//  GMP numbers passed as arguments// strings as GMP numbers$num1 = \"10\";$num2 = \"9\";// calculate the bitwise OR of $num1 and $num2$res = gmp_or($num1, $num2);echo $res;?>Output:  11Program 2: Program to calculate the bitwise OR of GMP numbers when GMP numbers are passed as arguments.<?php// PHP program to calculate the bitwise OR//  GMP numbers passed as arguments// creating GMP numbers using gmp_init()$num1 = gmp_init(4);$num2 = gmp_init(2);// calculate the bitwise OR of $num1 and $num2$res = gmp_or($num1, $num2);echo $res;?>Output:  6");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_testbit() Function","The gmp_testbit() is an in-built function in PHP which checks if the specified bit of a given GMP number(GNU Multiple Precision: For large numbers) is set or not.Syntax:gmp_testbit($num, $index)Parameters: The function accepts two parameters which are mandatory and are described below:$num – The This function accepts one GMP number $num whose specified bit is to be checked.This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.$index- The specified index whose bit in $num is to be checked. It is an integer.Return Value: The function returns true if the specified $index bit is set, otherwise it returns false if the bit is not set.Examples:  Input : $num=4 $index=2  Output :  true    Input : $num=9 $index=2  Output :  falseBelow programs illustrate the use of gmp_testbit() function:Program 1: The program below demonstrates the working of gmp_testbit() function when GMP number is passed as an argument.<?php// PHP program to check the sign// of a number// numeric string arguments$num = gmp_init(\"1001\", 2);$index1 = 2;$index2 = 0;// checks if the 2nd index bit in 9 (1001) is set or notvar_dump(gmp_testbit($num, $index1)).\"\\n\";// checks if the 0th index bit in 9 (1001) is set or notvar_dump(gmp_testbit($num, $index2));?>Output:bool(false)   bool(true)Program 2: The program below demonstrates the working of gmp_testbit() when numeric string is passed as an argument.<?php// PHP program to check the sign// of a number// numeric string arguments$num = \"9\";$index1 = 2;$index2 = 3;// checks if the 2nd index bit in 9 (1001)// is set or notvar_dump(gmp_testbit($num, $index1)).\"\\n\";// checks if the 3rd index bit in 9 (1001)// is set or notvar_dump(gmp_testbit($num, $index2));?>Output:bool(false)   bool(true)");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_powm() Function","The gmp_powm() is an inbuilt function in PHP which is used to calculate the number raised to a power of two GMP numbers modulo of another GMP number.(GNU Multiple Precision: For large numbers)Syntax:gmp_pow( $base, $exp, $mod)Parameters: The function accepts three mandatory parameters $base, $exp and $mod$base – It is the base number.$exp – It is the power which is raised to the base.$mod – It returns the remainder after division with $modNote: All the parameters are a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: This function returns a positive GMP number which is equivalent to (baseexp)%modExamples:  Input : $base = \"2\" $exp = \"2\" $mod = 3  Output : 1    Input : $base = \"4\" $exp = \"2\" $mod = 10  Output : 6Below programs illustrate the gmp_powm() function:Program 1: The program below demonstrates the working of gmp_powm() function when GMP number are passed as arguments.<?php// PHP program to calculate power raised// to a number mdoulo mod// GMP number as arguments$base = gmp_init(\"100\", 2);$exp = gmp_init(\"10\", 2);$mod = gmp_init(\"1010\", 2);// function calculates the pow raised to// number modulo mod$powm = gmp_powm($base, $exp, $mod);  // 4^2%10// gmp_strval converts GMP number to string// representation in given base(default 10).echo gmp_strval($powm, 2);?>Output:110Program 2: The program below demonstrates the working of gmp_powm() when numeric string are passed as arguments.<?php// PHP program to calculate power raised// to a number modulo m// numeric strings as arguments$base = \"4\";$exp = \"2\";$mod = \"10\";// function calculates the pow raised to// number  4^2%10$powm = gmp_powm($base, $exp, $mod);echo $powm;?>Output:6");create(getIdByTitle(this.context,"Functions"),"PHP | gmp_sign() Function","The gmp_sign() is an in-built function in PHP which checks the sign of a given GMP number (GNU Multiple Precision: For large numbers).Syntax:gmp_sign($num)Parameters: This function accepts one GMP number $num as mandatory parameter shown in the above syntax. This parameter can be a GMP object in PHP version 5.6 and later, or we are also allowed to pass a numeric string provided that it is possible to convert that string to a number.Return Value: The function checks the sign of the given number $num and returns three values depending on the number as described below:Returns 1 – $num is positiveReturns -1 – $num is negativeReturns 0 – $num is zeroExamples:  Input : $num=9  Output : 1     Input : $num=-8  Output : -1     Input : $num=0  Output : 0Below programs illustrate the gmp_sign() function:Program 1: The program below demonstrates the working of gmp_sign() function when GMP number is passed as an argument.<?php// PHP program to check the sign// of a number// GMP arguments// negative$num1 = gmp_init(\"-101\", 2);// positive$num2 = gmp_init(\"1010\", 2);// zero$num3 = gmp_init(\"0\", 2);// prints -1 as negativeecho gmp_sign($num1).\"\\n\";// prints +1 as negativeecho gmp_sign($num2).\"\\n\";// prints 0 as 0echo gmp_sign($num3).\"\\n\";?>Output:  -1  1  0Program 2: The program below demonstrates the working of gmp_sign() when numeric string is passed as an argument.<?php// PHP program to check the sign// of a number// numeric arguments// negative$num1 = -9;// positive$num2 = 8;// zero$num3 = 0;// prints -1 as negativeecho gmp_sign($num1).\"\\n\";// prints +1 as negativeecho gmp_sign($num2).\"\\n\";// prints 0 as 0echo gmp_sign($num3).\"\\n\";?>Output:-1  1  0");
    }

    private void fileHandlingArticles()
    {
        create(getIdByTitle(this.context,"File Handling"),"PHP | is_readable( ) Function","The is_readable() function in PHP used to check whether the specified file exists and is readable or not. The name of the file is sent as a parameter to the is_readable() function and it returns True if the file exists and is readable.is_readable() function returns False for streams, for example, php://stdin.is_readable() function can also be used with some URL wrappers such as file: // ,http:// ,ftp:// ,php:// in PHP 5.0.0.Syntax:is_readable($file)Parameters Used:The is_readable() function in PHP accepts only one parameter.file : It is a mandatory parameter which specifies the file.Return Value:It returns True if the file or directory specified exists and is readable otherwise it returns False.Exceptions:An E_WARNING is emitted on failure.The result of this function are cached and therefore the clearstatcache() function is used to clear the cache.Below programs illustrate the is_readable() function.Program 1<?php$myfile = \"gfg.txt\";// checking whether file is readable or notif (is_readable($myfile)){    echo \'$myfile is readable\';}else{    echo \'$myfile is not readable\';}?>Output:  gfg.txt is readableProgram 2<?php$myfile = \"gfg.txt\";// checking whether file is readable or notif (is_readable($myfile)){    echo \'$myfile is readable\';    // displaying contents of the uploaded file    echo \"Contents of the file are :\\n\";    readfile($myfile);}else{    echo \'$myfile is not readable\';}?>Output:  gfg.txt is readable  Contents of the file are :  Portal for geeks!Program 3<?php$permissions = fileperms(\"gfg.txt\");$permvalue = sprintf(\"%o\", $permissions);// Clearing the File Status Cacheclearstatcache();if(is_readable(\"gfg.txt\")){   echo(\"File is Readable    and File Permissions are : $permvalue)\");}else{  echo(\"File is Not Readable     and File Permissions are : $permvalue)\");}// Clearing the File Status Cacheclearstatcache();?>Output:  File is Readable and File Permissions are : 0644Related Article: PHP | is_writable() Function");create(getIdByTitle(this.context,"File Handling"),"PHP | is_writable() Function","The is_writable() function in PHP used to check whether the specified file is writable or not. The name of the file is sent as a parameter to the is_writable() function and it returns True if the filename exists and is writable.Name of a directory can also be a parameter to the is_writable() function which allows checking whether the directory is writable or not.Syntax:is_writable(file)Parameters Used:The is_writable() function in PHP accepts one parameter.file : It is a mandatory parameter which specifies the file.Return Value:It returns True if the filename exists and is writable.Exceptions:An E_WARNING is emitted on failure.The result of this function are cached and therefore the clearstatcache() function is used to clear the cache.is_writable() function returns false for non-existent files.Examples:  Input : $myfile = \"gfg.txt\";          if(is_writable($myfile))           {             echo (\"$myfile file is writable!\");          }           else           {             echo (\"$myfile file is not writable!\");          }  Output : gfg.txt file is writable!    Input : $permissions = fileperms(\"gfg.txt\");          $perm_value = sprintf(\"%o\", $permissions);          $myfile = \"gfg.txt\";                   if (is_writable($myfile))           {            echo (\"$myfile file is writable and            it has the following file permissions : $perm_value\");          }           else           {            echo (\"$myfile file is not writable and            it has the following file permissions : $perm_value\");          }    Output : gfg.txt file is writable and it has the following file permissions : 0664Below programs illustrate the is_writable() function.Program 1<?php$myfile = \"gfg.txt\";// checking whether the file is writable or notif(is_writable($myfile)){ echo (\"$myfile file is writable!\");}else{ echo (\"$myfile file is not writable!\");}?>Output:   gfg.txt file is writable!Program 2<?php// checking permissions of the file$permissions = fileperms(\"gfg.txt\");$perm_value = sprintf(\"%o\", $permissions);// Clearing the File Status Cacheclearstatcache();$myfile = \"gfg.txt\";// checking whether the file is writable or notif(is_writable($myfile)){ echo (\"$myfile file is writable and   it has the following file permissions : $perm_value\");}else{ echo (\"$myfile file is not writable and   it has the following file permissions : $perm_value\");}// Clearing the File Status Cacheclearstatcache();?>Output:  gfg.txt file is writable and it has the following file permissions : 0664");create(getIdByTitle(this.context,"File Handling"),"PHP | readfile( ) Function","The readfile() function in PHP is an inbuilt function which is used to read a file and write it to the output buffer. The filename is sent as a parameter to the readfile() function and it returns the number of bytes read on success, or FALSE and an error on failure.By adding an ‘@’ in front of the function name the error output can be hidden.Syntax:readfile(filename, include_path, context)Parameters Used:The realpath() function in PHP accepts three parameters.filename : It is a mandatory parameter which specifies the file name.include_path : It is an optional parameter which can be set to 1 if you want to search for a file in the include_path in phpcontext : It is an optional parameter which specifies the behavior of the stream.Return Value:It returns the number of bytes read on success, or FALSE and an error on failure.Note: URL can be used as a filename with this function if the fopen wrappers have been enabled.Errors And ExceptionTurning off output buffering before calling Readfile() function may help in reading larger files into the memory.Examples:  Input : echo readfile(\"gfg.txt\");  Output : A computer portal for geeks!    Input : $myfile = @readfile(\"gfg.txt\");          if (!$myfile)           {               print \"File could not be opened\";          }  Output : A computer portal for geeks!Below programs illustrate the readfile() function.Suppose there is a file named “gfg.txt”Program 1<?php// writing file contents on the output//  buffer using readfile() functionecho readfile(\"gfg.txt\");?>Output:A computer portal for geeks!Program 2<?php// writing file contents on the output//  buffer using readfile() function$myfile = @readfile(\"gfg.txt\");if (!$myfile){   print \"File could not be opened\";}?>Output:A computer portal for geeks!");create(getIdByTitle(this.context,"File Handling"),"PHP | fgetss( ) Function","The fgetss() function in PHP is an inbuilt function which is used to return a line from an open file after removing HTML and PHP tags from the respective file.The fegtss() function stops returning at a specified length, on end of file(EOF) or on a new line, whichever comes first.The file to be read and the number of bytes to be read are sent as parameters to the fgetss() function and it returns a string of length -1 bytes from the file pointed by the user. It returns False on failure.Syntax:fgetss(file, length, tags)Parameters Used:The fgetss() function in PHP accepts three parameter.file: It specifies the file from which characters have to be extracted.length: It specifies the number of bytes to be read by the fgetss() function. The default value is 1024 bytes.tags: It is an optional paaremeter which is used to specify tags which should not be striped.Return Value:It returns a string of length -1 bytes from the file pointed by the user after removing all the HTML and PHP tags.Errors And Exception:The function is not optimised for large files since it reads a single line at a time and it may take a lot of time to completely read a long file.The buffer must be cleared if the fgetss() function is used multiple times.The fgetss() function returns Boolean False but many times it happens that it returns a non-Boolean value which evaluates to False.Below programs illustrate the fgetss() function.Suppose there is a file named “gfg.txt” which consists of :Program 1<?php// PHP program to illustrate the fgetss() function//file is opened using fopen() function$my_file = fopen(\"gfg.txt\", \"rw\");// Prints a single line from the opened file pointer// after removing HTML and PHP tagsecho fgetss($my_file);// file is closed using fclose() functionfclose($my_file);?>Output:This is the first line.Program 2<?php// PHP program to illustrate the fgetss() function// file is opened using fopen() function$my_file = fopen(\"gfg.txt\", \"rw\");// Prints 1024 bytes from the opened file pointer// without striping \"p\" and \"strong\" tagsecho fgetss($my_file, 1024, \"<p>, <strong>\");// file is closed using fclose() functionfclose($my_file);?>Output:");create(getIdByTitle(this.context,"File Handling"),"PHP | tmpfile( ) Function","The tmpfile() function in PHP is an inbuilt function which is used to create a temporary file with a unique name in read-write (w+) mode.The file created using tmpfile() function gets automatically deleted when close using fclose() or when there are no remaining references to the file handle.The end of the script also results in the removal of the temporary file created using tmpfile() function.The tmpfile() function takes no parameters and it returns a file handle which is similar to the one returned by fopen(), for the new file or FALSE on failure.Syntax:tmpfile()Return Value:It returns a file handle for the new file on success or FALSE on failure.Errors And Exception:The temporary file is automatically removed when it is closed with fclose(), or when the script ends.The tmpfile() function returns Boolean False but many times it happens that it returns a non-Boolean value which evaluates to False.Examples:    Input :  $temp_pointer = tmpfile();           fwrite($temp_pointer, \'temporary data\');           fclose(temp_pointer);  Output : 1    Input : $temp_pointer = tmpfile();          fwrite($temp_pointer, \"GeeksforGeeks\");          echo fread($temp_pointer, 2048);          fclose($temp);    Output : GeeksforgeeksBelow programs illustrate the tmpfile() function.Program 1<?php// PHP program to illustarte tmpfile( ) Function$temp_pointer = tmpfile();// Write on temporary filefwrite($temp_pointer, \'temporary data\');// This removes the filefclose(temp_pointer);?>Output:1Program 2<?php// PHP program to illustarte tmpfile( ) Function$temp_pointer = tmpfile();// Write on temporary filefwrite($temp_pointer, \"GeeksforGeeks\");// Read 2k from fileecho fread($temp_pointer, 2048);// This removes the filefclose($temp_pointer);?>Output:GeeksforGeeks");create(getIdByTitle(this.context,"File Handling"),"PHP | fgets( ) Function","The fgets() function in PHP is an inbuilt function which is used to return a line from an open file.It is used to return a line from a file pointer and it stops returning at a specified length, on end of file(EOF) or on a new line, whichever comes first.The file to be read and the number of bytes to be read are sent as parameters to the fgets() function and it returns a string of length -1 bytes from the file pointed by the user.It returns False on failure.Syntax:fgets(file, length)    Parameters Used:  The fgets() function in PHP accepts two parameters.  file : It specifies the file from which characters have   to be extracted.   length : It specifies the number of bytes to be   read by the fgets() function. The default value   is 1024 bytes.Return Value : It returns a string of length -1 bytes from the file pointed by the user or False on failure.Errors And ExceptionsThe function is not optimised for large files since it reads a single line at a time and it may take a lot of time to completely read a long file.The buffer must be cleared if the fgets() function is used multiple times.The fgets() function returns Boolean False but many times it happens that it returns a non-Boolean value which evaluates to False.Suppose there is a file named “gfg.txt” which consists of :This is the first line.This is the second line.This is the third line.Program 1<?php// file is opened using fopen() function$my_file = fopen(\"gfg.txt\", \"rw\");// Prints a single line from the opened file pointerecho fgets($my_file);// file is closed using fclose() functionfclose($my_file);?>Output:This is the first line.Program 2<?php//file is opened using fopen() function$my_file = fopen(\"gfg.txt\", \"rw\");// prints a single line at a time until end of file is reachedwhile (! feof ($my_file))  {  echo fgets($my_file);  }// file is closed using fclose() functionfclose($my_file);?>Output:  This is the first line.  This is the second line.  This is the third line.");create(getIdByTitle(this.context,"File Handling"),"PHP | fileperms( ) Function","The fileperms() function in PHP is an inbuilt function which is used to return the permissions given to a file or a directory. The filename of the file whose permissions have to be checked is sent as a parameter to the function and it returns the permissions given to the file in the form of numbers on success and False on failure.The result of the fileperms() function is cached and a function called clearstatcache() is used to clear the cache.Syntax:fileperms($filename)Parameters: The fileperms() function in PHP accepts one parameter $filename. It specifies the filename of the file whose permissions you want to check.Return Value: It returns the permissions given to the file in the form of numbers on success and False on failure.Errors And Exception:clearstatcache() function needs to be called everytime before calling fileperms() function if mkdir() or chmod() functions have been used prior to fileperms() function.The buffer must be cleared if the fileperms() function is used multiple times.The fileperms() function emits an E_WARNING in case of a failure.Examples:  Input : fileperms(\"gfg.txt\");  Output : 33206    Input : substr(sprintf(\"%o\", fileperms(\"gfg.txt\")), -4);  Output : 0644Below programs illustrate the fileperms() function.Program 1:<?php// file permissions are displayed// using fileperms() functionecho fileperms(\"gfg.txt\");?>Output:33206Program 2:<?php// file permissions are displayed in// octal format using fileperms() functionecho substr(sprintf(\"%o\", fileperms(\"gfg.txt\")), -4);?>Output:0644");create(getIdByTitle(this.context,"File Handling"),"PHP | filemtime( ) Function","The filemtime() function in PHP is an inbuilt function which is used to return the last time of a specified file when its content was modified. The filemtime() function returns the last time the file was changed as a Unix Timestamp on success and False on failure.The filename is passed as a parameter to the filemtime() function. The result of the filemtime() function is cached and a function called clearstatcache() is used to clear the cache.Syntax:filemtime($filename)Parameters: The filemtime() function in PHP accepts only one parameter $filename. It specifies the file which you want to check.Return Value: It returns the last time of a file when its content was modified as a Unix Timestamp on success and False on failure.Errors And Exception:The time resolution may differ from one file system to another.This function doesn’t works on some unix systems which have access time updates are disabled to increase performance.Examples:  Input : echo filemtime(\"gfg.txt\");  Output : 1525159574    Input : echo \"Last modified: \".date(\"F d Y H:i:s.\",                                 filemtime(\"gfg.txt\"));  Output : Last modified: May 1 2018 07:26:14.Below programs illustrate the filemtime() function.Program 1:<?php// checking last time the contents// of a file were changedecho filemtime(\"gfg.txt\");?>Output:1525159574Program 2:<?php// checking last time the contents// of a file were changedecho filemtime(\"gfg.txt\");// checking last time the contents of// a file were changed and formatting// the output of the dateecho \"Last modified: \".date(\"F d Y H:i:s.\",                      filemtime(\"gfg.txt\"));?>Output:  1525159574  Last modified: May 1 2018 07:26:14.");create(getIdByTitle(this.context,"File Handling"),"PHP | fileatime( ) Function","The fileatime() function in PHP is an inbuilt function which is used to return the last access time of a specified file. The fileatime() function returns the last access time of a file as a Unix Timestamp on success and False on failure.The filename is passed as a parameter to the fileatime() function. The result of the fileatime() function is cached and a function called clearstatcache() is used to clear the cache.Syntax:fileatime($filename)Parameters: The fileatime() function in PHP accepts only one parameter $filename. It specifies the file whose last access time you want to check.Return Value: It returns the last access time of a file as a Unix Timestamp on success and False on failure.Errors And Exception:The time resolution may differ from one file system to another.This function doesn’t works on some unix systems which have access time updates are disabled to increase performance.Examples:  Input : echo fileatime(\"gfg.txt\");  Output : 1525159574    Input : echo \"Last accessed: \".date(\"F d Y H:i:s.\",                                 fileatime(\"gfg.txt\"));  Output : Last accessed: May 1 2018 07:26:14.Below programs illustrate the fileatime() function.Program 1:<?php// checking last accessed time of a fileecho fileatime(\"gfg.txt\");?>Output:1525159574Program 2:<?php// checking last accessed time of a fileecho fileatime(\"gfg.txt\");//checking last accessed time of a file// and formatting the output of the dateecho \"Last accessed: \".date(\"F d Y H:i:s.\",                     fileatime(\"gfg.txt\"));?>Output:  1525159574  Last accessed: May 1 2018 07:26:14.");create(getIdByTitle(this.context,"File Handling"),"PHP | filectime( ) Function","The filectime() function in PHP is an inbuilt function which is used to return the last time the specified file was changed. The filectime() function returns the last time the file was changed as a Unix Timestamp on success and False on failure. The filectime() function checks for inode changes which are the updations in permissions, owner, group or other metadata as well as regular changes.The filename is passed as a parameter to the filectime() function. The result of the filectime() function is cached and a function called clearstatcache() is used to clear the cache.Syntax:filectime($filename)Parameters: The filectime() function in PHP accepts only one parameter $filename. It specifies the file whose last changed time you want to check.Return Value: It returns the last changed time of a file as a Unix Timestamp on success and False on failure.Errors And Exception:The time resolution may differ from one file system to another.This function doesn’t works on some unix systems which have access time updates are disabled to increase performance.Examples:  Input : echo filectime(\"gfg.txt\");  Output : 1525159574    Input : echo \"Last changed: \".date(\"F d Y H:i:s.\",                               filectime(\"gfg.txt\"));  Output : Last changed: May 1 2018 07:26:14.Below programs illustrate the filectime() function.Program 1:<?php// checking last time a file was changedecho filectime(\"gfg.txt\");?>Output:1525159574Program 2:<?php// checking last time a file was changedecho filectime(\"gfg.txt\");// checking last time a file was changed// and formatting the output of the dateecho \"Last changed: \".date(\"F d Y H:i:s.\",                    filectime(\"gfg.txt\"));?>Output:  1525159574  Last changed: May 1 2018 07:26:14.");create(getIdByTitle(this.context,"File Handling"),"PHP | file_exists( ) Function","The file_exists() function in PHP is an inbuilt function which is used to check whether a file or directory exists or not.The path of the file or directory you want to check is passed as a parameter to the file_exists() function which returns True on success and False on failure.Syntax:file_exists($path)Parameters: The file_exists() function in PHP accepts only one parameter $path. It specifies the path of the file or directory you want to check.Return Value: It returns True on success and False on failure.Errors And Exception:The file_exists() function returns False if the path specified points to non-existent files.For files larger than 2gb, some of the filesystem functions may give unexpected results since PHP’s integer type is signed and many platforms use 32bit integers.Examples:  Input : echo file_exists(\'/user01/work/gfg.txt\');  Output : 1    Input : $file_pointer = \'/user01/work/gfg.txt\';          if (file_exists($file_pointer)) {              echo \"The file $file_pointer exists\";          }else {              echo \"The file $file_pointer does                                      not exists\";          }  Output : 1Below programs illustrate the file_exists() function.Program 1:<?php// checking whether file exists or notecho file_exists(\'/user01/work/gfg.txt\');?>Output:1Program 2:<?php// checking whether file exists or not$file_pointer = \'/user01/work/gfg.txt\';if (file_exists($file_pointer)){    echo \"The file $file_pointer exists\";}else{    echo \"The file $file_pointer does                             not exists\";}?>Output:1");create(getIdByTitle(this.context,"File Handling"),"PHP | file_put_contents() Function","The file_put_contents() function in PHP is an inbuilt function which is used to write a string to a file. The file_put_contents() function checks for the file in which the user wants to write and if the file doesn’t exist, it creates a new file.The path of the file on which the user wants to write and the data that has to be written are sent as parameters to the function and it returns the number of bytes that were written on the file on success and FALSE on failure.Syntax:file_put_contents($file, $data, $mode, $context)Parameters: The file_put_contents() function in PHP accepts two mandatory parameters and two optional parameters.$file: It specifies the file on which you want to write.$data: It specifies the data that has to be written on the file. It can be a string, an array or a data stream.$context: It is an optional parameter which is used to specify a custom context or the behavior of the stream.$mode: It is an optional parameter which is used to specify how the data has to be written on the file such as FILE_USE_INCLUDE_PATH, FILE_APPEND, LOCK_EX.Return Value: It returns the number of bytes that were written on the file on success and FALSE on failure.Errors And Exception:The file_put_contents() function returns Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE.This function fails to write contents if the directory provided is invalid.Examples:  Input : file_put_contents(\"gfg.txt\", \"A computer                        science portal for geeks!\");  Output : 36    Input : $file_pointer = \'gfg.txt\';          $open = file_get_contents($file_pointer);          $open .= \"A computer science portal for geeks!\";          file_put_contents($file_pointer, $open);  Output : 36Below programs illustrate the file_put_contents() function.Program 1:<?php// writing content on gfg.txtecho file_put_contents(\"gfg.txt\", \"A computer                  science portal for geeks!\");?>Output:36Program 2:<?php$file_pointer = \'gfg.txt\';// Open the file to get existing content$open = file_get_contents($file_pointer);// Append a new person to the file$open .= \"A computer science portal for geeks!\";// Write the contents back to the filefile_put_contents($file_pointer, $open);?>Output:36");create(getIdByTitle(this.context,"File Handling"),"PHP | fgetc( ) Function","The fgetc() function in PHP is an inbuilt function which is used to return a single character from an open file. It is used to get a character from a given file pointer.The file to be checked is used as a parameter to the fgetc() function and it returns a string containing a single character from the file which is used as a parameter.Syntax:fgetc($file)Parameters: The fgetc() function in PHP accepts only one parameter $file. It specifies the file from which character is needed to be extracted.Return Value: It returns a string containing a single character from the file which is used as a parameter.Errors And Exception:The function is not optimised for large files since it reads a single character at a time and it may take a lot of time to completely read a long file.The buffer must be cleared if the fgetc() function is used multiple times.The fgetc() function returns Boolean False but many times it happens that it returns a non-Boolean value which evaluates to False.Below programs illustrate the fgetc() function.Program 1: In the below program the file named gfg.txt contains the following text.This is the first line.This is the second line.This is the third line.<?php// file is opened using fopen() function$my_file = fopen(\"gfg.txt\", \"rw\");// Prints a single character from the// opened file pointerecho fgetc($my_file);// file is closed using fclose() functionfclose($my_file);?>Output:TProgram 2: In the below program the file named gfg.txt contains the following text.This is the first line.This is the second line.This is the third line.<?php// file is opened using fopen() function$my_file = fopen(\"gfg.txt\", \"rw\");// prints single character at a time// until end of file is reachedwhile (! feof ($my_file))  {  echo fgetc($my_file);  }// file is closed using fclose() functionfclose($my_file);?>Output:  This is the first line.  This is the second line.  This is the third line.");create(getIdByTitle(this.context,"File Handling"),"PHP | fflush( ) Function","The fflush() function in PHP is an inbuilt function which is used to write all the buffered output to an open file. The fflush() function forces a write of all buffered output to the resource pointed to by the file handle. The fflush() function returns true on success and false on failure.Syntax:fflush($file)Parameters: The fflush() function in PHP accepts only one parameter which is $file. It specifies the open file stream.Return Value: It returns TRUE on success and FALSE on failure.Errors And Exception:The fflush() function results in errors if the file pointer is not valid.The file pointed must be opened by fopen() or fsockopen() and closed by fclose().Below programs illustrate the fflush() function.Program 1: In the below program the file named singleline.txt contains a single line of information which is “This file consists of a single line.”.<?php// The file is opened using fopen() function$check = fopen(\"singleline.txt\", \"r\");$seq = fgets($check);// Writing buffered output to a file// until the end-of-file is reachedwhile(! feof($check))    fflush($check);// The file is closed using fclose() functionfclose($check);?>Output:  This file consists of a single line.Program 2: In the below program the file named gfg.txt contains the following piece of text.This is the first line.This is the second line.This is the third line.<?php// The file is opened using fopen() function$check = fopen(\"gfg.txt\", \"r\");$seq = fgets($check);// Writing buffered output to a file// until the end-of-file is reachedwhile(! feof($check))    fflush($check);// The file is closed using fclose() functionfclose($check);?>Output:  This is the first line.  This is the second line.  This is the third line.");create(getIdByTitle(this.context,"File Handling"),"PHP | filesize( ) Function","The filesize() function in PHP is an inbuilt function which is used to return the size of a specified file. The filesize() function accepts the filename as a parameter and returns the size of a file in bytes on success and False on failure.The result of the filesize() function is cached and a function called clearstatcache() is used to clear the cache.Syntax:filesize($filename)Parameters: The filesize() function in PHP accepts only one parameter $filename. It specifies the filename of the file whose size you want to check.Return Value: It returns the size of a file in bytes on success and False on failure.Errors And Exception:For files which are larger than 2GB some filesystem functions may return unexpected results since PHP’s integer type is signed and many platforms use 32bit integers.The buffer must be cleared if the filesize() function is used multiple times.The filesize() function emits an E_WARNING in case of a failure.Examples:    Input : echo filesize(\"gfg.txt\");  Output : 256    Input : $myfile = \'gfg.txt\';          echo $myfile . \': \' . filesize($myfile) . \' bytes\';  Output : gfg.txt : 256 bytesBelow programs illustrate the filesize() function.Program 1:<?php// displaying file size using// filesize() functionecho filesize(\"gfg.txt\");?>Output:256Program 2:<?php// displaying file size using// filesize() function$myfile = \'gfg.txt\';echo $myfile . \': \' . filesize($myfile) . \' bytes\';?>Output:gfg.txt : 256 bytes");create(getIdByTitle(this.context,"File Handling"),"PHP | filetype( ) Function","The filetype() function in PHP is an inbuilt function which is used to return the file type of a specified file or a directory.The filetype() function accepts the filename as a parameter and returns one of the seven file types on success and False on failure.The seven possible return values of the filetype() function are:file: regular filedir: directorychar: character special devicelink: symbolic linkfifo: FIFO (named pipe)block: block special deviceunknown: unknown file typeThe result of the filetype() function is cached and a function called clearstatcache() is used to clear the cache.Syntax:filetype( $filename )Parameters: The filetype() function in PHP accepts only one parameter $filename. It specifies the filename of the file whose type you want to know.Return Value: It returns the type of a file on success and False on failure.Errors And Exception:For files which are larger than 2GB some filesystem functions may return unexpected results since PHP’s integer type is signed and many platforms use 32bit integers.The filetype() function emits an E_WARNING in case of a failure.The buffer must be cleared if the filetype() function is used multiple times.The filetype() function emits an E_NOTICE message if the stat call fails or if the file type is unknown.Examples:  Input : filetype(\"gfg.txt\");  Output : file    Input : filetype(\"documents\");  Output : dirBelow programs illustrate the filetype() function.Program 1:<?php// displaying file type using// filetype() functionecho filetype(\"gfg.txt\");?>Output:fileProgram 2:<?php// displaying file type using// filetype() function$myfile = \"documents\";echo $myfile . \': \' . filetype($myfile);?>Output:documents : dir");create(getIdByTitle(this.context,"File Handling"),"PHP | feof( ) Function","The feof() function in PHP is an inbuilt function which is used to test for the end-of-file on a file pointer. It checks if the “end-of-file” has been reached or not. The feof() function is used for looping through the content of a file if the size of content is not known beforehand.The feof() function returns True if end-of-file has been reached or if an error has occurred. Else it returns False.Syntax:feof( $file )Parameters: The feof() function in PHP accepts only one parameter which is $file. This parameter specifies the file which has to be checked for end-of-file.Return Value: It returns TRUE if end-of-file has been reached or if an error has occurred. Else it returns False.Errors And Exception:It goes in an infinite loop if the passed file pointer is not valid, because end-of-file fails to return True.feof() function hangs if a connection opened by fsockopen() isn’t closed by the server.Below programs illustrate the feof() function:Program 1: In the below program the file named “singleline.txt” contains only a single line of text which is “This file consists of only a single line.”.<?php// a file is opened using fopen() function$check = fopen(\"singleline.txt\", \"r\");$seq = fgets($check);// Outputs a line of the file until// the end-of-file is reachedwhile(! feof($check)){  echo $seq ;  $seq = fgets($check);}// file is closed using fclose() functionfclose($check);?>Output:  This file consists of only a single line.Program 2: In the below program the file named “gfg.txt” contains the following text.This is the first line.This is the second line.This is the third line.<?php// a file is opened using fopen() function$check = fopen(\"gfg.txt\", \"r\");$seq = fgets($check);// Outputs a line of the file until// the end-of-file is reachedwhile(! feof($check)){  echo $seq ;  $seq = fgets($check);}// file is closed using fclose() functionfclose($check);?>Output:  This is the first line.  This is the second line.  This is the third line.");create(getIdByTitle(this.context,"File Handling"),"PHP | fclose( ) Function","The fclose() function in PHP is an inbuilt function which is used to close a file which is pointed by an open file pointer. The fclose() function returns true on success and false on failure. It takes the file as an argument which has to be closed and closes that file.Syntax:bool fclose( $file )Parameters: The fclose() function in PHP accepts only one parameter which is $file. This parameter specifies the file which has to be closed.Return Value: It returns true on success and false on failure.Errors And Exception:A file has to be closed first using the fclose() function if it has been written via fwrite() function and you have to read the contents of the file.The fclose() function in PHP doesn’t works for remote files.It only works on files which are accessible by the server’s filesystem.Examples:  Input : $check = fopen(\"gfg.txt\", \"r\");          fclose($check);  Output : true    Input: $check = fopen(\"singleline.txt\", \"r\");         $seq = fgets($check);         while(! feof($check))         {           echo $seq ;           $seq = fgets($check);         }         fclose($check);  Output:trueBelow programs illustrate the fclose() function:Program 1:<?php// opening a file using fopen() function$check = fopen(\"gfg.txt\", \"r\");// closing a file using fclose() functionfclose($check);?>Output:trueProgram 2: In the below program the file named singleline.txt contains only a single line “This file consists of only a single line”.<?php// a file is opened using fopen() function$check = fopen(\"singleline.txt\", \"r\");$seq = fgets($check);// Outputs a line of the file until// the end-of-file is reachedwhile(! feof($check)){  echo $seq ;  $seq = fgets($check);}// the file is closed using fclose() functionfclose($check);?>Output:  This file consists of only a single line.");create(getIdByTitle(this.context,"File Handling"),"PHP | file_get_contents() Function","The file_get_contents() function in PHP is an inbuilt function which is used to read a file into a string. The function uses memory mapping techniques which are supported by the server and thus enhances the performances making it a preferred way of reading contents of a file.The path of the file to be read is sent as a parameter to the function and it returns the data read on success and FALSE on failure.Syntax:  file_get_contents($path, $include_path, $context                                 $start, $max_length)Parameters: The file_get_contents() function in PHP accepts one mandatory parameter and four optional parameters.$path: It specifies the path of the file or directory you want to check.$include_path: It is an optional parameter which searches for a file in the file in the include_path (in php.ini) also if it is set to 1.$context: It is an optional parameter which is used to specify a custom context.$start: It is an optional parameter which is used to specify the starting point in the file for reading.$max_length: It is an optional parameter which is used to specify the number of bytes to be read.Return Value: It returns the read data on success and FALSE on failure.Errors And Exception:If you want to open a file with special characters, such as spaces, it needs to be encoded first using urlencode().The file_get_contents() function returns Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE.An E_WARNING level error is generated if filename cannot be found, maxlength is less than zero, or if seeking to the specified offset in the stream fails.Examples:  Input:  file_get_contents(\'https://www.geeksforgeeks.org/\');  Output: A computer science portal for geeks    Input:  file_get_contents(\'gfg.txt\', FALSE, NULL, 0, 14);  Output: A computer science portal for geeksBelow programs illustrate the file_get_contents() function.Program 1:<?php// reading contents from the// geeksforgeeks homepage$homepage = file_get_contents(\"https://www.geeks                                 forgeeks.org/\");echo $homepage;?>Output:A computer science portal for geeksProgram 2:<?php// reading 36 bytes startig from// the 0th character from gfg.txt$text = file_get_contents(\'gfg.txt\',                  FALSE, NULL, 0, 36);echo $text;?>Output:A computer science portal for geeks");create(getIdByTitle(this.context,"File Handling"),"PHP | realpath( ) Function","The realpath() function in PHP is an inbuilt function which is used to return the canonicalized absolute pathname.The realpath() function removes all symbolic links such as ‘/./’ ‘/../’ and extra ‘/’ and returns the absolute pathname.The path is sent as a parameter to the realpath() function and it returns the absolute pathname on success and a False on failure.Syntax:realpath(path)Parameters Used:The realpath() function in PHP accepts only one parameter.path : It is a mandatory parameter which specifies the symbolic path whose absolute path the user wants to know.Return Value:It returns the absolute pathname on success and a False on failure.Errors And ExceptionThe realpath() function returns False if the running script does not have executable permissions on all directories in the hierarchy.The function realpath() will not work for a file which is inside a Phar as such a path is not a real path.Some filesystem functions may return unexpected results for files which are larger than 2GB since PHP’s integer type is signed and many platforms use 32bit integers.Examples:  Input : echo realpath(\"gfg.txt\");  Output : C:\\xampp\\htdocs\\filehandling\\gfg.txt    Input : chdir(\'/docs/assignment/\');          echo realpath(\'./../../gfg/articles\');    Output : /gfg/articlesBelow programs illustrate the realpath() function.Suppose there is a file named “gfg.txt”Program 1<?php// returning absolute path// using realpath() functionecho realpath(\"gfg.txt\");?>Output:C:\\xampp\\htdocs\\filehandling\\gfg.txtProgram 2<?php// using chdir() to change directorychdir(\'/docs/assignment/\');// returning absolute path using realpath() functionecho realpath(\'./../../gfg/articles\');?>Output:/gfg/articles");create(getIdByTitle(this.context,"File Handling"),"PHP | dirname( ) Function","The dirname() function in PHP is an inbuilt function which is used to return the directory name of a given path. The dirname() function is used to parent directory’s path i.e levels up from the current directory.The dirname() function returns the path of a parent directory which includes a dot (‘.’) if the path has no slashes, indicating the current directory.Syntax:string dirname ( $path )Parameters: The dirname() function in PHP accepts only one parameter which is $path. This parameter specifies the path to be checked.Return Value: It returns the path of the parent directory.Errors And Exception:While specifying a path both slashes, forward slash (/) and backslash (\\) are used as directory separator character in a windows environment whereas in other environments, it is just the forward slash (/).The dirname() function operates on the input string and therefore it is not aware of the actual filesystem, or path components such as “..”.Examples:  Input : dirname(\"user01/geeksforgeeks/gfg.txt\")  Output : user01/geeksforgeeks    Input : dirname(\"/geeksforgeeks/gfg.txt\");  Output : /geeksforgeeksBelow programs illustrate the dirname() function:Program 1:<?php// specifying path to the dirname() functionecho dirname(\"user01/geeksforgeeks/gfg.txt\")?>Output:user01/geeksforgeeksProgram 2:<?php// specifying path to the dirname() functionecho dirname(\"/geeksforgeeks/gfg.txt\");?>Output:/geeksforgeeks");create(getIdByTitle(this.context,"File Handling"),"PHP | copy( ) Function","The copy() function in PHP is an inbuilt function which is used to make a copy of a specified file. It makes a copy of the source file to the destination file and if the destination file already exists, it gets overwritten. The copy() function returns true on success and false on failure.Syntax:bool copy ( $source, $dest )Parameters: The copy() function in PHP accepts two parameters which are source and destination.$source: It specifies the path to the source file.$dest: It is used to specify the path to the destination file.Return Value: It returns true on success and false on failure.Errors And Exception:The copy() function in PHP doesn’t works for remote files.It only works on files which are accessible by the server’s filesystem.If the destination file already exists, it gets overwritten.Examples:  Input : echo copy(\"gfg.txt\", \"geeksforgeeks.txt\");  Output : true    Input : $srcfile = \'/user01/Desktop/admin/gfg.txt\';          $destfile = \'user01/Desktop/admin/geeksforgeeks.txt\';          echo copy($srcfile, $destfilefile);  Output : trueBelow programs illustrate the copy() function:Program 1:<?php// Copying gfg.txt to geeksforgeeks.txtecho copy(\"gfg.txt\", \"geeksforgeeks.txt\");?>Output:trueProgram 2:<?php// Copying gfg.txt to geeksforgeeks.txt$srcfile = \'/user01/Desktop/admin/gfg.txt\';$destfile = \'user01/Desktop/admin/geeksforgeeks.txt\';if (!copy($srcfile, $destfilefile)) {    echo \"File cannot be copied! \\n\";}else {    echo \"File has been copied!\";}?>Output:File has been copied!");create(getIdByTitle(this.context,"File Handling"),"PHP | chgrp( ) Function","The chgrp() function in PHP is an inbuilt function which is used to change the user group of the specified file. It returns true on success and false on failure. Only the superuser has the right to change the group of a file arbitrarily.Syntax:bool chgrp ( $filename, $group )Parameters: The chown() function in PHP accepts two parameters which are filename and user.$filename: It specifies the file whose user group you want to change.$group: It specifies the new user group. It can be a group name or a number.Return Value: The chgrp() function returns true on success and false on failure.Errors And Exception:The chgrp() function in PHP doesn’t works for remote files.It only works on files which are accessible by the server’s filesystem.PHP checks whether the files or directories which are being operated have the same owner as the script that is being executed or not when safe mode is enabled.Examples:  Input : chgrp(\"gfg.txt\", \"administrator\")  Output :true    Input : $filename = \"/user/Desktop/geeksforgeeks/gfg.txt\";          chgrp( $filename, \"guest\" );  Output :trueBelow programs illustrate the chgrp() function:Program 1:<?php// changes the file group to administratorchgrp(\"gfg.txt\", \"administrator\")?>Output:trueProgram 2:<?php// Changes the file group to guest$filename = \"/user/Desktop/geeksforgeeks/gfg.txt\";chgrp ( $filename, \"guest\" );chown($path, $user_name);?>Output:true");create(getIdByTitle(this.context,"File Handling"),"PHP | chown( ) Function","The chown() function in PHP is an inbuilt function which is used to change the owner of the specified file. It returns true on success and false on failure. Only the superuser has the right to change the owner of a file.Syntax:bool chown ( $filename, $user )Parameters: The chown() function in PHP accepts two parameters which are filename and user.$filename: It specifies the file whose owner you want to change.$user: It specifies the new owner. It can be a username or an user id.Return Value: The chown() function returns true on success and false on failure.Errors And Exception:The chown() function in PHP doesn’t works for remote files.It only works on files which are accessible by the server’s filesystem.PHP checks whether the files or directories which are being operated have the same owner as the script that is being executed or not when safe mode is enabled.Examples:  Input : chown(\"gfg.txt\", \"shubrodeep\")  Output : true    Input :  $path = \"/user01/Desktop/geeksforgeeks/gfg.php\";           $user_name = \"root\";           chown($path, $user_name);   Output : trueBelow programs illustrate the chown() function.Program 1:<?php// Sets shubrodeep as ownerchown(\"gfg.txt\", \"shubrodeep\");?>Output:trueProgram 2:<?php// Sets root as owner of the file \"gfg.php\"$path = \"/user01/Desktop/geeksforgeeks/gfg.php\";$user_name = \"root\";chown($path, $user_name);?>Output:true");create(getIdByTitle(this.context,"File Handling"),"PHP | basename( ) Function","The basename() function in PHP is an inbuilt function which is used to return the base name of a file if the path of the file is provided as a parameter to the basename() function.Syntax:string basename ( $path , $suffix )Parameters: The basename() function in PHP accepts two parameters which are path and suffix.$path: This parameter is of string type and is mandatory. It specifies the path of the file.$suffix: It is an optional parameter which hides the extension of a file if it ends with a suffix.Return Value: This function returns the basename of the file whose path has been given as a parameter by the user.Errors And Exception:The basename() function doesn’t recognise path components such as ‘..’ .The basename() function operates on the input string provided by the user and is unaware of the actual filesystem.Both slashes, forward slash (/) and backslash (\\) are used as directory separator character on a windows platform whereas it is just a forward slash (/) in other environments.Examples:  Input : $path = \"user01/home/documents/geeksforgeeks.php\",  Output : geeksforgeeks.php    Input :  $path = \"user01/home/documents/geeksforgeeks.php\",           $suffix = \".php\"  Output : geeksforgeeksBelow programs illustrate the basename() function:Program 1:<?php$path = \"user01/home/documents/geeksforgeeks.php\";// basename() function to show// filename along with extensionecho basename($path);?>Output:geeksforgeeks.phpProgram 2:<?php$path = \"user01/home/documents/geeksforgeeks.php\";// basename() function to show the// filename while hiding the extensionecho basename($path, \".php\");?>Output:geeksforgeeks");create(getIdByTitle(this.context,"File Handling"),"PHP | chmod( ) Function","The chmod() function in PHP is an inbuilt function which is used to change the mode of a specified file to a specific mode given by the user.The chmod() function changes the permissions of the specified file and returns true on success and false on failure.Syntax:bool chmod ( string $filename, int $mode )Parameters Used:The chmod() function in PHP accepts two parameters which are filename and mode.$filename: It specifies the file whose permissions needs to be changed.$mode: It is used to specify the new permissions.The $mode parameters consist of four numeric values where the first value is always zero, the second value specifies permissions for the owner, the third value specifies permissions for the owner’s user group and the fourth value specifies permissions for everybody else.There are three possible values and to set multiple permissions the following values can be added.1 = execute permissions2 = write permissions4 = read permissionsReturn Value: It returns true on successful execution and false on failure.Errors And Exception:The chmod() function in PHP doesn’t works for remote files. It only works on files which are accessible by the server’s filesystem.If quotes are used around the $mode paarmeter, for example chmod (file.txt, “0744”), then PHP will do an implicit conversion to integer data type.Examples:  Input : chmod(\"gfg.txt\", 0600);  Output : true    Input : chmod(\"gfg.txt\", 0644);  Output : true    Input : chmod(\"gfg.txt\", 0755);  Output : trueBelow programs illustrate the chmod() function in PHP:Program 1:<?php// Read and write permission to ownerchmod(\"gfg.txt\", 0600);?>Output:trueProgram 2:<?php// Read and write permission to owner,// and read permission to everyone elsechmod(\"gfg.txt\", 0644);?>Output:trueProgram 3:<?php// All permissions to owner, read and// execute permissions to everyone elsechmod(\"gfg.txt\", 0755);?>Output:true");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getRealPath() Function","The SplFileInfo::getRealPath() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get absolute file path.Syntax:int SplFileInfo::getRealPath( void )Parameters: This function does not accept any parameter.Return values: This function returns the path to the file on success.Below Programs illustrate the SplFileInfo::getRealPath() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo getRealPath function$file = new SplFileInfo(\"gfg.txt\");$gfg = $file->getRealPath();// Print real path if existvar_dump($gfg . \"</br>\");$file = new SplFileInfo(__FILE__);$gfg = $file->getRealPath();// Print real path if existvar_dump($gfg);?>Output:string(26) \"/var/www/html/gfg.txt  \" string(22) \"/var/www/html/cons.php\"Program 2:<?php// PHP program to use array to check multiple files$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg_code.cpp\",    \"/var/www/html/gfg1.php\",    \"dummy.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    $gfg = $file->getRealPath();    // Print real path if exist    var_dump($gfg. \"</br>\");}?>Output:  string(49) \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php  \" string(38) \"/home/rajvir/Desktop/gfg_code.cpp  \" string(5) \"  \" string(28) \"/var/www/html/dummy.php");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getType() Function","The SplFileInfo::getType() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the file type.Syntax:string SplFileInfo::getType( void )Parameters: This function does not accept any parameter.Return values: This function returns the type of file i.e. link, dir or file.Below Programs illustrate the SplFileInfo::getType() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::getType() function$file = new SplFileInfo(dirname(\"gfg.txt\"));$gfg = $file->getType();// Print resultprint($gfg . \"</br>\");$file = new SplFileInfo(__FILE__);$gfg = $file->getType();// Print resultprint($gfg);?>Output:  dir  fileProgram 2:<?php// PHP program to use array to check// multiple files$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop\",    \"/var/www/html/\",    \"frame.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    // Print result    echo $file->getType() . \"</br>\";}?>Output:  file  dir  dir  file");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo isDir() Function","The SplFileInfo::isDir() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to check the file is a directory or not.Syntax:bool SplFileInfo::isDir( void )Parameters: This function does not accept any parameter.Return values: This function returns true if file is a directory otherwise return false.Below Programs illustrate the SplFileInfo::isDir() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::isDir() function$file = new SplFileInfo(dirname(\"gfg.txt\"));$gfg = $file->isDir();// Print resultvar_dump($gfg);echo \"</br>\";$file = new SplFileInfo(__FILE__);$gfg = $file->isDir();// Print resultvar_dump($gfg);?>Output:  bool(true)  bool(false)Program 2:<?php// PHP program to use array to check// multiple files$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop\",    \"/var/www/html/\",    \"frame.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    $gfg = $file->isDir();    // Print result    var_dump($gfg);    echo \"</br>\";}?>Output:  bool(false)  bool(true)  bool(true)  bool(false)");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo isWritable() Function","The SplFileInfo::isWritable() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to check the file is writable or not.Syntax:bool SplFileInfo::isWritable( void )Parameters: This function does not accept any parameter.Return values: This function returns true on success or false on failure.Note: Set the file permission before executing the program.Below Programs illustrate the SplFileInfo::isWritable() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::isWritable() function$file = new SplFileInfo(\"gfg.txt\");$gfg = $file->isWritable();// Print resultvar_dump($gfg);echo \"</br>\";$file = new SplFileInfo(__FILE__);$gfg = $file->isWritable();// Print resultvar_dump($gfg);?>Output:  bool(false)  bool(true)Program 2:<?php// PHP program to use array to check// multiple files$GFG = array(    \"dummy.php\",    \"gfg_code.cpp\",    \"html/\",    \"frame.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    $gfg = $file->isWritable();    // Print result    var_dump($gfg);    echo \"</br>\";}?>Output:  bool(true)  bool(false)  bool(true)  bool(false)");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getSize( ) Function","The SplFileInfo::getSize() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get file size in bytes.Syntax:int SplFileInfo::getSize( void )Parameters: This function does not accept any parameter.Return values: This function returns the size of file in bytes.Below Programs illustrate the SplFileInfo::getSize() function in PHP.Program 1:<?php// PHP Program to illustrate// Splfileinfo getSize function$file = new SplFileInfo(\"gfg.txt\");$gfg = $file->getSize();// Print real path if existprint($gfg . \"</br>\");$file = new SplFileInfo(__FILE__);$gfg = $file->getSize();// Print real path if existprint($gfg);?>Output:  120  144Program 2:<?php// PHP program to use array to check multiple files$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg_code.cpp\",    \"/var/www/html/gfg.txt\",    \"frame.php\");foreach ($GFG as &$file_name) {    // create new SplFile Object    $file = new SplFileInfo($file_name);    $gfg = $file->getSize();    // Print real path if exist    print($gfg. \"</br>\");}?>Output:  893  5  51  291");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo isLink() Function","The SplFileInfo::isLink() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to check the given file is a link or not.Syntax:bool SplFileInfo::isLink( void )Parameters: This function does not accept any parameter.Return values: This function returns true on success or false on failure.Below Programs illustrate the SplFileInfo::isLink() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::isLink() function$file = new SplFileInfo(\"gfg.txt\");$gfg = $file->isLink();// Print resultvar_dump($gfg);echo \"</br>\";$file = new SplFileInfo(__FILE__);$gfg = $file->isLink();// Print resultvar_dump($gfg);?>Output:  bool(false)  bool(false)Program 2:<?php// PHP program to use array to check// multiple files$GFG = array(    \"dummy.php\",    \"gfg_code.cpp\",    \"html/\",    \"frame.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    $gfg = $file->isLink();    // Print result    var_dump($gfg);    echo \"</br>\";}?>Output:  bool(false)  bool(false)  bool(false)  bool(false)");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo openFile() Function","The SplFileInfo::openFile() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to gets an SplFileObject object for the file.Syntax:bool SplFileInfo::openFile( $mode, $path, $context)Parameters: This function accept three parameters as mention above and describe below.$mode: Specify the mode of opening file.$path: If set it to TRUE, the filename is searched within path.$context: Specifies the manual path for description.Return values: This function returns opened file as an SplFileObject object.Note: make sure the file is readable or writable.Below Program illustrates the SplFileInfo::openFile() function in PHP:Program:<?php// PHP Program to illustrate// Splfileinfo::openFile function// Make sure file is writable$file = new SplFileInfo(\"gfg.txt\");$obj = $file->openFile(\'a\');$obj->fwrite(\"Append...GeeksforGeeks to the file...\");?>Output:Before Appending the file:After Appending the file:");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo isExecutable() Function","The SplFileInfo::isExecutable() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to check if the file is executable or not.Syntax:bool SplFileInfo::isExecutable( void )Parameters: This function does not accept any parameter.Return values: This function returns true if file is a directory otherwise return false.Below Programs illustrate the SplFileInfo::isExecutable() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo isExecutable function$file = new SplFileInfo(dirname(\"gfg.txt\"));$gfg = $file->isExecutable();// Print resultvar_dump($gfg);echo \"</br>\";$file = new SplFileInfo(__FILE__);$gfg = $file->isExecutable();// Print resultvar_dump($gfg);?>Output:  bool(true)  bool(false)Program 2:<?php// PHP program to use array to check// multiple files$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg_code.cpp\",    \"/var/www/html/\",    \"frame.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    $gfg = $file->isExecutable();    // Print result    var_dump($gfg);    echo \"</br>\";}?>Output:  bool(false)  bool(true)  bool(true)  bool(false)");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo isReadable() Function","The SplFileInfo::isReadable() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to check the given file is a readable or not.Syntax:bool SplFileInfo::isReadable( void )Parameters: This function does not accept any parameter.Return values: This function returns true on success or false on failure.Note: Set the file permission before executing the program.Below Programs illustrate the SplFileInfo::isReadable() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::isReadable() function$file = new SplFileInfo(\"gfg.txt\");$gfg = $file->isReadable();// Print resultvar_dump($gfg);echo \"</br>\";$file = new SplFileInfo(__FILE__);$gfg = $file->isReadable();// Print resultvar_dump($gfg);?>Output:  bool(false)  bool(true)Program 2:<?php// PHP program to use array to check// multiple files$GFG = array(    \"dummy.php\",    \"gfg_code.cpp\",    \"html/\",    \"frame.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    $gfg = $file->isReadable();    // Print result    var_dump($gfg);    echo \"</br>\";}?>Output:  bool(true)  bool(false)  bool(true)  bool(false)");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getPerms() Function","The SplFileInfo::getPerms() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the permission of the file.Syntax:int SplFileInfo::getPerms( void )Parameters: This function does not accept any parameter.Return values: This function returns the permission of file.Below Programs illustrate the SplFileInfo::getPerms() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::getPerms() function$file = new SplFileInfo(\"gfg.txt\");$gfg = $file->getPerms();// Print permission in octal formecho substr(sprintf(\'%o\', $gfg), -3);?>  644Example 2:<?php// PHP program to use array to check multiple files$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg_code.cpp\",    \"/var/www/html/gfg.php\",    \"dummy.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    $gfg = $file->getPerms();    // Print permission in octal form    echo substr(sprintf(\'%o\', $gfg), -3) . \"</br>\";}?>Output:  644  604  777  644");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getInode() Function","The SplFileInfo::getInode() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the inode number for the filesystem object.Syntax:int SplFileInfo::getInode( void)Parameters: This function does not accept any parameter.Return Value: This function returns inode number for the filesystem object.Below programs illustrate the SplFileInfo::getInode() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::getInode() function// Create new SPlFileInfo Object$file = new SplFileInfo(\"gfg.txt\");// Print resultprint_r($file->getInode());?>Output:  265494Program 2:<?php// PHP Program to illustrate// Splfileinfo::getInode() function// Create new SPlFileInfo Object$file = new SplFileInfo(__FILE__);// print resultprint_r($file->getInode());?>Output:  4365503");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getBasename() Function","The SplFileInfo::getBasename() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the base name of the file.Syntax:string SplFileInfo::getBasename( $suffix )Parameters: This function accepts single parameter $suffix which is optional. It is used to specify the base name.Return Value: This function returns the base name without path information.Below programs illustrate the SplFileInfo::getBasename() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::getBasename() function// Create new SPlFileInfo Object$file = new SplFileInfo(\'html/gfg.txt\');// Print resultvar_dump($file->getBasename());?>Output:  string(7) \"gfg.txt\"Program 2:<?php// PHP program to use array to check// multiple files$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg.txt\",    \"/var/www/html/gfg.php\",    \"demo.php\");foreach ($GFG as &$file) {    // Create new SPlFileInfo Object    $file = new SplFileInfo($file);    // Print result    var_dump($file->getBasename());}?>Output:  string(9) \"dummy.php\"  string(7) \"gfg.txt\"  string(7) \"gfg.php\"  string(8) \"demo.php\"");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getOwner() Function","The SplFileInfo::getOwner() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the the owner of the file. The owner ID is returns in the numerical format.Syntax:int SplFileInfo::getOwner( void )Parameters: The function does not accept any parameter.Return Value: This function returns the owner ID in numerical form.Below programs illustrate the SplFileInfo::getOwner() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::getOwner() function// Create new SPlFileInfo Object$file = new SplFileInfo(\'gfg.txt\');// Print resultprint_r(posix_getpwuid($file->getOwner()));?>Output:Array (       [name] => root       [passwd] => x       [uid] => 0       [gid] => 0       [gecos] => root       [dir] => /root        => /bin/bash   )Program 2:<?php// PHP Program to illustrate// Splfileinfo::getOwner() function// Create new SPlFileInfo Object$file = new SplFileInfo(__FILE__);// Print resultprint_r(posix_getpwuid($file->getOwner()));?>Output:  Array  (      [name] => www-data      [passwd] => x      [uid] => 33      [gid] => 33      [gecos] => www-data      [dir] => /var/www       => /usr/sbin/nologin  )");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo::getPathInfo() Function","The SplFileInfo::getPathInfo() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get an SplFileInfo object for the path.Syntax:SplFileInfo::getPathInfo( $class )Parameters: This function accepts single parameter $class which is optional. It is used to specify the name of SplFileInfo derived class name.Return Value: This function returns the SplFileInfo object for the parent path of the file.Below programs illustrate the SplFileInfo::getPathInfo() function.Program 1:<?php// PHP Program to illustrate// Splfileinfo getMTime function$file = new SplFileInfo(\'/var/www/html/gfg.php\');$info = $file->getPathInfo();print_r($info);?>Output:  SplFileInfo Object  (      [pathName:SplFileInfo:private] => /var/www/html      [fileName:SplFileInfo:private] => html  )Program 2:<?php// Use array to check multiple// files path$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg.txt\",    \"/var/www/html/gfg.php\",    \"dummy.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    // Print result    $info = $file->getPathInfo();    print_r($info);    echo \"</br>\";}?>Output:  SplFileInfo Object  (      [pathName:SplFileInfo:private] => /home/rajvir/Desktop/GeeksforGeeks      [fileName:SplFileInfo:private] => GeeksforGeeks  )SplFileInfo Object  (      [pathName:SplFileInfo:private] => /home/rajvir/Desktop      [fileName:SplFileInfo:private] => Desktop  )SplFileInfo Object  (      [pathName:SplFileInfo:private] => /var/www/html      [fileName:SplFileInfo:private] => html  )SplFileInfo Object  (      [pathName:SplFileInfo:private] => .      [fileName:SplFileInfo:private] => .  )");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getATime() Function","The SplFileInfo::getATime() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the last access time of the file.Syntax:int SplFileInfo::getATime( void )Parameters: This function does not accept any parameter.Return Value: This function returns the last access time of the file.Below programs illustrate the SplFileInfo::getATime() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::getATime() function// Create new SPlFileInfo Object$file = new SplFileInfo(\'demo1.php\');// Print resultecho (date(\"F d Y H:i:s.\", $file->getATime()));?>Output:  October 14 2018 03:24:12.Program 2:<?php// PHP program to use array to check multiple files$GFG = array(    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg.txt\",    \"/var/www/html/gfg.php\",    \"demo.php\");foreach ($GFG as &$file) {    // Create new SPlFileInfo Object    $file = new SplFileInfo(\'demo1.php\');    // Print result    echo date(\"F d Y H:i:s.\", $file->getATime()) . \"</br>\";}?>Output:  October 14 2018 03:24:12.  October 14 2018 03:24:12.  October 14 2018 03:24:12.  October 14 2018 03:24:12.");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getExtension() Function","The SplFileInfo::getExtension() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the file extension.Syntax:string SplFileInfo::getExtension( void )Parameters: This function does not accept any parameter.Return Value: This function returns the string containing the extension of file.Below programs illustrate the SplFileInfo::getExtension function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo getExtension function// Create new SPlFileInfo Object$file = new SplFileInfo(\"gfg.php\");// Print resultecho $file->getExtension();?>Output:  phpProgram 2:<?php// PHP program to use array to check// multiple files$GFG = array(    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg.txt\",    \"/var/www/html/gfg.php\",    \"demo.c\");foreach ($GFG as &$file_name) {    // Create new SPlFileInfo Object    $file = new SplFileInfo($file_name);    // Print result    echo $file->getExtension() . \"</br>\";}?>Output:  phptxtphpc");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getFilename() Function","The SplFileInfo::getFilename() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the file name.Syntax:string SplFileInfo::getFilename( void )Parameters: This function does not accept any parameter.Return Value: This function returns a string which contains the filename.Below programs illustrate the SplFileInfo::getFilename() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::getFilename() function// Create new SPlFileInfo Object$file = new SplFileInfo(\"gfg.txt\");// Print resultecho( $file->getFilename());?>Output:  gfg.txtProgram 2:<?php// PHP program to use array to check// multiple files$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg.txt\",    \"/var/www/html/gfg.php\",    \"demo.c\");foreach ($GFG as $file_name) {    // Create new SPlFileInfo Object    $file = new SplFileInfo($file_name);    // Print result    echo($file->getFilename());    echo \"</br>\";}?>Output:  dummy.phpgfg.txtgfg.phpdemo.cReference :http://php.net/manual/en/splfileinfo.getfilename.php");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getGroup() Function","The SplFileInfo::getGroup() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the file group.Syntax:int SplFileInfo::getGroup( void)Parameters: This function does not accept any parameter.Return Value: This function returns an integer which contains group id.Below programs illustrate the SplFileInfo::getGroup() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo getExtension function// Create new SPlFileInfo Object$file = new SplFileInfo(\"gfg.txt\");// Print resultprint_r($file->getGroup());?>Output:  0Program 2:<?php// PHP program to use array to check multiple files$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg.txt\",    \"/var/www/html/gfg.php\",    \"demo.c\");foreach ($GFG as $file_name) {    // Create new SPlFileInfo Object    $file = new SplFileInfo($file_name);    // Print result    print_r($file->getGroup());}?>Output:  1000");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getMTime() Function","The SplFileInfo::getMTime() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to return the last modified time. The returned time in Unix timestamp.Syntax:int SplFileInfo::getMTime( void )Parameters: This function does not accept any parameter.Return Value: This function returns the last modified time for the file, in a Unix timestamp.Below programs illustrate the SplFileInfo::getMTime() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::getMTime() function// Create new SPlFileInfo Object$file = new SplFileInfo(\"gfg.txt\");// Print resultecho date(\"F d Y H:i:s.\", $file->getMTime()) . \"</br>\";?>Output:  October 26 2018 18:11:48.Program 2:<?php// PHP program to use array to check// multiple files$GFG = array (    \"dummy.php\",    \"gfg.txt\",    \"dummy.php\",    \"frame.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    // Print result    echo date(\"F d Y H:i:s.\", $file->getMTime()) . \"</br>\";}?>Output:  October 26 2018 18:11:48.  October 25 2018 19:56:04.  October 26 2018 18:11:48.  October 25 2018 21:05:44.");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getCTime() Function","The SplFileInfo::getCTime() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the inode change time. The returned time is in Unix timestamp format.Syntax:int SplFileInfo::getCTime( void )Parameters: This function does not accept any parameter.Return Value: This function returns the time in Unix timestamp format.Below programs illustrate the SplFileInfo::getCTime() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::getCTime() function$file = new SplFileInfo(\"gfg.txt\");$gfg = $file->getCTime();echo date(\"F d Y H:i:s.\", $gfg);?>Output:  October 26 2018 18:11:48.Program 2:<?php// PHP program to use array to check// multiple files$GFG = array (    \"dummy.php\",    \"frame.php\",    \"gfg.txt\",    \"dummy.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    // Print result    $gfg = $file->getCTime();    echo date(\"F d Y H:i:s.\", $gfg). \"</br>\";}?>Output:  October 26 2018 18:11:48.  October 25 2018 21:05:44.  October 25 2018 19:56:04.  October 26 2018 18:11:48.");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getPathname() Function","The SplFileInfo::getPathname() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to get the path of file.Syntax:string SplFileInfo::getPathname( void )Parameters: This function does not accept any parameter.Return Value: This function returns the path of the file.Below programs illustrate the SplFileInfo::getPathname() function in PHP:Program 1:<?php// PHP Program to illustrate// SplFileInfo::getPathname() function$file = new SplFileInfo(\'/var/www/html/gfg.php\');$info = $file->getPathname();print_r($info);?>Output:  /var/www/html/gfg.phpProgram 2:<?php// PHP program to use array to check// multiple files path$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg.txt\",    \"/var/www/html/gfg.php\",    \"dummy.php\");foreach ($GFG as &$file_name) {     // Create new SplFile Object     $file = new SplFileInfo($file_name);    // Print result    $info = $file->getPathname();    print_r($info);    echo \"</br>\";}?>Output:  /home/rajvir/Desktop/GeeksforGeeks/dummy.php/home/rajvir/Desktop/gfg.txt/var/www/html/gfg.phpdummy.php");create(getIdByTitle(this.context,"File Handling"),"PHP | SplFileInfo getPath() Function","The SplFileInfo::getPath() function is an inbuilt function of Standard PHP Library (SPL) in PHP which is used to return the path without filename.Syntax:string SplFileInfo::getPath( void )Parameters: The function does not accept any parameter.Return Value: This function returns the path of file excluding the file name.Below programs illustrate the SplFileInfo::getPath() function in PHP:Program 1:<?php// PHP Program to illustrate// Splfileinfo::getPath() function// Create new SPlFileInfo Object$file = new SplFileInfo(\"html/gfg.txt\");// Print resultecho $file->getPath();?>Output:  htmlProgram 2:<?php// PHP program to check multiple files path$GFG = array (    \"/home/rajvir/Desktop/GeeksforGeeks/dummy.php\",    \"/home/rajvir/Desktop/gfg.txt\",    \"/var/www/html/gfg.php\",    \"dummy.php\");foreach ($GFG as &$file_name) {    // Create new SplFile Object    $file = new SplFileInfo($file_name);    // Print result    echo $file->getPath() . \"</br>\";}?>Output:  /home/rajvir/Desktop/GeeksforGeeks/home/rajvir/Desktop/var/www/html");
    }

    private void inputAndOuputArticles()
    {
        create(getIdByTitle(this.context,"Input & Output"),"PHP | Output Buffering","The PHP Language is an interpreted language, i.e. it is executed statement after statement. By default one characteristic of PHP makes it send HTML as chunks as soon as it is generated by executing the statements; this characteristic makes the loading of the webpage granular and the loading time span may appear in a haphazard manner. An Example of the following can be the loading time of a website that prevents adblocker or other similar applications, where the content loads first and then it shows the notification that says to disable the adblocker to see the content.This is where Output Buffering comes into play. With using output buffering the generated HTML gets stored in a buffer or variable and is sent to the buffer to render after the execution of the last statement in the PHP script. This is a significant increase in performance as well as adds aesthetic value to the webpage. Following are few advantages of using Output Buffering:Advantages of Output BufferingEnabling output buffering, the developer decreases the number of interactions between server and client browser as the whole HTML is sent at once, thus for bigger projects the output buffering provides a much more time efficient approach.As the output buffer stores the whole HTML as a string, we can manipulate the HTML with all the string methods or custom methods thus providing a much more flexibility in the rendering the content.We can also apply various compression methods thus creating a much more efficient render.Setting cookies and working with sessions gets easier using Output buffering as the header information is sent without the rest of the content of the page.Important points to noteBeing a moderately advanced topic, the output buffering is not enabled by default.Output Buffering is able to provide a faster, more secure, more flexible, less redundant approach to render. Output Buffering also allows some advanced functionalities such as minimization, reducing database calls. Output Buffering is apt for cookies and sessions.PHP provides an API to enable and access the output buffer. The methods will be discussed in further articles.");create(getIdByTitle(this.context,"Input & Output"),"PHP | disk_free_space( ) Function","The disk_free_space() function in PHP is an inbuilt function which is used to return the amount of free space in a specified directory. The disk_free_space() function denotes the free space in bytes.It returns the available space on a filesystem or on a disk partition. The disk_free_space() function returns the number of bytes available on the corresponding filesystem or disk partition for a specified directory inputted as a string.Syntax:float disk_free_space ( $directory )Parameters: The disk_free_space() function in PHP accepts one parameter which is $directory. This parameter specifies the directory which has to be checked.Return Value: It returns the available space on a filesystem or on a disk partition.Errors And Exception:The disk_free_space() function in PHP may give improper results if a file name is given as parameter instead of a directory.The disk_free_space() function in PHP doesn’t works for remote files.It only works on files which are accessible by the server’s filesystem.Examples:  Input : disk_free_space(\"D:\");  Output : 10969328844    Input : disk_free_space(\"C:\");  Output : 10969327231Below program illustrates the disk_free_space() function:Program 1:<?php// specifying directory to check for free spaceecho disk_free_space(\"D:\");?>Output:10969328844Program 2:<?php// specifying directory to check for free spaceecho disk_free_space(\"C:\");?>Output:10969327231");create(getIdByTitle(this.context,"Input & Output"),"PHP | Format Specifiers","Strings are one of the most used Datatype arguably irrespective of the programming language. Strings can be either hardcoded (specified directly by the developer) or formatted (where the basic skeleton is specified and the final string is obtained by incorporating values of other variables). Formatted strings can be defined as a set of segments where each segment may contain an integer, float or even another string.Formatted strings use Format Specifiers to create the basic structure of the string. Format Specifiers are predefined character sequence that can be used to define the datatype to be stored or displayed as well a how any given value should be formatted i.e. precision, padding etc. Format Specifiers, in general, begin with a percentile symbol or ‘%’ followed by a character sequence that defines the datatype and desired format. When iterating over a format if any format specifier is encountered it is understood by the compiler/interpreter that there exists a corresponding directive whose value is to be formatted and used. Hence, a string may contain no format specifier at all, but if it does at least the same number of directives should be resent as well. In case of excessive directives, some languages just ignore the unrequired and let it execute with a warning.The following is a brief discussion of the Formats and Datatypes that can be specified in PHP. Each one of them is implemented with a preceding percentile symbol or ‘%’.Formatting ValuesSign specifier can be used to forcibly display the sign (- or +) to be used on a number. By default, only the – sign is displayed on negative numbers. Using this specifier positive numbers are shown with a preceding +. This can be achieved using a + symbol and can be implemented only upon numeric values. Example,  %+d    // Specify the integer along with it\'s sign (+ or -).Padding specifier can be used to specify what character will be used for padding the results to any defined string size. By default, spaces are used as padding. An alternate padding character can be specified by prefixing it with a single quote or ‘. Example,  %\'0d    // Pad with 0s to achieve the right length.Alignment specifier can be used to specify the alignment of the result i.e. whether left-justified or right-justified. By default it is right-justified. Using a – character makes it left-justified. Example,  %-s    // Specifies the alignment as left-justified.Width specifier can be used to specify the minimum number of characters to be present in the result itself. It can be specified using any number denoting the minimum width. It is seen in use with padding specifier the most. Example,           // Specifies there should be at least 5 digits,  %\'05d    // if less, then 0s are filled to get the desired result.Precision Specifier can be used to specify the precision while working with real numbers. A period or ‘.’ followed by an optional decimal digit string that refers to the decimal digits to be displayed after the decimal.When using this specifier on a string, it specifies the maximum character limit on the string.Example,  %.5f    // Defines Real Number Precision.  %.2s    // Maximum Character to be allowed in a string.Datatypes% : To display %. No directive is required.b : The directive refers to an integer and displayed as a binary number.c : The directive refers to an integer and displayed as the corresponding ASCII character.d : The directive refers to an integer and displayed as a decimal number.e : The directive refers to scientific notation (e.g. 2.12e+3).E : Alias of ‘e’.f : The directive refers to a float and displayed as a real number (locale aware).F : The directive refers to a float and displayed as a real number (non-locale aware).o : The directive refers to an integer and displayed as an octal number.s : The directive is treated and displayed as a string.u : The directive refers to an integer and displayed as an unsigned decimal number.x : The directive refers to an integer and displayed as a hexadecimal number (with lowercase letters).X : The directive refers to an integer and displayed as a hexadecimal number (with uppercase letters).The Following code illustrates the working of different format specifiers:<?php// PHP program to illustrate Working// of different Format Specifiers// Creating Dummy Variables$numValue = 5;$strValue = \"GeeksForGeeks\";// Using Sign Specifier.printf(\"Signed Number: %+d\\n\",$numValue);// Padding and Width Specifier.printf(\"Padding and Width\\n%\'03d\\n%\'03d\\n\",                    $numValue,$numValue+10);// Precision Specifier.printf(\"Precision: %.5f %.5s\\n\", $numValue, $strValue);// Different DataTypes.// Integer and Percentile.printf(\"Percentage: %d%%\\n\",$numValue);// Binary Octal and Hexadecimal Representation.printf(\"Binary: %b Octal: %o Hexadecimal: %x\\n\",        $numValue+10,$numValue+10,$numValue+10);// Character Representation.printf(\"Character: %c\\n\",$numValue+60);// Strings.printf(\"String: %s\\n\",$strValue);// Real Numbers.printf(\"RealNumber: %f\\n\",1/$numValue);// Scientific Numerical Representation.printf(\"Scientific Representation:%e\\n\",$numValue+100);?>Output:  Signed Number: +5  Padding and Width  005  015  Precision: 5.00000 Geeks  Percentage: 5%  Binary: 1111 Octal: 17 Hexadecimal: f  Character: A  String: GeeksForGeeks  RealNumber: 0.200000  Scientific Representation:1.050000e+2");create(getIdByTitle(this.context,"Input & Output"),"PHP | ob_start() Function","Let’s take a quick recap. PHP is an interpreted language thus each statement is executed one after another, therefore PHP tends to send HTML to browsers in chunks thus reducing performance. Using output buffering the generated HTML gets stored in a buffer or a string variable and is sent to the buffer to render after the execution of the last statement in the PHP script.But Output Buffering is not enabled by default. In order to enable the Output Buffering one must use the ob_start() function before any echoing any HTML content in a script.Syntax:  bool ob_start ()Parameters: The function can accept a bunch of optional parameters as follows:Callback function: This is an optional parameter that expects a function that takes the contents of the output buffer and returns a string that is to be sent to the browser for rendering. The callback function is generally used for compressing the HTML content.Chunk size: This is another optional parameter that sets the output buffer size of provided size and outputs as soon as the buffer is either full or exceeded.Flags: This is another optional parameter that accepts a bitmask to control the operations that can be implemented on the output buffer. This parameter is passed to restrict access. The Default permissions gives access to clean, flush and removal of the buffer.Return Type: This function returns TRUE on success otherwise FALSE.Below program illustrates the working of ob_start() in PHP:<?php// PHP code to illustrate the working//  of ob_start() Functionfunction callback($buffer){    // Return Everything in CAPS.    return (strtoupper($buffer));}ob_start(\"callback\");echo \"Hello Geek!\";ob_end_flush();?>Output:  HELLO GEEK!Important points to note:Enables Output Buffering.Output Buffering flags can be of four types PHP_OUTPUT_HANDLER_CLEANABLE(only clean), PHP_OUTPUT_HANDLER_FLUSHABLE(only flush), PHP_OUTPUT_HANDLER_REMOVABLE(only remove), PHP_OUTPUT_HANDLER_STDFLAGS(allowed every operation).Output buffers are stackable, thus nested ob_start() methods are allowed and works as desired if they are closed/flushed sequentially.");create(getIdByTitle(this.context,"Input & Output"),"PHP | ob_end_flush(), ob_end_clean() Functions","In the previous article on ob_start(), we learned how to start the output buffer; now we need to end the output buffering and send the whole HTML to the browser to render. We can do this by the help of functions ob_end_flush() and ob_end_clean().ob_end_flush() FunctionSyntax:  bool ob_end_flush ()Parameters: The function doesn’t take any parameter.Return Type: This function sends the HTML stored to browser and turns off output buffering. On success, TRUE is returned otherwise FALSE.ob_end_clean() FunctionSyntax:  bool ob_end_clean()Parameters: The function doesn’t take any parameter.Return Type: This function cleans the HTML stored and turns off output buffering. On success, TRUE is returned otherwise FALSE.Below program illustrates the working of ob_end_flush() and ob_end_clean() in PHP:<?php// PHP code to illustrate the working of// ob_end_flush() and ob_end_clean()// ob_end_flush()ob_start();echo \"Hello Geek!\"; //This will get printed.ob_end_flush();// ob_end_clean()ob_start();echo \"Hi Geek!\";  //This will not get printed.ob_end_clean();?>Output:  Hello Geek!Important points to note:ob_end_flush() or ob_end_clean() are not necessary functions i.e. if a developer ever uses ob_start() without using the mentioned functions the webpage will appear to be working correctly displaying every content, but what happens in the back is nowhere near optimized. When PHP encounters ob_start() it allocates a new output buffer and concatenates every HTML that appears after it, if there is no terminating function then upon reaching the end the stored data is sent to the browser as a default action. Developers can create optimized web pages by terminating the output buffering when not required thus keeping the global stack clear.There raises a question, if we use ob_end_clean() to clean the whole output buffer then why even use output buffering. We use ob_end_clean() with ob_get_contents() which first gets the contents as a string and then the output buffer is cleaned and turned off, this clears the global stack and keeps the whole content in a variable to be processed further.");create(getIdByTitle(this.context,"Input & Output"),"Output of PHP programs | Set 1 (Regular Expressions)","Predict the output of following PHP programs:Question 1<?php    echo str_pad(\"Welcome\", 5).\" to GeeksforGeeks.\";?>Options:WelcomeWelcomeWelcomeWelcomeWelcome to GeeksforGeeks.to GeeksforGeeks. WelcomeWelcomeWelcomeWelcomeWelcometo GeeksforGeeks. WelcomeWelcome to GeeksforGeeks.Output:  Welcome to GeeksforGeeks.Explanation: The str_pad() function pads a string with a specified number of characters.Question 2<?php    $author = \"GeeksforGeeks\";    $author = str_replace(\"e\",\"i\",$author);    echo \"I am intern at $author.\";?>Options:I am intern at GeeksforGeeks.I am intirn at GiiksforGiiks.I am intern at GiiksforGiiks.ErrorOutput:  I am intern at GiiksforGiiks.Explanation: The str_replace() function case sensitively replaces all instances of a string with another.Question 3<?php    $GfG = \"GeeksforGeeks\";    echo ltrim(strstr($GfG, \"f\"),\"f\");?>Options:GeeksforGeeksGeeksGeeksforGeeksOutput:  orGeeksExplanation: The strstr() function returns the remainder of a string beginning with the first occurrence of a predefined string.Question 4<?php    $username = \"sagarshUkla785\";    if (ereg(\"([^a-z])\",$username))        echo \"Not a valid username!\";    else        echo \"Valid username!\";?>Options:ErrorNot a valid username!Valid username!No Output is returnedOutput:  Not a valid username!Explanation: Because the provided username is not all lowercase, ereg() will not return FALSE (instead returning the length of the matched string, which PHP will treat as TRUE), causing the message to output.Question 5<?php    $GfG = \"Hello\\tWelcome to\\nGeeksforGeeks.\";    print_r(split(\"[\\n\\t]\",$GfG));?>Options:Hello Welcome to GeeksforGeeks.Array ( [0] => Welcome to [1] => GeeksforGeeks. )Array ( [0] => Hello [1] => Welcome to [2] => GeeksforGeeks. )[0] => Hello [1] => Welcome to [2] => GeeksforGeeks.Output:  [0] => Hello [1] => Welcome to [2] => GeeksforGeeks.Explanation: The split() function divides a string into various elements, with the boundaries of each element based on the occurrence of a defined pattern within the string.Question 6<?php    $languages = array(\"C++\", \"JAVA\", \"PYTHON\", \"SCALA\");    $language = preg_grep(\"/^S/\", $languages);    print_r($language);?>Options:Array ( [0] => C++ [1] => JAVA [2] => PYTHON [3] => SCALA )Array ( [3] => SCALA )Array ( [1] => JAVA )Array ( [0] => C++ )Output:  Array ( [3] => SCALA )Explanation: This function is used to search an array for languages beginning with S.Question 7<?php    $title = \"i\'m intern at geeksforGeeks.\";    echo ucwords($title);?>Options:I’m Intern At GeeksforGeeksI’m intern at geeksforGeeksi’m Intern At GeeksforGeeksi’m intern at geeksforGeeksOutput:  I\'m Intern At GeeksforGeeks.Explanation: The ucwords() function capitalizes the first letter of each word in a string. Its prototype follows: string ucwords(string str).");create(getIdByTitle(this.context,"Input & Output"),"Output of PHP programs | Set 2 ( Filters )","Predict the output of the following PHP programs:Question 1<?php    $num = \"123\";    if (!filter_var($num, FILTER_VALIDATE_INT))        echo(\"Hello\");    else        echo(\"Welcome to GeeksforGeeks\");?>Options:No output is returnedHelloWelcome to GeeksforGeeksErrorOutput:  Welcome to GeeksforGeeksExplanation: filter_var() – Filters a single variable with a specified filter.Question 2<?php    $var=300;    $int_options = array(\"options\"=>array (\"min_range\"=>0, \"max_range\"=>256));    if (!filter_var($var, FILTER_VALIDATE_INT, $int_options))        echo(\"Hello\");    else        echo(\"Welcome to GeeksforGeeks\");?>Options:No output is returnedHelloWelcome to GeeksforGeeksErrorOutput:  HelloExplanation: Since the integer is “300” it is not in the specified range, and the output of the code above will be: “Integer is not valid”.Question 3<?php    $string = \"Welcomeêê to GeêêeksfoøørGeêêeks\";    $string = filter_var($string, FILTER_SANITIZE_EMAIL);    echo $string;?>Options:Welcomeêê to GeêêeksfoøørGeêêeksWelcomeee to GeeeeksfooorGeeeeksWelcomeê to GeêeksfoørGeêeksWelcometoGeeksforGeeksOutput:  WelcometoGeeksforGeeksExplanation: Sanitize is nothing but take away invalid characters or special characters so therefore the invalid characters like ê and ø and space will be removed.Question 4<?php    $value = \'GeeksforGeeks\';    $result = filter_var($value, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);?>Options:FALSETRUENo OutputERROROutput:  No OutputExplanation: There is an undocumented filter flag for FILTER_VALIDATE_BOOLEAN. The documentation implies that it will return NULL if the value doesn’t match the allowed true/false values. However this doesn’t happen unless you give it the FILTER_NULL_ON_FAILURE flag. Hence the output will be No Output.Question 5<?php    function GeeksforGeeks($string)    {        return str_replace(\"_\", \" \", $string);    }    $string = \"I_am_intern_at_GeeksforGeeks!\";    echo filter_var($string, FILTER_CALLBACK, array(\"options\"=>\"GeeksforGeeks\"));?>Options:I_am_intern_at_GeeksforGeeks!IaminternatGeeksforGeeks!I am intern at GeeksforGeeks!ErrorOutput:  I am intern at GeeksforGeeks!Explanation: The code above converts all “_” to white spaces. Call the filter_var() function with the FILTER_CALLBACK filter and an array containing our function.Question 6<?php    $num = \'123+abc-xyz*\';    $num = filter_var($num, FILTER_SANITIZE_NUMBER_INT);    echo $num?>Options:123+abc-xyz*abcxyz*123+-ErrorOutput:  123+-Explanation: filter_var() – with FILTER_SANITIZE_NUMBER_INT, Remove all characters except digits, +- and optionally.Question 7<?php    $num = \'123+-abc*\';    $res = filter_var($num, FILTER_SANITIZE_NUMBER_FLOAT);    echo $res?>Options:123+abc-xyz*abcxyz*123+-ErrorOutput:  123+-Explanation: filter_var() – with FILTER_SANITIZE_NUMBER_FLOAT, Remove all characters except digits, +- and optionally.");create(getIdByTitle(this.context,"Input & Output"),"Output of PHP programs | Set 3","Predict the output of below PHP programs:Question 1<?php    $number = array(0, 1, one, two, three, 5);    $num = preg_grep(\"/[0-5]/\", $number);    print_r($num);?>Options:Array([0]=>0 [1]=>1 [2]=>one [3]=>two [4]=>three [5]=>5)Array([2]=>one [3]=>two [4]=>three)Array([1]=> 1)Array([0]=>0 [1]=>1 [5]=>5)Output:  Array([0]=>0 [1]=>1 [5]=>5)Explanation: The preg_grep() function is used to search an array for specific patterns and then return a new array based on that filtering.Question 2<?php    $number = array(0, 1, one, two, three, 5);    $num = preg_grep(\"/[0-5]/\", $number, PREG_GREP_INVERT);    print_r($num);?>Options:Array([0]=>0 [1]=>1 [2]=>one [3]=>two [4]=>three [5]=>5)Array([2]=>one [3]=>two [4]=>three)Array([1]=> 1)Array([0]=>0 [1]=>1 [5]=>5)Output:  Array([2]=>one [3]=>two [4]=>three)Explanation: When we include PREG_GREP_INVERT, this will invert our data, so instead of outputting numbers it will output our non-numeric values.Question 3<?php    $name = \"I am intern at GeeksforGeeks.\";    if (preg_match(\"/at/\",$name))    echo \"My name is Sagar Shukla\";    else    echo \"My name is not Sagar Shukla\";?>Options:My name is Sagar ShuklaMy name is not Sagar ShuklaErrorNo OutputOutput:  My name is Sagar ShuklaExplanation: The code uses preg_match() to check for a keyword and replies based on whether it is true (1) or false (0).Question 4<?php    $name = \"I am intern at GeeksforGeeks.\";    if (preg_match(\"/was/\",$name))    echo \"My name is Sagar Shukla\";    else    echo \"My name is not Sagar Shukla\";?>Options:My name is Sagar ShuklaMy name is not Sagar ShuklaErrorNo OutputOutput:  My name is not Sagar ShuklaExplanation: The code uses preg_match to check for a keyword and replies based on whether it is true (1) or false (0).Question 5<?php    $str = \"I am intern at GeeksforGeeks\";    $find = array(\'/am/\');    $replace = array(\'was\');    echo preg_replace ($find, $replace, $str);?>Options:I am intern at GeeksforGeeksI was intern at GeeksforGeeksErrorNo OutputOutput:  I was intern at GeeksforGeeksExplanation: In the above program, am replaced with was as preg PHP function is used to do a find and replace on a string or an array.Question 6<?php    $str = \"I am intern at GeeksforGeeks\";    $find = array(\'/geeksforgeeks/\');    $replace = array(\'GEEKSFORGEEKS\');    echo preg_replace ($find, $replace, $str);?>Options:I am intern at GeeksforGeeksI am intern at GEEKSFORGEEKSErrorNo OutputOutput:  I am intern at GeeksforGeeksExplanation: GeeksforGeeks was not replaced because the preg_replace function is case sensitive. Therefore it treats GeeksforGeeks and geeksforgeeks differently.Question 7<?php    $line = \"Hello. Welcome to GeeksforGeeks!\";    $sen = preg_split(\'/\\./\', $line);    print_r($sen);?>Options:Hello. Welcome to GeeksforGeeks!Array([0]=> Hello. Welcome to GeeksforGeeks!)Array([0]=> Hello [1]=> Welcome to GeeksforGeeks! )ErrorOutput:  Array([0]=> Hello [1]=> Welcome to GeeksforGeeks! )Explanation: We use a ‘.’ period to split the data, therefor giving each sentence it’s own array entry.");create(getIdByTitle(this.context,"Input & Output"),"Output of PHP programs | Set 4","Predict the output of below PHP programs:Question 1<?php\"Welcome to GeeksforGeeks!\"?>Options:ErrorWelcome to GeeksforGeeks!NothingMissing semicolon errorOutput:  NothingExplanation: If you need to output something onto the screen you’ll need to use echo or print_r.Question 2<?phpprint_r \"I am intern at GeeksforGeeks.\"?>Options:ErrorI am intern at GeeksforGeeks.NothingMissing semicolon errorOutput:  ErrorExplanation: The statement should be print_r(‘I am intern at GeeksforGeeks.’) to print Hello world. Also if there is only one line then there is no requirement of a semicolon, but it is better to use it.Question 3<?phpecho \'GeeksforGeeks\';<html>GeeksforGeeks</html>?>Options:GeeksforGeeksGeeksforGeeks GeeksforGeeksGeeksforGeeksGeeksforGeeksSyntax ErrorOutput:  Syntax ErrorExplanation: Parse error: syntax error, unexpected ‘<‘ on line 2. You can not use the html tag inside php tags.Question 4<?phpEcho \"GeeksforGeeks1\";echo \" GeeksforGeeks2\";ECHO \" GeeksforGeeks3\";?>Options:GeeksforGeeks1 GeeksforGeeks2 GeeksforGeeks3GeeksforGeeks1GeeksforGeeks2GeeksforGeeks3ErrorGeeksforGeeks1 GeeksforGeeks3Output:  GeeksforGeeks1 GeeksforGeeks2 GeeksforGeeks3Explanation: In PHP, all user-defined functions, classes, and keywords (e.g. if, else, while, echo, etc.) are case-insensitive.Question 5<?php$color = \"green\";echo \"$color\";echo \"$COLOR\";echo \"$Color\";?>Options:greengreengreengreengreengreenErrorOutput:  greenExplanation: In PHP, all variables are case-sensitive.Question 6<?php # echo \"GeeksforGeeks\";echo \"# GeeksforGeeks\";?>Options:# GeeksforGeeksGeeksforGeeks# GeeksforGeeksGeeksforGeeksErrorOutput:  # GeeksforGeeksQuestion 7<?phpecho \"echo \"GeeksforGeeks\"\";?>Options:GeeksforGeeksecho “GeeksforGeeks”echo GeeksforGeeksErrorOutput:  ErrorExplanation: It would have printed echo “GeeksforGeeks” if the statement was echo “echo ”GeeksforGeeks””;.");
    }

    private void programArticles()
    {
        create(getIdByTitle(this.context,"Programs"),"PHP | Program to move (key,value) pair upwards or downwards","Given an array with key, value pair, we need to move specific value upwards or downwards using the key.Examples:  Input : $continents = array(                        \'First\' => \'Asia\',                        \'Second\' => \'Europe\',                        \'Third\' => \'North America\',                        \'Fourth\' => \'South America\',                              );          move_to_up($continents, \'Third\');  Output : Array  (      [Third] => North America      [First] => Asia      [Second] => Europe      [Fourth] => South America  )    Input :$continents = array(                        \'First\' => \'Asia\',                        \'Second\' => \'Europe\',                        \'Third\' => \'North America\',                        \'Fourth\' => \'South America\',                              );         move_to_bottom($continents, \'Second\');  Output : Array  (      [First] => Asia      [Third] => North America      [Fourth] => South America      [Second] => Europe  )The above problem can be solved using the PHP function described below :unset() : The function destroys the specified variable.Approach : We prepare a temporary array with specified key (value to be moved up or at the bottom), then we unset the key finally we append depending upon the purpose of whether of moving the value up or at bottom.Below is the implementation of approachCode 1 : Moving the key, value at the top<?php        $continents = array(                      \'First\' => \'Asia\',                      \'Second\' => \'Europe\',                      \'Third\' => \'North America\',                      \'Fourth\' => \'South America\',                            );        move_to_up($continents, \'Third\');        print_r ($continents);function move_to_up(&$continents, $string)       {           $var = array($string => $continents[$string]);           unset($continents[$string]);           $continents = $var + $continents;       }?>Output:  Array  (      [Third] => North America      [First] => Asia      [Second] => Europe      [Fourth] => South America  )Code 2 : Moving the key, value at the bottom<?php        $continents = array(                      \'First\' => \'Asia\',                      \'Second\' => \'Europe\',                      \'Third\' => \'North America\',                      \'Fourth\' => \'South America\',                            );       move_to_bottom($continents, \'Second\');       print_r ($continents); function move_to_bottom(&$continents, $string)       {           $var = array($string => $continents[$string]);           unset($continents[$string]);           $continents = $continents + $var;       }?>Output:  Array  (      [First] => Asia      [Third] => North America      [Fourth] => South America      [Second] => Europe  )");create(getIdByTitle(this.context,"Programs"),"PHP program to find the maximum and the minimum in array","Given an array of integers, find the maximum and minimum in it.Examples:  Input : arr[] = {2, 3, 1, 6, 7}  Output : Maximum integer of the given array:7           Minimum integer of the given array:1    Input  : arr[] = {1, 2, 3, 4, 5}  Output : Maximum integer of the given array : 5           Minimum integer of the given array : 1Recommended: Please try your approach on {IDE} first, before moving on to the solution.Approach 1 (Simple) : We simply traverse through the array, find its maximum and minimum.<?php// Returns maximum in arrayfunction getMax($array){   $n = count($array);   $max = $array[0];   for ($i = 1; $i < $n; $i++)       if ($max < $array[$i])           $max = $array[$i];    return $max;}// Returns maximum in arrayfunction getMin($array){   $n = count($array);   $min = $array[0];   for ($i = 1; $i < $n; $i++)       if ($min > $array[$i])           $min = $array[$i];    return $min;}// Driver code$array = array(1, 2, 3, 4, 5);echo(getMax($array));echo(\"\\n\");echo(getMin($array));?>Output:5  1Approach 2 (Using Library Functions) : We use library functions to find minimum and maxium.Max():max() returns the parameter value considered “highest” according to standard comparisons. If multiple values of different types evaluate as equal (e.g. 0 and ‘abc’) the first provided to the function will be returned.Min():min() returns the parameter value considered “lowest” according to standard comparisons. If multiple values of different types evaluate as equal (e.g. 0 and ‘abc’) the first provided to the function will be returned.<?php$array = array(1, 2, 3, 4, 5);echo(max($array));echo(\"\\n\");echo(min($array));?>Output:5  1");create(getIdByTitle(this.context,"Programs"),"PHP | Program to delete an element from array using unset() function","Given an array of elements, we have to delete an element from the array by using the unset() function.Examples:  Input : $arr = array(\"Harsh\", \"Nishant\", \"Bikash\", \"Barun\");          unset($arr[3]);  Output : Array           (             [0] => Harsh             [1] => Nishant             [2] => Bikash           )    Input : $arr = array(1, 2, 6, 7, 8, 9);          unset($arr[3]);  Output : Array           (             [0] => 1             [1] => 2             [2] => 6             [4] => 8             [5] => 9           )Recommended: Please try your approach on {IDE} first, before moving on to the solution.unset() function: The function accepts a variable name as parameter and destroy or unset that variable.Approach: This idea to solve this problem using the unset function is to pass the array key of the respective element which we want to delete from the array as a parameter to this function and thus removes the value associated to it i.e. the element of an array at that index.Below programs illustrate the above approach:Program 1:<?php    $a = array(\"Harsh\", \"Bikash\", \"Nishant\", \"Barun\", \"Deep\");    // unset command accepts 3rd index and    // thus removes the array element at    // that position    unset($a[3]);    print_r ($a);?>Output:  Array  (      [0] => Harsh      [1] => Bikash      [2] => Nishant      [4] => Deep  )Program 2:<?php    $a = array(1, 8, 9, 7, 3, 5, 4, );    // unset command accepts 3rd index and    // thus removes the array element    // at that position    unset($a[5]);    print_r ($a);?>Output:  Array  (      [0] => 1      [1] => 8      [2] => 9      [3] => 7      [4] => 3      [6] => 4  )Note: The array keys will not be reordered after using the unset() function.");create(getIdByTitle(this.context,"Programs"),"PHP | Remove duplicate elements from Array","You are given an Array of n-elements.You have to remove the duplicate values without using any loop in PHP and print the array.Examples:  Input : array[] = {2, 3, 1, 6, 1, 6, 2, 3}  Output : array (                  [6] => 2                  [7] => 3                  [4] => 1                  [5] => 6                 )    Input : array[] = {4, 2, 7, 3, 2, 7, 3}  Output : array (                  [0] => 4                  [4] => 2                  [5] => 7                  [6] => 3                  )Recommended: Please try your approach on {IDE} first, before moving on to the solution.In C/Java, we have to traverse the array and for each element you have to check if its duplicate is present. But PHP provides an inbuilt function (array_flip()) with the use of which we can remove duplicate elements without the use of loop.The array_flip() returns an array in flip order, i.e. keys from array become values and values from array become keys.Note that the values of array need to be valid keys, i.e. they need to be either integer or string. A warning will be emitted if a value has the wrong type, and the key/value pair in question will not be included in the result.Note: If a value has several occurrences, the latest key will be used as its value, and all others will be lost. Also as array_flip() returns array with preserved keys, we will use array_values() which will re-order the keys.Approach: The idea is to use this property of the array_flip() function of selecting the latest key as its value if the value has multiple occurrences. We will use the array_flip() function twice to remove the duplicate values. On using the array_flip() function for the first time, it will return an array with keys and values exchanged with removed duplicates. On using it the second time, it will again reorder it to the original configuration.Below is the implementation of above idea:<?php    // define array    $a = array(1, 5, 2, 5, 1, 3, 2, 4, 5);    // print original array    echo \"Original Array : \\n\";    print_r($a);    // remove duplicate values by using    // flipping keys and values    $a = array_flip($a);    // restore the array elements by again    // flipping keys and values.    $a = array_flip($a);    // re-order the array keys    $a= array_values($a);    // print updated array    echo \"\\nUpdated Array : \\n \";    print_r($a);?>Output:  Original Array :   Array  (      [0] => 1      [1] => 5      [2] => 2      [3] => 5      [4] => 1      [5] => 3      [6] => 2      [7] => 4      [8] => 5  )    Updated Array :   Array  (      [0] => 1      [1] => 5      [2] => 2      [3] => 3      [4] => 4  )");create(getIdByTitle(this.context,"Programs"),"PHP | Sort array of strings in natural and standard orders","You are given an array of strings. You have to sort the given array in standard way (case of alphabets matters) as well as natural way (alphabet case does not matter).  Input : arr[] = {\"Geeks\", \"for\", \"geeks\"}  Output : Standard sorting: Geeks for geeks            Natural sorting: for Geeks geeks     Input : arr[] = {\"Code\", \"at\", \"geeks\", \"Practice\"}  Output : Standard sorting: Code Practice at geeks            Natural sorting: at Code geeks PracticeRecommended: Please try your approach on {IDE} first, before moving on to the solution.If you are trying to sort the array of string in a simple manner you can simple create a comparison function for character comparison and sort the given array of strings. But that will differentiate lower case and upper case alphabets. To solve this problem if you are otping to solve this in c/java you have to write your own comparision function which specially take care of cases of alphabets. But if we will opt PHP as our language then we can sort it directly with the help of natcasesort().natcasesort() : It sort strings regardless of their case. Means ‘a’ & ‘A’ are treated smaller than ‘b’ & ‘B’ in this sorting method.  // declare array  $arr = array (\"Hello\", \"to\", \"geeks\", \"for\", \"GEEks\");    // Standard sort  $standard_result = sort($arr);  print_r($standart_result);    // natural sort  $natural_result = natcasesort($arr);  print_r($natural_result);<?php// PHP program to sort an array// in standard and natural ways.// function to print arrayfunction printArray ($arr){    foreach ($arr as $value) {        echo \"$value \";    }}// declare array$arr = array (\"Hello\", \"to\", \"geeks\", \"for\", \"GEEks\");// Standard sort$standard_result = $arr;sort($standard_result);echo \"Array after Standard sorting: \";printArray($standard_result);// natural sort$natural_result = $arr;natcasesort($natural_result);echo \"\\nArray after Natural sorting: \";printArray($natural_result);?>Output:  Array after Standard sorting: GEEks Hello for geeks to   Array after Natural sorting: for geeks GEEks Hello to");create(getIdByTitle(this.context,"Programs"),"Program to find the number of days between two dates in PHP","Given two dates. The task is to find the number of days between the given dates.Examples:  Input : date1 = \"17-09-2018\"          date2 = \"31-09-2018\"  Output: Difference between two dates: 14 days     Input : date1 = \"2-05-2017\"          date2 = \"25-12-2017\"  Output: Difference between two dates: 237 DaysNote: The dates can be taken in any format. In the above example, the date is taken in dd-mm-yyyy format.Method 1: In this method, first take two dates and get their differences. Below is the implementation of this method.<?php// PHP code to find the number of days// between two given dates// Function to find the difference// between two dates.function dateDiffInDays($date1, $date2){    // Calulating the difference in timestamps    $diff = strtotime($date2) - strtotime($date1);    // 1 day = 24 hours    // 24 * 60 * 60 = 86400 seconds    return abs(round($diff / 86400));}// Start date$date1 = \"17-09-2018\";// End date$date2 = \"31-09-2018\";// Function call to find date difference$dateDiff = dateDiffInDays($date1, $date2);// Display the resultprintf(\"Difference between two dates: \"   . $dateDiff . \" Days \");?>Output:  Difference between two dates: 14 DaysMethod 2 Using date_diff() Function: The date_diff() function is an inbuilt function in PHP which is used to calculate the difference between two dates. This function returns a DateInterval object on the success and returns FALSE on failure.Example:<?php// PHP code to find the number of days// between two given dates// Creates DateTime objects$datetime1 = date_create(\'17-09-2018\');$datetime2 = date_create(\'25-09-2018\');// Calculates the difference between DateTime objects$interval = date_diff($datetime1, $datetime2);// Display the resultecho $interval->format(\'Difference between two dates: %R%a days\');?>Output:  Difference between two dates: +8 days");create(getIdByTitle(this.context,"Programs"),"How to calculate the difference between two dates in PHP?","Given two dates, start_date and end_date. The task is to find the difference between two dates.Examples:  Input: start_date: 2016-06-01 22:45:00          end_date: 2018-09-21 10:44:01  Output: 2 years, 3 months, 21 days, 11 hours, 59 minutes, 1 seconds    Input: start_date: 2015-05-12 12:37:30          end_date: 2018-04-25 12:45:31  Output: 2 years, 11 months, 19 days, 0 hours, 8 minutes, 1 secondsMethod 1: Use date_diff() Function to find the difference between two dates.Method 2: To use date-time mathematical formula to find the difference between two dates. It returns the years, months, days, hours, minutes, seconds between two specified dates.Program:<?php// Declare and define two dates$date1 = strtotime(\"2016-06-01 22:45:00\");$date2 = strtotime(\"2018-09-21 10:44:01\");// Formulate the Difference between two dates$diff = abs($date2 - $date1);// To get the year divide the resultant date into// total seconds in a year (365*60*60*24)$years = floor($diff / (365*60*60*24));// To get the month, subtract it with years and// divide the resultant date into// total seconds in a month (30*60*60*24)$months = floor(($diff - $years * 365*60*60*24)                               / (30*60*60*24));// To get the day, subtract it with years and// months and divide the resultant date into// total seconds in a days (60*60*24)$days = floor(($diff - $years * 365*60*60*24 -             $months*30*60*60*24)/ (60*60*24));// To get the hour, subtract it with years,// months & seconds and divide the resultant// date into total seconds in a hours (60*60)$hours = floor(($diff - $years * 365*60*60*24       - $months*30*60*60*24 - $days*60*60*24)                                   / (60*60));// To get the minutes, subtract it with years,// months, seconds and hours and divide the// resultant date into total seconds i.e. 60$minutes = floor(($diff - $years * 365*60*60*24         - $months*30*60*60*24 - $days*60*60*24                          - $hours*60*60)/ 60);// To get the minutes, subtract it with years,// months, seconds, hours and minutes$seconds = floor(($diff - $years * 365*60*60*24         - $months*30*60*60*24 - $days*60*60*24                - $hours*60*60 - $minutes*60));// Print the resultprintf(\"%d years, %d months, %d days, %d hours, \"     . \"%d minutes, %d seconds\", $years, $months,             $days, $hours, $minutes, $seconds);?>Output:  2 years, 3 months, 21 days, 11 hours, 59 minutes, 1 secondsMethod 3: This method is used to get the total number of days between two specified dates.<?php// Declare two dates$start_date = strtotime(\"2018-06-08\");$end_date = strtotime(\"2018-09-19\");// Get the difference and divide into// total no. seconds 60/60/24 to get// number of daysecho \"Difference between two dates: \"    . ($end_date - $start_date)/60/60/24;?>Output:  Difference between two dates: 103");create(getIdByTitle(this.context,"Programs"),"Convert an object to associative array in PHP","Object is an instance of a class. It is simply a specimen of a class and has a memory allocated. Array is the data structure that stores one or more similar type of values in a single name but associative array is different from simple PHP array. An array which contains string index is called associative array. It stores element values in association with key values rather than in a linear index order.Metod 1: Using json_decode and json_encode method: The json_decode function accepts JSON encoded string and converts it into a PHP variable on the other hand json_encode returns a JSON encoded string for a given value.Syntax:$myArray = json_decode(json_encode($object), true);Example:<?phpclass sample {    /* Member variables */    var $var1;    var $var2;    function __construct( $par1, $par2 )    {        $this->var1 = $par1;        $this->var2 = $par2;    }}// Creating the object$myObj = new sample(1000, \"second\");echo \"Before conversion: \\n\";var_dump($myObj);// Converting object to associative array$myArray = json_decode(json_encode($myObj), true);echo \"After conversion: \\n\";var_dump($myArray);?>Output:  Before conversion:   object(sample)#1 (2) {    [\"var1\"]=>    int(1000)    [\"var2\"]=>    string(6) \"second\"  }  After conversion:   array(2) {    [\"var1\"]=>    int(1000)    [\"var2\"]=>    string(6) \"second\"  }Method 2: Type Casting object to an array: Typecasting is the way to utilize one data type variable into the different data type and it is simply the explicit conversion of data type. It can convert a PHP object to an array by using typecasting rules supported in PHP.Syntax:  $myArray = (array) $myObj;Example:<?phpclass bag {    /* Member variables */    var $item1;    var $item2;    var $item3;    function __construct( $par1, $par2, $par3)    {        $this->item1 = $par1;        $this->item2 = $par2;        $this->item3 = $par3;    }}// Create myBag object$myBag = new bag(\"Mobile\", \"Charger\", \"Cable\");echo \"Before conversion : \\n\";var_dump($myBag);// Coverting object to an array$myBagArray = (array)$myBag;echo \"After conversion : \\n\";var_dump($myBagArray);?>Output:  Before conversion :   object(bag)#1 (3) {    [\"item1\"]=>    string(6) \"Mobile\"    [\"item2\"]=>    string(7) \"Charger\"    [\"item3\"]=>    string(5) \"Cable\"  }  After conversion :   array(3) {    [\"item1\"]=>    string(6) \"Mobile\"    [\"item2\"]=>    string(7) \"Charger\"    [\"item3\"]=>    string(5) \"Cable\"  }");create(getIdByTitle(this.context,"Programs"),"Generating OTP (One time Password) in PHP","Now these days, OTP (one time password) is mandatory in almost each and every service. A developer can generate OTP in many ways but the challenge is not to be predictive as any one can predict the OTP and can exploit the service.Some of popular format of OTPs are:4 or 6 digit Numeric OTP.4 or 6 alphabetic (lowercase / uppercase) OTP.4 or 6 digit alphanumeric OTP.Examples for n-digit numeric OTP:  Input : n = 4  Output : 8723    Input : n = 8  Output : 23914072Note: The output of program will be different in every execution.One of the best way to generate OTP is to use random function. But using random function directly can be dangerous. So here is an method which uses random function and some algorithm for generating the n-digit numeric OTP.Program:<?php// Function to generate OTPfunction generateNumericOTP($n) {    // Take a generator string which consist of    // all numeric digits    $generator = \"1357902468\";    // Iterate for n-times and pick a single character    // from generator and append it to $result    // Login for generating a random character from generator    //     ---generate a random number    //     ---take modulus of same with length of generator (say i)    //     ---append the character at place (i) from generator to result    $result = \"\";    for ($i = 1; $i <= $n; $i++) {        $result .= substr($generator, (rand()%(strlen($generator))), 1);    }    // Return result    return $result;}// Main program$n = 6;print_r(generateNumericOTP($n));?>Output:  561862");create(getIdByTitle(this.context,"Programs"),"Program to Insert new item in array on any position in PHP","New item in an array can be inserted with the help of array_splice() function of PHP. This function removes a portion of an array and replaces it with something else. If offset and length are such that nothing is removed, then the elements from the replacement array are inserted in the place specified by the offset.Syntax:array array_splice ($input, $offset [, $length [, $replacement]])Parameters: This function takes four parameters out of which 2 are mandatory and 2 are optional:$input: This parameter takes the value of an array on which operations are needed to perform.$offset: If this parameter is positive then the start of removed portion is at that position from the beginning of the input array and if this parameter is negative then it starts that far from the end of the input array.$length: (optional) If this parameter is omitted then it removes everything from offset to the end of the array.If length is specified and is positive, then that many elements will be removed.If length is specified and is negative then the end of the removed portion will be that many elements from the end of the array.If length is specified and is zero, no elements will be removed.$replacement: (optional) This parameter is an optional parameter which takes value as an array and if this replacement array is specified, then the removed elements are replaced with elements from this replacement array.Return Value: It returns the last value of the array, shortening the array by one element.Note that keys in replacement array are not preserved.Program<?php//Original Array on which operations is to be perform$original_array = array( \'1\', \'2\', \'3\', \'4\', \'5\' );echo \'Original array : \';foreach ($original_array as $x){echo \"$x \";}echo \"\\n\";//value of new item$inserted_value = \'11\';//value of position at which insertion is to be done$position = 2;//array_splice() functionarray_splice( $original_array, $position, 0, $inserted_value );echo \"After inserting 11 in the array is : \";foreach ($original_array as $x){echo \"$x \";}?>Output:  Original array : 1 2 3 4 5   After inserting 11 in the array is : 1 2 11 3 4 5");create(getIdByTitle(this.context,"Programs"),"Split a comma delimited string into an array in PHP","Given a long string separated with comma delimiter. The task is to split the given string with comma delimiter and store the result in an array.Examples:  Input : geeks,for,geeks  Output : Array ( [0] => geeks [1] => for [2] => geeks )    Input : practice, code  Output : Array ( [0] => practice [1] => code )Use explode() or preg_split() function to split the string in php with given delimiter.PHP | explode() Function: The explode() function is an inbuilt function in PHP which is used to split a string in different strings. The explode() function splits a string based on a string delimiter, i.e. it splits the string wherever the delimiter character occurs. This functions returns an array containing the strings formed by splitting the original string.Syntax:array explode( separator, OriginalString, NoOfElements )PHP | preg_split() Function: The preg_split() function operates exactly like split(), except that regular expressions are accepted as input parameters for pattern.Syntax:array preg_split( string $pattern, string   $subject [, int $limit = -1 [, int $flags = 0 ]] )Example:<?php// Use preg_split() function$string = \"123,456,78,000\";$str_arr = preg_split (\"/\\,/\", $string);print_r($str_arr);// use of explode$string = \"123,46,78,000\";$str_arr = explode (\",\", $string);print_r($str_arr);?>Output:  Array  (      [0] => 123      [1] => 456      [2] => 78      [3] => 000  )  Array  (      [0] => 123      [1] => 46      [2] => 78      [3] => 000  )");create(getIdByTitle(this.context,"Programs"),"How to generate a random, unique, alphanumeric string in PHP","There are many ways to generate a random, unique, alphanumeric string in PHP which are given below:The str_shuffle() function is an inbuilt function in PHP and is used to randomly shuffle all the characters of a string passed to the function as a parameter. When a number is passed, it treats the number as the string and shuffles it. This function does not make any change in the original string or the number passed to it as a parameter. Instead, it returns a new string which is one of the possible permutations of the string passed to it in the parameter.Example:<?php// This function will return a random// string of specified lengthfunction random_strings($length_of_string){    // String of all alphanumeric character    $str_result = \'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\';    // Shufle the $str_result and returns substring    // of specified length    return substr(str_shuffle($str_result),                       0, $length_of_string);}// This function will generate// Random string of length 10echo random_strings(10);echo \"\\n\";// This function will generate// Random string of length 8echo random_strings(8);?>Output:  hnQVgxd4FE  6EsbCc53Using md5() Function: The md5() function is used to calculate the MD5 hash of a string. Pass timestamp as a argument and md5 function will convert them into 32 bit charactersExample:<?php// This function will return a random// string of specified lengthfunction random_strings($length_of_string) {    // md5 the timestamps and returns substring    // of specified length    return substr(md5(time()), 0, $length_of_string);}// This function will generate// Random string of length 10echo random_strings(10);echo \"\\n\";// This function will generate// Random string of length 8echo random_strings(8);?>Output:  12945f0845  12945f08Using sha1() Function: This function calculates the sha-1 hash of a string. Pass timestamps as a argument and sha1() function will convert them into sha1- hash.Example:<?php  // This function will return  // A random string of specified length  function random_strings($length_of_string) {    // sha1 the timstamps and returns substring    // of specified length    return substr(sha1(time()), 0, $length_of_string);}// This function will generate// Random string of length 10echo  random_strings(10);echo \"\\n\";// This function will generate// Random string of length 8echo  random_strings(8);?>Output:  643f60c52d  643f60c5This function generates cryptographically secure pseudo-random bytes. It returns a string containing the requested number of cryptographically secure random bytes. Use binehex () function to convert bytes into hexadecimal format.Example:<?php// This function will return// A random string of specified lengthfunction random_strings($length_of_string) {    // random_bytes returns number of bytes    // bin2hex converts them into hexadecimal format    return substr(bin2hex(random_bytes($length_of_string)),                                      0, $length_of_string);}// This function will generate// Random string of length 10echo random_strings(10);echo \"\\n\";// This function will generate// Random string of length 8echo random_strings(8);?>Output:  64713970f3  67b575a3");create(getIdByTitle(this.context,"Programs"),"Program to generate random string in PHP","Given a size N and the task is to generate a random string of size N.Examples:  Input: 5  Output: eR3Ds    Input: 10  Output: MPRCyBgdcnRecommended: Please try your approach on {IDE} first, before moving on to the solution.Method: Create a domain string which contains small letters, capital letters and the digits (0 to 9). Then generate a random number and pick the character present at that random index and append that character into the answer string.Below is the program to generate random string using above method:<?php// PHP function to print a// random string of length nfunction RandomStringGenerator($n){    // Variable which store final string    $generated_string = \"\";    // Create a string with the help of    // small letters, capital letters and    // digits.    $domain = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";    // Find the lenght of created string    $len = strlen($domain);    // Loop to create random string    for ($i = 0; $i < $n; $i++)    {        // Generate a random index to pick        // characters        $index = rand(0, $len - 1);        // Concatenating the character        // in resultant string        $generated_string = $generated_string . $domain[$index];    }    // Return the random generated string    return $generated_string;}// Driver code to test above function$n = 5;echo \"Random String of length \" . $n   . \" = \" . RandomStringGenerator($n);?>Output:  Random String of length 5 = EEEto");create(getIdByTitle(this.context,"Programs"),"PHP | Print the last value of an array without affecting the pointer","We are given an array with key-value pair, and we need to find the last value of array without affecting the array pointer.Examples:  Input : $arr = array(\'c1\' => \'Red\', \'c2\' => \'Green\',                             \'c3\' => \'Blue\', \'c4\' => \'Black\')  Output : Black    Input : $arr = array(\'p1\' => \'New York\', \'p2\' => \'Germany\',                           \'p3\' => \'England\', \'p4\' => \'France\')  Output : FranceThe above problem can be easily solved using PHP. The idea is to create a copy of the original array and then use the array_pop() inbuilt function, to get the last value of the array. As we are using the array_pop() function on the copy array, so the pointer of the original array remains unchanged.Built-in function used:: The function is used to delete or pop the last element of an array.Below is the implementation of the above approach:<?php    // Input Array    $array = array(\'c1\' => \'Delhi\', \'c2\' => \'Kolkata\',                    \'c3\' => \'Mumbai\', \'c4\' => \'Bangalore\');    // Copied Array    $copyArray = $array;    // getting last element from Copied array    $lastElement = array_pop($copyArray);    // displaying the last element of the array    print_r($lastElement.\"\\n\");    // displaying the original array    print_r($array);?>Output:  Bangalore  Array  (      [c1] => Delhi      [c2] => Kolkata      [c3] => Mumbai      [c4] => Bangalore  )");create(getIdByTitle(this.context,"Programs"),"PHP program to find the Standard Deviation of an array","Given an array of elements. We need to find the Standard Deviation of the elements of the array in PHP.Examples:  Input : array(2, 3, 5, 6, 7)  Output : 1.5620499351813    Input : array(1, 2, 3, 4, 5)  Output : 1The following problem can be solved using the PHP inbuilt functions. The inbuilt functions used to solve the above problem are as such:array_sum(): The function returns the sum of all the elements of an array.count(): This function gives the number of elements currently present in the given array.sqrt(): The function returns the square root of the given number.To calculate the standard deviation, we have to first calculate the variance. The variance can be calculated as the sum of squares of differences between all numbers and means. Finally to get the standard deviation we will use the formula, √(variance/no_of_elements).Below is the implementation in PHP to calculate the standard deviation:<?php    // function to calculate the standard deviation    // of array elements    function Stand_Deviation($arr)    {        $num_of_elements = count($arr);        $variance = 0.0;                // calculating mean using array_sum() method        $average = array_sum($arr)/$num_of_elements;        foreach($arr as $i)        {            // sum of squares of differences between                        // all numbers and means.            $variance += pow(($i - $average), 2);        }        return (float)sqrt($variance/$num_of_elements);    }    // Input array    $arr = array(2, 3, 5, 6, 7);    print_r(Stand_Deviation($arr));?>Output:1.8547236990991");create(getIdByTitle(this.context,"Programs"),"PHP program to change date format","You are given a string which contain date and time. Date in dd/mm/yyyy format and time in 12 hrs format.You have to convert date in yyyy/mm/dd format and time in 24 hrs format.Examples:  Input : $date = \"12/05/2018 10:12 AM\"  Output : 2018-05-12 10:12:00    Input : $date = \"06/12/2014 04:13 PM\"  Output : 2014-12-06 16:13:00First we will convert date to unix timestamp using strtotime() and then use date() to convert it to a specific format(The strtotime() function parses an English textual datetime into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT))<?php    // function to convert string and print    function convertString ($date)    {        // convert date and time to seconds        $sec = strtotime($date);        // convert seconds into a specific format        $date = date(\"Y-m-d H:i\", $sec);        // append seconds to the date and time        $date = $date . \":00\";        // print final date and time        echo $date;    }    // Driver code    $date = \"06/12/2014 04:13 PM\";    convertString($date);?>Output:  2014-06-12 16:13:00");create(getIdByTitle(this.context,"Programs"),"PHP programs for printing pyramid patterns","This article is aimed at giving a PHP implementation for pattern printing.Simple Pyramid Pattern<?php// Php code to demonstrate// star pattern// Function to demonstrate// printing patternfunction pypart($n){    // Outer loop to handle number    // of rowsn in this case    for ($i = 0; $i < $n; $i++)    {        // inner loop to handle        // number of columns        // values changing acc.        // to outer loop        for($j = 0; $j <= $i; $j++ )        {            // Printing stars            echo \"* \";        }        // ending line after        // each row        echo \"\\n\";    }}    // Driver Code    $n = 5;    pypart($n);?>Output :  *   * *   * * *   * * * *   * * * * *After 180 degree rotation<?php// PHP code to demonstrate// star pattern// Function to demonstrate// printing patternfunction pypart2($n){    for ($i = 1; $i <= $n; $i++) {        for ($j = 1; $j <= $n; $j++) {            if($j<=($n-$i)){                echo \" \".\" \";            }else {                echo \"* \";            }        }        echo PHP_EOL;    }}    // Driver Code    $n = 5;    pypart2($n);?>Output :          *         * *       * * *     * * * *   * * * * *Printing Triangle<?php// PHP code to demonstrate// star pattern// Function to demonstrate// printing patternfunction triangle($n){    // number of spaces    $k = 2 * $n - 2;    // outer loop to handle    // number of rows    // n in this case    for ($i = 0; $i < $n; $i++)    {        // inner loop to handle        // number spaces        // values changing acc.        // to requirement        for ($j = 0; $j < $k; $j++)            echo \" \";        // decrementing k after        // each loop        $k = $k - 1;        // inner loop to handle        // number of columns        // values changing acc.        // to outer loop        for ($j = 0; $j <= $i; $j++ )        {            // printing stars            echo \"* \";        }        // ending line after        // each row        echo \"\\n\";    }}    // Driver Code    $n = 5;    triangle($n);?>Output :      *      * *     * * *    * * * *   * * * * *Number Pattern<?php// PHP code to demonstrate// printing pattern of numbers// Function to demonstrate// printing patternfunction numpat($n){    // initializing starting number    $num = 1;    // outer loop to handle    // number of rows    // n in this case    for ($i = 0; $i < $n; $i++)    {        // inner loop to handle        // number of columns        // values changing acc.        // to outer loop        for ($j = 0; $j <= $i; $j++ )        {            // printing number            echo $num.\" \";        }            // incrementing number            // at each column            $num = $num + 1;        // ending line after        // each row        echo \"\\n\";    }}    // Driver Code    $n = 5;    numpat($n);?>Output :  1   2 2   3 3 3   4 4 4 4   5 5 5 5 5Numbers without re assigning<?php// PHP code to demonstrate// printing pattern of numbers// Function to demonstrate// printing patternfunction numpat($n){    // initialising starting    // number    $num = 1;    // outer loop to handle    // number of rows    // n in this case    for ($i = 0; $i < $n; $i++)    {        // inner loop to handle        // number of columns        // values changing acc.        // to outer loop        for ($j = 0; $j <= $i; $j++ )        {            // printing number            echo $num.\" \";            // incrementing number            // at each column            $num = $num + 1;        }        // ending line after        // each row        echo \"\\n\";    }}    // Driver Code    $n = 5;    numpat($n);?>Output :  1   2 3   4 5 6   7 8 9 10   11 12 13 14 15Character Pattern<?php// PHP code to demonstrate printing// pattern of alphabets// Function to demonstrate// printing patternfunction alphapat($n){    // initializing value    // corresponding to \'A\'    // ASCII value    $num = 65;    // outer loop to handle    // number of rows    // n in this case    for ($i = 0; $i < $n; $i++)    {        // inner loop to handle        // number of columns        // values changing acc.        // to outer loop        for ($j = 0; $j <= $i; $j++ )        {            // explicitly converting            // to char            $ch = chr($num);            // printing char value            echo $ch.\" \";        }        // incrementing number        $num = $num + 1;        // ending line after        // each row        echo \"\\n\";    }}    // Driver Code    $n = 5;    alphapat($n);?>Output :  A   B B   C C C   D D D D   E E E E EContinuous Character pattern<?php// PHP code to demonstrate printing// pattern of alphabets// Function to demonstrate// printing patternfunction contalpha($n){    // initializing value    // corresponding to \'A\'    // ASCII value    $num = 65;    // outer loop to handle    // number of rows    // n in this case    for ($i = 0; $i < $n; $i++)    {        // inner loop to handle        // number of columns        // values changing acc.        // to outer loop        for ($j = 0; $j <= $i; $j++ )        {            // explicitely converting            // to char            $ch = chr($num);            // printing char value            echo $ch.\" \";            // incrementing number            // at each column            $num = $num + 1;        }        // ending line after each row        echo \"\\n\";    }}    // Driver Code    $n = 5;    contalpha($n);?>Output :  A   B C   D E F   G H I J   K L M N ORelated Article :Programs for printing pyramid patterns in C++Programs for printing pyramid patterns in JavaPrograms for printing pyramid patterns in Python");create(getIdByTitle(this.context,"Programs"),"PHP | Program to check a string is a rotation of another string","Given the two strings we have to check if one string is a rotation of another string.Examples:  Input : $string1 = \"WayToCrack\",          $string2 = \"CrackWayTo\";  Output : Yes    Input : $string1 = \"WillPower\"           $string2 = \"lliW\";  Output : No.The above problem can be easily solved in other languages by concatenating the two strings and then would check if the resultant concatenated string contains the string or not. But in PHP we will use an inbuilt function to solve the problem. The inbuilt functions used are:: The function generally accepts the two parameters first one to specify the string to be searched and the other one to find in the specified string.In PHP solution strpos() will give the last position of string if found in the specified string.Below is the implementation of above approach<?php    function rotation_string($string1, $string2)    {        // if both strings are not same length then stop        if (strlen($string1) != strlen($string2))           echo \"No\";         // concatenate $string1 to itsel, if both         // strings are of same length         if (strlen($string1) == strlen($string2))            $string1 = $string1.$string1;         if (strpos($string1, $string2) > 0)            echo \"Yes\";         else            echo \"No\";    }    // Driver code    $string1 = \"WayToCrack\";    $string2 = \"CrackWayTo\";    rotation_string($string1, $string2);?>Output:  Yes");create(getIdByTitle(this.context,"Programs"),"Program to remove empty array elements in PHP","Given an array containing elements. The task is to remove empty elements from the array such as an empty string or a NULL element.Method 1: Using array_filter() Function. It is achieved by using array_filter() function. It also removes false values when declared using a callback function, however, if no callback function is specified, all the values of the array which are equal to FALSE will be removed, such as an empty string or a NULL value.Example:<?php// Declare array and stored array value$array = array(\"geeks\", 11, \'\', null, 12,            \"for\", 1997, false, \"geeks\");// Function to remove empty elements// from array$filtered_array = array_filter($array);// Display the filtered arrayvar_dump($filtered_array);?>Output:  array(6) {    [0]=>    string(5) \"geeks\"    [1]=>    int(11)    [4]=>    int(12)    [5]=>    string(3) \"for\"    [6]=>    int(1997)    [8]=>    string(5) \"geeks\"  }Method 2: Using unset() Function. Another approach is to remove empty elements from array is using empty() function along with the unset() function. The empty() function is used to check if an element is empty or not.Example:<?php// Declare array and stored array value$array = array(\"geeks\", 11, \'\', null, 12,           \"for\", 1997, false, \"geeks\");// Loop to find empty elements and// unset the empty elementsforeach($array as $key => $value)    if(empty($value))        unset($array[$key]);// Display the array elementsforeach($array as $key => $value)    echo ($array[$key] . \"<br>\");?>Output:  geeks1112for1997geeks");create(getIdByTitle(this.context,"Programs"),"How to check an array is associative or sequential in PHP?","In PHP there is no need to write the variable type before the variable because it is loosely-typed. It takes datatype from user defined values that are stored in it. Arrays in PHP is a type of data structure that allows to store multiple elements of similar data type under a single variable thereby saving the effort of creating a different variable for every data.There are basically three types of arrays in PHP:Sequential (Indexed) arraysAssociative arraysMultidimensional arraysSequential Arrays: Those arrays which have numerical indexes in an ordered sequential manner (starting from 0 and ending with n-1) are called Sequential or Indexed arrays. In PHP, by default array Indexed array.<?php// Example of sequential array$arr = array(\"January\", \"February\", \"March\");// 1st elementecho $arr[0] . \"\\n\";// 2nd elementecho $arr[1] . \"\\n\";// 3rd elementecho $arr[2] . \"\\n\";?>Output:  January  February  MarchAssociative arrays: The arrays which are having string type keys instead of indexes or which exist in (‘key’, ‘value’)pairs are called associative arrays.<?php// Example of associative array$arr1= array(\"Month1\" => \"January\",             \"Month2\" => \"February\",             \"Month3\" => \"March\"        );echo $arr1[\"Month1\"] . \"\\n\";echo $arr1[\"Month2\"] . \"\\n\";echo $arr1[\"Month3\"] . \"\\n\";?>Output:  January  February  MarchHow to check if PHP array is associative or sequential?There is no inbuilt method in PHP to know the type of array. If the sequential array contains n elements then their index lies between 0 to (n-1). So find the array key value and check if it exist in 0 to (n-1) then it is sequential otherwise associative array.<?php// Example to check Sequential array// Associative array$arr1= array(\"Month1\" => \"January\",             \"Month2\" => \"February\",             \"Month3\" => \"March\"        );// Checking for sequential keys of array arrif(array_keys($arr1) !== range(0, count($arr1) - 1))    echo \"Array is associative\";else    echo \"Array is sequential \\n\";?>Output:  Array is associativeNote:=== It returns True if $x and $y are equal and same type.!== It returns True if $x and $y are not equal or not same type.== It returns True if $x and $y are equal.!= It returns True if $x not equal to $y.");create(getIdByTitle(this.context,"Programs"),"Get the full URL in PHP","PHP program to get complete URL of currently running pages.There are few steps to get the complete URL of the currently running page which are given below:Create a PHP variable which will store the URL in string format.Check whether the HTTPS is enabled by the server .If it is, append “https” to the URL string. If HTTPS is not enabled, append “http” to the URL string.Append the regular symbol, i.e. “://” to the URL.Append the HTTP_HOST(The host to which we have requested, e.g. www.google.com, www.yourdomain.com, etc…) name of the server.Append the REQUEST_URI(The resource which we have requested, e.g. /index.php, etc…) to the URL string.Note: Use isset() function to check whether HTTPS is enable or not. The isset() function is used to check a variable exists or not.The status of HTTPS is saved in the Global variable $_SERVER[‘HTTPS’]. So, use $_SERVER[‘HTTPS’] in isset() function is used to check whether it exists or not. This will tell us whether HTTPS is enabled or not. Check the value of $_SERVER[‘HTTPS’]. If it is “on”, then HTTPS is enabled and we have to append “https” to the URL.Program 1:<?php// Program to display URL of current page.if(isset($_SERVER[\'HTTPS\']) && $_SERVER[\'HTTPS\'] === \'on\')    $link = \"https\";else    $link = \"http\";// Here append the common URL characters.$link .= \"://\";// Append the host(domain name, ip) to the URL.$link .= $_SERVER[\'HTTP_HOST\'];// Append the requested resource location to the URL$link .= $_SERVER[\'REQUEST_URI\'];// Print the linkecho $link;?>Output:https://ide.geeksforgeeks.org/Program 2:<?php// Program to display current page URL.$link = (isset($_SERVER[\'HTTPS\']) && $_SERVER[\'HTTPS\'] === \'on\' ?                \"https\" : \"http\") . \"://\" . $_SERVER[\'HTTP_HOST\'] .                $_SERVER[\'REQUEST_URI\'];echo $link;?>Output:https://ide.geeksforgeeks.org/The output of the above code is https://ide.geeksforgeeks.org/ instead of https://ide.geeksforgeeks.org/index.php. In order to fix this problem, need to replace, $_SERVER[‘REQUEST_URI’] with $_SERVER[‘PHP_SELF’]Program 3: Displaying the currently executing PHP file URL<?php// Program to display complete URLif(isset($_SERVER[\'HTTPS\']) &&            $_SERVER[\'HTTPS\'] === \'on\')    $link = \"https\";    else        $link = \"http\";// Here append the common URL// characters.$link .= \"://\";// Append the host(domain name,// ip) to the URL.$link .= $_SERVER[\'HTTP_HOST\'];// Append the requested resource// location to the URL$link .= $_SERVER[\'PHP_SELF\'];// Display the linkecho $link;?>Output:https://ide.geeksforgeeks.org/index.phpProgram 4:<?php// Program to display complete URL$link = (isset($_SERVER[\'HTTPS\']) && $_SERVER[\'HTTPS\']                === \'on\' ? \"https\" : \"http\") . \"://\" .          $_SERVER[\'HTTP_HOST\'] . $_SERVER[\'PHP_SELF\'];// Display the complete URLecho $link;?>Output:https://ide.geeksforgeeks.org/index.php");create(getIdByTitle(this.context,"Programs"),"How to remove non-alphanumeric characters in PHP?","Non-alphanumeric characters can be remove by using preg_replace() function. This function perform regular expression search and replace. The function preg_replace() searches for string specified by pattern and replaces pattern with replacement if found.Examples:  Input : !@GeeksforGeeks2018?  Output : GeeksforGeeks2018    Input : Geeks For Geeks  Output : GeeksForGeeksSyntax:int preg_match( $pattern, $replacement_string, $original_string )Parameter: This function accepts three parameter as mentioned above and described below:$pattern: The pattern that is searched in the string. It must be a regular expression.$replacement_string: The matched pattern is replaced by the replacement_string.$original_string: It is the original string in which searching and replacement is done.Return value:After the replacement has occurred, the modified string will be returned.If no matches are found, the original string remains unchanged.Method 1: The regular expression ‘/[\\W]/’ matches all the non-alphanumeric characters and replace them with ‘ ‘ (empty string).$str = preg_replace( \'/[\\W]/\', \'\', $str);In the regular expression W is a meta-character that is preceded by a backslash (\\W) that acts to give the combination a special meaning. It means a combination of non-alphanumeric characters.Example:<?php// string containing non-alphanumeric characters$str=\"!@GeeksforGeeks2018?\";// preg_replace function to remove the// non-alphanumeric characters$str = preg_replace( \'/[\\W]/\', \'\', $str);// print the stringecho($str);?>Output:  GeeksforGeeks2018Method 2: The regular expression ‘/[^a-z0-9 ]/i’ matches all the non-alphanumeric characters and replace them with ‘ ‘ (null string).$str = preg_replace( \'/[^a-z0-9 ]/i\', \'\', $str);In the regular expression:i: It is used for case insensitive.a-z: It is used for all lowercase letters, don’t need to specify A-Z because of i (case insensitive) already mentioned in the statement.0-9: It is used to match all digits.Example:<?php// string containing non-alphanumeric characters$str=\"!@GeeksforGeeks2018?\";// preg_replace function to remove the// non-alphanumeric characters$str = preg_replace( \'/[^a-z0-9]/i\', \'\', $str);// print the stringecho($str);?>Output:  GeeksforGeeks2018");create(getIdByTitle(this.context,"Programs"),"How to check whether an array is empty using PHP?","An empty array can sometimes cause software crash or unexpected outputs. To avoid this, it is better to check whether an array is empty or not beforehand. There are various methods and functions available in PHP to check whether the defined or given array is an empty or not. Some of them are given below:Using empty() Function: This function determines whether a given variable is empty. This function does not return a warning if a variable does not exist.Syntax:bool empty( $var )Example:<?php// Declare an array and initialize it$non_empty_array = array(\'URL\' => \'https://www.geeksforgeeks.org/\');// Declare an empty array$empty_array = array();// Condition to check array is empty or notif(!empty($non_empty_array))    echo \"Given Array is not empty <br>\";if(empty($empty_array))    echo \"Given Array is empty\";?>Output:  Given Array is not emptyGiven Array is emptyUsing count Function: This function counts all the elements in an array. If number of elements in array is zero, then it will display empty array.Syntax:int count( $array_or_countable )Example:<?php// Declare an empty array$empty_array = array();// Function to count array// element and use conditionif(count($empty_array) == 0)    echo \"Array is empty\";else    echo \"Array is non- empty\";?>Output:  Array is emptyUsing sizeof() function: This method check the size of array. If the size of array is zero then array is empty otherwise array is not empty.Example:<?php// Declare an empty array$empty_array = array();// Use array index to check// array is empty or notif( sizeof($empty_array) == 0 )    echo \"Empty Array\";else    echo \"Non-Empty Array\";?>Output:  Empty Array");create(getIdByTitle(this.context,"Programs"),"Difference between isset() and array_key_exists() Function in PHP","isset() functionThe isset() function is an inbuilt function in PHP which checks whether a variable is set and is not NULL. This function also checks if a declared variable, array or array key has null value, if it does, isset() returns false, it returns true in all other possible cases.Syntax:bool isset( $var, mixed )Parameters: This function accepts more than one parameters. The first parameter of this function is $var. This parameter is used to store the value of variable.Program:<?php// Declare an array$array = array();// Use isset functionecho isset($array[\'geeks\']) ? \'array is set.\' :    \'array is not set.\';?>Output:  array is not set.array_key_exists() FunctionThis is also a predefined function in PHP which checks whether an index or a particular key exists in an array or not. It does not evaluate the value of the key for any null values. It returns false if it does not find the key in the array and true in all other possible cases.Syntax:bool array_key_exists( $key, $array )Parameters: This function accepts two parameters as mentioned above and described below:$key: This parameter is used to store the value to be check.$array: This parameter is used to store an array with keys to check.Program:<?php// Create an array$array = array(     \'name\' => null,);// Use array_key_exists functionecho array_key_exists(\'name\', $array)? \'array key exists\' : \'array key does not exist\';?>Output:  array key existsDifference between isset() and array_key_exists() Function: The main difference between isset() and array_key_exists() function is that the array_key_exists() function will definitely tells if a key exists in an array, whereas isset() will only return true if the key/variable exists and is not null. Also isset() doesn’t render error when array/variable does not exist, while array_key_exists does.");create(getIdByTitle(this.context,"Programs"),"How to run JavaScript from PHP?","JavaScript is the client side scripting language and PHP is the server side scripting language. JavaScript is used as client side to check and verify client details and PHP is server side used to interact with database. In PHP, HTML is used as a string in the code. In order to render it to the browser, we produce JavaScript code as a string in the PHP code.Example 1: Write JavaScript code within PHP code<?phpecho \'<script type=\"text/JavaScript\">     prompt(\"GeeksForGeeks\");     </script>\';?>Output:Example 2: Write JavaScript code outside of PHP code (in same PHP file)<?php    // some php stuff?><script type=\"text/javascript\">    alert(\'GeeksforGeeks!\');</script>Output:Example 3: JavaScript Function – DOM Manipulation (in same PHP file)<?php    echo \"<div id=\'demo\'></div>\";?><script type=\"text/JavaScript\">// Function is called, return// value will end up in xvar x = myFunction(11, 10);document.getElementById(\"demo\").innerHTML = x;// Function returns the product of a and bfunction myFunction(a, b) {    return a * b;}</script>Output:110");create(getIdByTitle(this.context,"Programs"),"How to display HTML tags as plain text using PHP","HTML tags begin with the less-than character and end with greater-than character, the text inside the tag formatted and presented according to the tag used. Every tag has special meaning to the browser but there are cases when to show plain HTML code in webpage.There are various methods in PHP to show the HTML tags as plain text, some of them are discussed below:Method 1: Using htmlspecialchars() function: The htmlspecialchars() function is an inbuilt function in PHP which is used to convert all predefined characters to HTML entities.Syntax:string htmlspecialchars( $string, $flags, $encoding, $double_encode )$string: This parameter is used to hold the input string.$flags: This parameter is used to hold the flags. It is combination of one or two flags, which tells how to handle quotes.$encoding: It is an optional argument which specifies the encoding which is used when characters are converted. If encoding is not given then it is converted according to PHP default version.$double_encode: If double_encode is turned off then PHP will not encode existing HTML entities. The default is to convert everything.Return Values: This function returns the converted string. If there is invalid input string then empty string will returned.Example:<?phpecho(\"<b>without using htmlspecialchars() function</b><br>\");$myVar = htmlspecialchars(\"<b>using htmlspecialchars()                            function</b>\", ENT_QUOTES);echo($myVar);?>Output:Method 2: Using htmlentities() function: The htmlentities() function is an inbuilt function in PHP which is used to transform all characters which are applicable to HTML entities. This function converts all characters that are applicable to HTML entity.Syntax:string htmlentities( $string, $flags, $encoding, $double_encode )Parameters: This function accepts four parameters as mentioned above and described below:$string: This parameter is used to hold the input string.$flags: This parameter is used to hold the flags. It is combination of one or two flags, which tells how to handle quotes.encoding: It is an optional argument which specifies the encoding which is used when characters are converted. If encoding is not given then it is converted according to PHP default version.$double_encode: If double_encode is turned off then PHP will not encode existing HTML entities. The default is to convert everything.Return Values: This function returns the string which has been encoded.Example:<?php$str = \"<b>GeeksforGeeks</b>\";echo(\"without using htmlentities() function = \".$str.\"<br>\");$myVar = htmlentities($str, ENT_QUOTES);echo(\"with using htmlentities() function = \".$myVar);?>Output:Method 3: This method is used to replace the character by set of characters to get the desired output. In this method, < is replaced by &lt; and > is replaced by &gt;.Example:<?php$str = \"<b>GeeksforGeeks</b>\";echo(\"without using & lt; and & gt; = \".$str.\"<br>\");$myVar = \"<b>GeeksforGeeks</b>\";echo(\"with using & lt; and & gt; = \".$myVar);?>Output:");create(getIdByTitle(this.context,"Programs"),"PHP program to fetch data from localhost server database using XAMPP","XAMPP is a free and open source cross platform web server solution stack package developed by Apache which allow a web application to be easily tested on local web server. Here, we can manually create a relational database and store data in tabular form by going to this link. But to operate on localhost or for storing data first we have to start Apache and MySQL from XAMPP control panel.Let for example, database name is server, table name is user_info having column name as ID, First Name, Username and Password and we have to fetch the data stored there. So, below is the PHP program whose task is to fetch data.Recommended: Please try your approach on {IDE} first, before moving on to the solution.<?php// this php script is for connecting with database// data have to fetched from local server$mysql_host = \'localhost\';// user name is root$mysql_user = \'root\';// function to connect with database having// argument host and user nameif (!@mysql_connect ($mysql_host, $mysql_user)){    die(\'Cannot connect to database\');}else{    // database name is server    if (@mysql_select_db(\'server\'))    {        echo \"Connection Success\";    }    else    {        die(\'Cannot connect to database\');    }}?>Output:  Connection SuccessLet above script is saved with name database.php inside htdocs folder of XAMPP installation.<?php// going to use above coderequire \'database.php\';// printing column name above the dataecho \'ID\'.\' \'.\'Name\'.\' \'.\'User\'.\' \'.\'Pass\'.\'<br>\';// sql query to fetch all the data$query = \"SELECT * FROM `user_info`\";// mysql_query will execute the query to fetch dataif ($is_query_run = mysql_query($query)){    // echo \"Query Executed\";    // loop will iterate until all data is fetched    while ($query_executed = mysql_fetch_assoc ($is_query_run))    {        // these four line is for four column        echo $query_executed[\'ID\'].\' \';        echo $query_executed[\'First Name\'].\' \';        echo $query_executed[\'Username\'].\' \';        echo $query_executed[\'Password\'].\'<br>\';    }}else{    echo \"Error in execution\";}?>Output:  ID Name User Pass  1 Name1 user1 pass1  2 name2 user2 pass2  3 name3 pass3 pass3For installing and working with XAMPP, refer to this link.");create(getIdByTitle(this.context,"Programs"),"How to convert array to SimpleXML in PHP","Many times need to store the data as a XML format into the database or into the file for later use. To fulfill this requirement need to convert data to XML and save XML file.The SimpleXML extension functions provides the tool set to convert XML to an object. Those objects deals with normal property selectors and array iterators.Example 1:<?php// Code to convert php array to xml document// Define a function that converts array to xml.function arrayToXml($array, $rootElement = null, $xml = null) {    $_xml = $xml;    // If there is no Root Element then insert root    if ($_xml === null) {        $_xml = new SimpleXMLElement($rootElement !== null ? $rootElement : \'<root/>\');    }    // Visit all key value pair    foreach ($array as $k => $v) {        // If there is nested array then        if (is_array($v)) {            // Call function for nested array            arrayToXml($v, $k, $_xml->addChild($k));            }        else {            // Simply add child element.            $_xml->addChild($k, $v);        }    }    return $_xml->asXML();}// Creating an array for demo$my_array = array (\'name\' => \'GFG\',\'subject\' => \'CS\',    // Creating nested array.    \'contact_info\' => array (    \'city\' => \'Noida\',    \'state\' => \'UP\',    \'email\' => \'feedback@geeksforgeeks.org\'    ),);// Calling arrayToxml Function and printing the resultecho arrayToXml($my_array);?>Output:  <?xml version=\"1.0\"?>  <root>      <name> GFG </name>      <subject> CS </subject>      <contact_info >          <city > Noida < /city >          <state > UP < /state >          <email > feedback@geeksforgeeks.org </email>      <contact_info>  <root>The above problem ca be solved using array_walk_recursive() function. This function converts array to xml document where keys of array are converted into values and values of array are converted into element of xml.Example 2:<?php// Code to convert php array to xml document// Creating an array$my_array = array (    \'a\' => \'x\',    \'b\' => \'y\',    // creating nested array    \'another_array\' => array (        \'c\' => \'z\',    ),);// This function create a xml object with element root.$xml = new SimpleXMLElement(\'<root/>\');// This function resursively added element// of array to xml documentarray_walk_recursive($my_array, array ($xml, \'addChild\'));// This function prints xml document.print $xml->asXML();?>Output:  <?xml version=\"1.0\"? >  <root >         <x> a </x >         <y> b </y >         <z> c </z >  </root >Note: If the system generate error of type :PHP Fatal error: Uncaught Error: Class ‘SimpleXMLElement’ not found in /home/6bc5567266b35ae3e76d84307e5bdc78.php:24 then simply install php-xml, php-simplexml packages.");create(getIdByTitle(this.context,"Programs"),"How to read if a checkbox is checked in PHP?","Using isset() FunctionThe isset() function is an inbuilt function in PHP which checks whether a variable is set and is not NULL. This function also checks if a declared variable, array or array key has null value, if it does, isset() returns false, it returns true in all other possible cases. This problem can be solved with the help of isset() function.Syntax:bool isset( $var, mixed )Description: This function accepts more than one parameters. The first parameter of this function is $var. This parameter is used to store the value of variable.Program:<?phpif(isset($_GET[\'submit\'])) {    $var = $_GET[\'option1\'];    if(isset($var)) {        echo \"Option 1 submitted successfully\";    }}?><html lang=\"en\"><head>    <title>GeeksforGeeks Example</title>    <meta charset=\"utf-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <link rel=\"stylesheet\" href=    \"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">    <style>        .gfg {            font-size:40px;            font-weight:bold;            color:green;        }        body {            text-align:center;        }    </style></head><body>    <div class=\"container\">        <div class = \"gfg\">GeeksforGeeks</div>        <h2>Form control: checkbox</h2>        <p>The form below contains one checkbox.</p>        <form method=\"get\">            <div class=\"checkbox\">                <label><input type=\"checkbox\" name = \"option1\"                        value=\"Option 1\">Option 1</label>                <label><button name=\"submit\" value=\'true\'                    class=\"btn btn-default\">SUBMIT</button>            </div>        </form>    </div></body></html>Output:Using empty() FunctionThe empty() function is an inbuilt function in PHP which is used to check whether a variable is empty or not.Syntax:bool empty( $var )Description: This function determine whether a variable is empty or not.Example:<?phpif(!empty($_GET[\'submit\'])) {    $var = $_GET[\'option1\'];    if(isset($var)){        echo \"Option 1 submitted successfully\";    }}?><!DOCTYPE html><html lang=\"en\"><head>    <title>GeeksforGeeks Example</title>    <meta charset=\"utf-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <link rel=\"stylesheet\" href=    \"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\">    </script>    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\">    </script>    <style>        .gfg {            font-size:40px;            font-weight:bold;            color:green;        }        body {            text-align:center;        }    </style></head><body>    <div class=\"container\">        <div class = \"gfg\">GeeksforGeeks</div>        <h2>Form control: checkbox</h2>        <p>The form below contains one checkbox.</p>        <form method=\"get\">            <div class=\"checkbox\">                <label><input type=\"checkbox\" name = \"option1\"                            value=\"Option 1\">Option 1</label>                <label><button name=\"submit\" value=\"true\"                class=\"btn btn-default\">SUBMIT</button>            </div>        </form>    </div></body></html>Output:");create(getIdByTitle(this.context,"Programs"),"How to call PHP function from string stored in a Variable","Given the names of some user-defined functions stored as strings in variables. The task is to call the functions using the names stored in the variables.Example:<?php// Function without argumentfunction func() {    echo \"geek\";}// Function with argumentfunction fun($msg) {    echo $msg;}// Call func and fun using $var and $var1$var = \"func\";$var1 = \"fun\";?>There are two methods for doing this. One is directly calling function by variable name using bracket and parameters and the other is by using call_user_func() Function but in both method variable name is to be used.Program:<?php// Function without argumentfunction func() {    echo \"hello \";}// Function with argumentfunction fun($msg) {    echo $msg.\" \";}$var = \"func\";$var1 = \"fun\";// 1st method by using variable name$var();$var1(\"geek\");echo \"\\n\";// 2nd method by using php inbuilt// function call_user_func()call_user_func($var);call_user_func($var1, \"fun_function\");?>Output:  hello geek   hello fun_functionAnother Method: Using eval() Function: The eval() function is an inbuilt function in PHP which is used to evaluate string as PHP code.Note: This method is contributed by Vineet Joshi.Syntax:eval( $code )Parameters: This function accepts single parameter code which is used to hold the PHP code as a string.Example:<?php// Function without argumentfunction writeMessage() {    echo \"Welcome to GeeksforGeeks!\";}// Declare variable and store// function name$functionName = \"writeMessage();\";// Function call using evaleval($functionName);?>Output:  Welcome to GeeksforGeeks!");create(getIdByTitle(this.context,"Programs"),"How to get multiple selected values of select box in php?","Given a list of items and the task is to retrieve the multiple selected value from a select box using PHP.Use multiple attribute in HTML to select multiple value from drop down list. Selecting multiple values in HTML depends on operating system and browser.For window users – hold down + CTRL key to select multiple optionFor mac users – hold down command key to select multiple optionExample: This example creates a list of items using HTML.<html>    <body>        <form method = \"post\" action = \"name.php\">            <h4>SELECT SUJECTS</h4>            <!--Using multiple to select multiple value-->            <select name = \"subject\" multiple size = 6>                <option value = \"english\">ENGLISH</option>                <option value = \"maths\">MATHS</option>                <option value = \"computer\">COMPUTER</option>                <option value = \"physics\">PHYSICS</option>                <option value = \"chemistry\">CHEMISTRY</option>                <option value = \"hindi\">HINDI</option>            </select>            <input type = \"submit\" name = \"submit\" value = Submit>        </form>    </body></html>Now, the task is to retrieve or print multiple selected value from list. Use form method and loop to retrieve selected value in PHP.Example:<html>    <body>        <!--name.php to be called on form submission-->        <form method = \'post\'>            <h4>SELECT SUJECTS</h4>            <select name = \'subject[]\' multiple size = 6>                <option value = \'english\'>ENGLISH</option>                <option value = \'maths\'>MATHS</option>                <option value = \'computer\'>COMPUTER</option>                <option value = \'physics\'>PHYSICS</option>                <option value = \'chemistry\'>CHEMISTRY</option>                <option value = \'hindi\'>HINDI</option>            </select>            <input type = \'submit\' name = \'submit\' value = Submit>        </form>    </body></html><?php    // Check if form is submitted successfully    if(isset($_POST[\"submit\"]))    {        // Check if any option is selected        if(isset($_POST[\"subject\"]))        {            // Retrieving each selected option            foreach ($_POST[\'subject\'] as $subject)                print \"You selected $subject<br/>\";        }    else        echo \"Select an option first !!\";    }?>Output:Note: The form can be submitted using $_GET method. It depends on the form method=”?” value.");create(getIdByTitle(this.context,"Programs"),"How to make a redirect in PHP?","Redirection from one page to another in PHP is commonly achieved using the following two ways:Using Header Function in PHP:The header() function is an inbuilt function in PHP which is used to send the raw HTTP (Hyper Text Transfer Protocol) header to the client.Syntax:header( $header, $replace, $http_response_code )Parameters: This function accepts three parameters as mentioned above and described below:$header: This parameter is used to hold the header string.$replace: This parameter is used to hold the replace parameter which indicates the header should replace a previous similar header, or add a second header of the same type. It is optional parameter.$http_response_code: This parameter hold the HTTP response code.Below program illustrates the header() function in PHP:Program:<?php// Redirect browserheader(\"Location: http://www.geeksforgeeks.org\");exit;?>Note: The die() or exit() function after header is mandatory. If die() or exit() is not put after after the header(‘Location: ….’) then script may continue resulting in unexpected behavior. For example, result in content being disclosed that actually wanted to prevent with the redirect (HTTP 301).Using JavaScript via PHP:The windows.location object in JavaScript is used to get the current page address(URL) and to redirect the browser to a new page. The window.location object contains the crucial information about a page such as hostname, href, pathname, port etc.Example:<html>    <head>        <title>window.location function</title>    </head>    <body>    <p id=\"demo\"></p>    <script>        document.getElementById(\"demo\").innerHTML =            \"URL: \" + window.location.href +\"</br>\";        document.getElementById(\"demo\").innerHTML =        document.getElementById(\"demo\").innerHTML +        \"Hostname: \" + window.location.hostname + \"</br>\";        document.getElementById(\"demo\").innerHTML =        document.getElementById(\"demo\").innerHTML +        \"Protocal: \" + window.location.protocol + \"</br>\";    </script>    </body></html>Output:  URL: https://ide.geeksforgeeks.org/tryit.php  Hostname: ide.geeksforgeeks.org  Protocal: https:");create(getIdByTitle(this.context,"Programs"),"How to convert an image to base64 encoding in PHP?","The base64_encode() function is an inbuilt function in PHP which is used to convert any data to base64 encoding. In order to convert an image into base64 encoding firstly need to get the contents of file. This can be done with the help of file_get_contents() function of PHP. Then pass this raw data to base64_encode() function to encode.Required Function:The base64_encode() function is an inbuilt function in PHP which is used to Encodes data with MIME base64. MIME (Multipurpose Internet Mail Extensions) base64 is used to encode the string in base64. The base64_encoded data takes 33% more space then original data.The file_get_contents() function in PHP is an inbuilt function which is used to read a file into a string. The function uses memory mapping techniques which are supported by the server and thus enhances the performances making it a preferred way of reading contents of a file.Input Image:Program:<?php// Get the image and convert into string$img = file_get_contents(\'https://cdncontribute.geeksforgeeks.org/wp-content/uploads/geeksforgeeks-22.png\');// Encode the image string data into base64$data = base64_encode($img);// Display the outputecho $data;?>Output:  iVBORw0KGgoAAAANSUhEUgAAApsAAAC4CAYAAACsNSfVAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAZdEVYdFNvZnR3YXJdhfdsglgklAEFkb2JlIEltYWdlUmVhZHlxyWqwrwtwefd...TeUsalQKBQKhUKhsBvK2FQoFAqFQqFQ2A1lbCoUCoVCoVAo7IYyNhUKhUKhUCgUdkMZmwqFQKBQKO0H0fxpZ1bfc");
    }

    public void insertAllArticles()
    {

        this.basicArticles();

        this.arrayArticles();

        this.stringArticles();

        this.mathArticles();

        this.functionArticles();

        this.fileHandlingArticles();

        this.inputAndOuputArticles();

        this.programArticles();


    }





}
